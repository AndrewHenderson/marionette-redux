{"version":3,"file":"marionette-redux.js","sources":["src/mapStateToProps.js","src/mapDispatchToProps.js","src/mergeProps.js","src/setState.js","src/getState.js","src/isDisplayComponent.js","src/mixin.js","src/connect.js"],"sourcesContent":["export default state => ({})\n","export default dispatch => ({ dispatch })\n","import _ from 'underscore';\nexport default (stateProps, dispatchProps, parentProps) => (\n  _.extend({}, parentProps, stateProps, dispatchProps)\n)\n","import _ from 'underscore';\n\nexport default function(key, val, options) {\n\n  if (key == null) {\n    return this;\n  }\n\n  // Handle both `\"key\", value` and `{key: value}` -style arguments.\n  let state;\n  if (typeof key === 'object') {\n    state = key;\n    options = val;\n  } else {\n    (state = {})[key] = val;\n  }\n\n  options || (options = {});\n\n  // Extract state and options.\n  const unset      = options.unset;\n  const silent     = options.silent;\n  const changes    = [];\n  const changing   = this._changing;\n  this._changing = true;\n\n  if (!changing) {\n    this._previousState = _.clone(this.state);\n    this.changed = {};\n  }\n\n  const current = this.state;\n  const changed = this.changed;\n  const prev    = this._previousState;\n\n  // For each `set` state, update or delete the current value.\n  _.each(state, function(_val, _key) {\n    if (!_.isEqual(current[_key], _val)) {\n      changes.push(_key);\n    }\n    if (!_.isEqual(prev[_key], _val)) {\n      changed[_key] = _val;\n    } else {\n      delete changed[_key];\n    }\n    unset ? delete current[_key] : current[_key] = _val;\n  });\n\n  // Trigger all relevant state changes.\n  if (!silent) {\n    if (changes.length) {\n      this._pending = options;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      this.trigger('change:' + changes[i], this, current[changes[i]], options);\n    }\n  }\n\n  // You might be wondering why there's a `while` loop here. Changes can\n  // be recursively nested within `\"change\"` events.\n  if (changing) {\n    return this;\n  }\n  if (!silent) {\n    while (this._pending) {\n      options = this._pending;\n      this._pending = false;\n      this.trigger('change', this, options);\n    }\n  }\n  this._pending = false;\n  this._changing = false;\n  return this\n}\n","export default function(attr) {\n  return this.state[attr];\n}\n","import Marionette from 'marionette'\n\nexport default function(Component) {\n  if (typeof Component === 'object') {\n    return Component instanceof Marionette.View || Component instanceof Marionette.Behavior\n  }\n  if (typeof Component === 'function') {\n    return Component.prototype instanceof Marionette.View || Component.prototype instanceof Marionette.Behavior\n  }\n  return false\n}\n","import _ from 'underscore';\nimport Marionette from 'marionette'\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport setState from './setState'\nimport getState from './getState'\nimport isDisplayComponent from './isDisplayComponent';\n\nexport default {\n\n  initialize(_options) {\n\n    const options = _options || {};\n\n    this.mapState = options.mapStateToProps || this.mapStateToProps || defaultMapStateToProps;\n    this.mapDispatch = options.mapDispatchToProps || this.mapDispatchToProps || defaultMapDispatchToProps;\n    this.mergeProps = options.mergeProps || this.mergeProps || defaultMergeProps;\n    this.props = this.props || {};\n\n    if (options.props) {\n      _.extend(this.props, options.props)\n    }\n\n    this.store = options.store || this.store;\n\n    if (!this.store && window && window.store) {\n      this.store = window.store\n    }\n\n    const storeState = this.store.getState();\n    this.state = _.defaults({\n      storeState: storeState\n    }, this.getInitialState());\n\n    this.bindStateEvents();\n    this.clearCache();\n\n    if (!isDisplayComponent(this)) {\n      this.trySubscribe()\n    }\n  },\n\n  getInitialState() {\n    return {}\n  },\n\n  setState,\n\n  getState,\n\n  bindStateEvents() {\n    let bind;\n    if (this.stateEvents) {\n      bind = Marionette.bindEvents || Marionette.bindEntityEvents;\n      bind(this, this, this.stateEvents)\n    }\n  },\n\n  unbindStateEvents() {\n    let unbind;\n    if (this.stateEvents) {\n      unbind = Marionette.unbindEvents || Marionette.unbindEntityEvents;\n      unbind(this, this, this.stateEvents)\n    }\n  },\n\n  computeStateProps(store, props) {\n    if (!this.finalMapStateToProps) {\n      return this.configureFinalMapState(store, props)\n    }\n\n    const state = store.getState();\n    const stateProps = this.doStatePropsDependOnOwnProps ?\n      this.finalMapStateToProps(state, props) :\n      this.finalMapStateToProps(state);\n\n    return stateProps\n  },\n\n  configureFinalMapState(store, props) {\n    const mappedState = this.mapState(store.getState(), props);\n    const isFactory = _.isFunction(mappedState);\n\n    this.finalMapStateToProps = isFactory ? mappedState : this.mapState;\n    this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeStateProps(store, props)\n    }\n\n    return mappedState\n  },\n\n  updateStatePropsIfNeeded() {\n    const nextStateProps = this.computeStateProps(this.store, this.props);\n    if (this.stateProps && _.isEqual(nextStateProps, this.stateProps)) {\n      return false\n    }\n\n    this.stateProps = nextStateProps;\n\n    return true\n  },\n\n  computeDispatchProps(store, props) {\n    if (!this.finalMapDispatchToProps) {\n      return this.configureFinalMapDispatch(store, props)\n    }\n\n    const dispatch = store.dispatch;\n    const dispatchProps = this.doDispatchPropsDependOnOwnProps ?\n      this.finalMapDispatchToProps(dispatch, props) :\n      this.finalMapDispatchToProps(dispatch);\n\n    return dispatchProps\n  },\n\n  configureFinalMapDispatch(store, props) {\n    const mappedDispatch = this.mapDispatch(store.dispatch, props);\n    const isFactory = _.isFunction(mappedDispatch);\n\n    this.finalMapDispatchToProps = isFactory ? mappedDispatch : this.mapDispatch;\n    this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeDispatchProps(store, props)\n    }\n\n    return mappedDispatch\n  },\n\n  updateDispatchPropsIfNeeded() {\n    const nextDispatchProps = this.computeDispatchProps(this.store, this.props);\n    if (this.dispatchProps && _.isEqual(nextDispatchProps, this.dispatchProps)) {\n      return false\n    }\n\n    this.dispatchProps = nextDispatchProps;\n\n    return true\n  },\n\n  isSubscribed() {\n    return _.isFunction(this.unsubscribe)\n  },\n\n  trySubscribe() {\n    if (!this.isSubscribed()) {\n      this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));\n      this.handleDispatchProps();\n      this.handleChange()\n    }\n  },\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null\n    }\n  },\n\n  onRender() {\n    this.trySubscribe()\n  },\n\n  onDestroy() {\n    this.tryUnsubscribe();\n    this.unbindStateEvents();\n    this.clearCache()\n  },\n\n  clearCache() {\n    this.dispatchProps = null;\n    this.stateProps = null;\n    this.finalMapDispatchToProps = null;\n    this.finalMapStateToProps = null;\n    this.haveInitialStatePropsBeenDetermined = false;\n    this.haveInitialDispatchPropsBeenDetermined = false\n  },\n\n  handleDispatchProps() {\n    if (!this.haveInitialDispatchPropsBeenDetermined) {\n      this.updateDispatchPropsIfNeeded();\n      this.haveInitialDispatchPropsBeenDetermined = true\n    }\n  },\n\n  handleChange() {\n    if (!this.unsubscribe) {\n      return\n    }\n\n    const storeState = this.store.getState();\n    const prevStoreState = this.getState('storeState');\n    if (this.haveInitialStatePropsBeenDetermined && _.isEqual(prevStoreState, storeState)) {\n      return\n    }\n\n    const haveStatePropsChanged = this.updateStatePropsIfNeeded();\n    this.haveInitialStatePropsBeenDetermined = true;\n\n    if (haveStatePropsChanged) {\n\n      const mergedProps = this.mergeProps(this.stateProps, this.dispatchProps, this.props);\n      this.props = mergedProps;\n\n      _.isFunction(this.componentDidReceiveProps) && this.componentDidReceiveProps(mergedProps)\n    }\n\n    this.setState({\n      storeState\n    })\n  }\n};\n","import _ from 'underscore';\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport mixin from './mixin'\nimport isDisplayComponent from './isDisplayComponent';\n\nexport default (_mapStateToProps, _mapDispatchToProps, _mergeProps, _options) => {\n\n  const options = _options || {};\n\n  return function(Component) {\n\n    const mapStateToProps = _mapStateToProps || Component.prototype.mapStateToProps || defaultMapStateToProps;\n    const mapDispatchToProps = _mapDispatchToProps || Component.prototype.mapDispatchToProps || defaultMapDispatchToProps;\n    const mergeProps = _mergeProps || Component.prototype.mergeProps || defaultMergeProps;\n    const store = options.store || Component.prototype.store;\n    const componentInitialize = Component.prototype.initialize;\n    const componentonRender = Component.prototype.onRender;\n    const componentOnDestroy = Component.prototype.onDestroy;\n\n    let connectMixin = _.defaults({}, {\n\n      initialize(_initOptions) {\n\n        const initOptions = _initOptions || {};\n\n        mixin.initialize.call(this, {\n          mapStateToProps,\n          mapDispatchToProps,\n          mergeProps,\n          store,\n          props: initOptions.props\n        });\n\n        if (componentInitialize) {\n          componentInitialize.apply(this, arguments);\n        }\n      },\n\n      onRender() {\n\n        mixin.onRender.apply(this, arguments);\n\n        if (componentonRender) {\n          componentonRender.apply(this, arguments)\n        }\n      },\n\n      onDestroy() {\n\n        mixin.onDestroy.apply(this, arguments);\n\n        if (componentOnDestroy) {\n          componentOnDestroy.apply(this, arguments);\n        }\n      }\n    }, mixin);\n\n    if (!isDisplayComponent(Component)) {\n      connectMixin = _.omit(connectMixin, 'onRender')\n    }\n\n    return Component.extend(connectMixin)\n  }\n}\n"],"names":["dispatch","stateProps","dispatchProps","parentProps","_","extend","key","val","options","state","unset","silent","changes","changing","_changing","_previousState","clone","changed","current","prev","each","_val","_key","isEqual","push","length","_pending","i","trigger","attr","Component","Marionette","View","Behavior","prototype","_options","mapState","mapStateToProps","defaultMapStateToProps","mapDispatch","mapDispatchToProps","defaultMapDispatchToProps","mergeProps","defaultMergeProps","props","store","window","storeState","getState","defaults","getInitialState","bindStateEvents","clearCache","isDisplayComponent","trySubscribe","bind","stateEvents","bindEvents","bindEntityEvents","unbind","unbindEvents","unbindEntityEvents","finalMapStateToProps","configureFinalMapState","doStatePropsDependOnOwnProps","mappedState","isFactory","isFunction","computeStateProps","nextStateProps","finalMapDispatchToProps","configureFinalMapDispatch","doDispatchPropsDependOnOwnProps","mappedDispatch","computeDispatchProps","nextDispatchProps","unsubscribe","isSubscribed","subscribe","handleChange","handleDispatchProps","tryUnsubscribe","unbindStateEvents","haveInitialStatePropsBeenDetermined","haveInitialDispatchPropsBeenDetermined","updateDispatchPropsIfNeeded","prevStoreState","haveStatePropsChanged","updateStatePropsIfNeeded","mergedProps","componentDidReceiveProps","setState","_mapStateToProps","_mapDispatchToProps","_mergeProps","componentInitialize","initialize","componentonRender","onRender","componentOnDestroy","onDestroy","connectMixin","_initOptions","initOptions","call","apply","arguments","mixin","omit"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}