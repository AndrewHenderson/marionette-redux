{"version":3,"file":"marionette-redux.js","sources":["src/mapStateToProps.js","src/mapDispatchToProps.js","src/mergeProps.js","src/setState.js","src/getState.js","src/mixin.js","src/connect.js"],"sourcesContent":["export default state => ({})\n","export default dispatch => ({ dispatch })\n","import _ from 'underscore';\nexport default (stateProps, dispatchProps, parentProps) => (\n  _.extend({}, parentProps, stateProps, dispatchProps)\n)\n","import _ from 'underscore';\n\nexport default function(key, val, options) {\n\n  if (key == null) {\n    return this;\n  }\n\n  // Handle both `\"key\", value` and `{key: value}` -style arguments.\n  let state;\n  if (typeof key === 'object') {\n    state = key;\n    options = val;\n  } else {\n    (state = {})[key] = val;\n  }\n\n  options || (options = {});\n\n  // Extract state and options.\n  const unset      = options.unset;\n  const silent     = options.silent;\n  const changes    = [];\n  const changing   = this._changing;\n  this._changing = true;\n\n  if (!changing) {\n    this._previousState = _.clone(this.state);\n    this.changed = {};\n  }\n\n  const current = this.state;\n  const changed = this.changed;\n  const prev    = this._previousState;\n\n  // For each `set` state, update or delete the current value.\n  _.each(state, function(_val, _key) {\n    if (!_.isEqual(current[_key], _val)) {\n      changes.push(_key);\n    }\n    if (!_.isEqual(prev[_key], _val)) {\n      changed[_key] = _val;\n    } else {\n      delete changed[_key];\n    }\n    unset ? delete current[_key] : current[_key] = _val;\n  });\n\n  // Trigger all relevant state changes.\n  if (!silent) {\n    if (changes.length) {\n      this._pending = options;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      this.trigger('change:' + changes[i], this, current[changes[i]], options);\n    }\n  }\n\n  // You might be wondering why there's a `while` loop here. Changes can\n  // be recursively nested within `\"change\"` events.\n  if (changing) {\n    return this;\n  }\n  if (!silent) {\n    while (this._pending) {\n      options = this._pending;\n      this._pending = false;\n      this.trigger('change', this, options);\n    }\n  }\n  this._pending = false;\n  this._changing = false;\n  return this\n}\n","export default function(attr) {\n  return this.state[attr];\n}\n","import _ from 'underscore';\nimport Marionette from 'marionette'\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport setState from './setState'\nimport getState from './getState'\n\nexport default {\n\n  initialize(_options) {\n\n    const options = _options || {};\n\n    this.mapState = options.mapStateToProps || this.mapStateToProps || defaultMapStateToProps;\n    this.mapDispatch = options.mapDispatchToProps || this.mapDispatchToProps || defaultMapDispatchToProps;\n    this.props = this.props || {};\n    if (options.props) {\n      _.extend(this.props, options.props)\n    }\n    this.store = options.store || this.store;\n    const storeState = this.store.getState();\n    this.state = _.defaults({\n      storeState: storeState\n    }, this.state);\n    this.bindStateEvents();\n    this.clearCache();\n    this.trySubscribe()\n  },\n\n  setState,\n\n  getState,\n\n  bindStateEvents() {\n    if (this.stateEvents) {\n      Marionette.bindEvents(this, this, this.stateEvents)\n    }\n  },\n\n  unbindStateEvents() {\n    if (this.stateEvents) {\n      Marionette.unbindEvents(this, this, this.stateEvents)\n    }\n  },\n\n  computeStateProps(store, props) {\n    if (!this.finalMapStateToProps) {\n      return this.configureFinalMapState(store, props)\n    }\n\n    const state = store.getState();\n    const stateProps = this.doStatePropsDependOnOwnProps ?\n      this.finalMapStateToProps(state, props) :\n      this.finalMapStateToProps(state);\n\n    return stateProps\n  },\n\n  configureFinalMapState(store, props) {\n    const mappedState = this.mapState(store.getState(), props);\n    const isFactory = _.isFunction(mappedState);\n\n    this.finalMapStateToProps = isFactory ? mappedState : this.mapState;\n    this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeStateProps(store, props)\n    }\n\n    return mappedState\n  },\n\n  updateStatePropsIfNeeded() {\n    const nextStateProps = this.computeStateProps(this.store, this.props);\n    if (this.stateProps && _.isEqual(nextStateProps, this.stateProps)) {\n      return false\n    }\n\n    this.stateProps = nextStateProps;\n\n    return true\n  },\n\n  computeDispatchProps(store, props) {\n    if (!this.finalMapDispatchToProps) {\n      return this.configureFinalMapDispatch(store, props)\n    }\n\n    const dispatch = store.dispatch;\n    const dispatchProps = this.doDispatchPropsDependOnOwnProps ?\n      this.finalMapDispatchToProps(dispatch, props) :\n      this.finalMapDispatchToProps(dispatch);\n\n    return dispatchProps\n  },\n\n  configureFinalMapDispatch(store, props) {\n    const mappedDispatch = this.mapDispatch(store.dispatch, props);\n    const isFactory = _.isFunction(mappedDispatch);\n\n    this.finalMapDispatchToProps = isFactory ? mappedDispatch : this.mapDispatch;\n    this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeDispatchProps(store, props)\n    }\n\n    return mappedDispatch\n  },\n\n  updateDispatchPropsIfNeeded() {\n    const nextDispatchProps = this.computeDispatchProps(this.store, this.props);\n    if (this.dispatchProps && _.isEqual(nextDispatchProps, this.dispatchProps)) {\n      return false\n    }\n\n    this.dispatchProps = nextDispatchProps;\n\n    return true\n  },\n\n  isSubscribed() {\n    return _.isFunction(this.unsubscribe)\n  },\n\n  trySubscribe() {\n    if (!this.isSubscribed()) {\n      this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));\n      this.handleDispatchProps();\n      this.handleChange()\n    }\n  },\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null\n    }\n  },\n\n  onDestroy() {\n    this.tryUnsubscribe();\n    this.unbindStateEvents();\n    this.clearCache()\n  },\n\n  clearCache() {\n    this.dispatchProps = null;\n    this.stateProps = null;\n    this.finalMapDispatchToProps = null;\n    this.finalMapStateToProps = null;\n    this.haveInitialStatePropsBeenDetermined = false;\n    this.haveInitialDispatchPropsBeenDetermined = false\n  },\n\n  handleDispatchProps() {\n    if (!this.haveInitialDispatchPropsBeenDetermined) {\n      this.updateDispatchPropsIfNeeded();\n      this.haveInitialDispatchPropsBeenDetermined = true\n    }\n  },\n\n  handleChange() {\n    if (!this.unsubscribe) {\n      return\n    }\n\n    const storeState = this.store.getState();\n    const prevStoreState = this.getState('storeState');\n    if (this.haveInitialStatePropsBeenDetermined && _.isEqual(prevStoreState, storeState)) {\n      return\n    }\n\n    const haveStatePropsChanged = this.updateStatePropsIfNeeded();\n    this.haveInitialStatePropsBeenDetermined = true;\n\n    if (haveStatePropsChanged) {\n\n      const mergedProps = defaultMergeProps(this.stateProps, this.dispatchProps, this.props);\n      this.props = mergedProps;\n\n      _.isFunction(this.componentDidReceiveProps) && this.componentDidReceiveProps(mergedProps)\n    }\n\n    this.setState({\n      storeState\n    })\n  }\n};\n","import _ from 'underscore';\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport mixin from './mixin'\n\nexport default (_mapStateToProps, _mapDispatchToProps, _options) => {\n\n  const options = _options || {};\n\n  return function(Component) {\n\n    const mapStateToProps = _mapStateToProps || Component.prototype.mapStateToProps || defaultMapStateToProps;\n    const mapDispatchToProps = _mapDispatchToProps || Component.prototype.mapDispatchToProps || defaultMapDispatchToProps;\n    const store = options.store || Component.prototype.store;\n    const componentInitialize = Component.prototype.initialize;\n    const componentOnDestroy = Component.prototype.onDestroy;\n\n    const connectMixin = _.defaults({}, {\n\n      initialize(_initOptions) {\n\n        const initOptions = _initOptions || {};\n\n        mixin.initialize.call(this, {\n          mapStateToProps,\n          mapDispatchToProps,\n          store,\n          props: initOptions.props\n        });\n\n        if (componentInitialize) {\n          componentInitialize.call(this, initOptions)\n        }\n      },\n\n      onDestroy() {\n\n        mixin.onDestroy.call(this);\n\n        if (componentOnDestroy) {\n          componentOnDestroy.call(this)\n        }\n      }\n    }, mixin);\n\n    return Component.extend(connectMixin)\n  }\n}\n"],"names":["dispatch","stateProps","dispatchProps","parentProps","_","extend","key","val","options","state","unset","silent","changes","changing","_changing","_previousState","clone","changed","current","prev","each","_val","_key","isEqual","push","length","_pending","i","trigger","attr","_options","mapState","mapStateToProps","defaultMapStateToProps","mapDispatch","mapDispatchToProps","defaultMapDispatchToProps","props","store","storeState","getState","defaults","bindStateEvents","clearCache","trySubscribe","stateEvents","bindEvents","unbindEvents","finalMapStateToProps","configureFinalMapState","doStatePropsDependOnOwnProps","mappedState","isFactory","isFunction","computeStateProps","nextStateProps","finalMapDispatchToProps","configureFinalMapDispatch","doDispatchPropsDependOnOwnProps","mappedDispatch","computeDispatchProps","nextDispatchProps","unsubscribe","isSubscribed","subscribe","handleChange","bind","handleDispatchProps","tryUnsubscribe","unbindStateEvents","haveInitialStatePropsBeenDetermined","haveInitialDispatchPropsBeenDetermined","updateDispatchPropsIfNeeded","prevStoreState","haveStatePropsChanged","updateStatePropsIfNeeded","mergedProps","defaultMergeProps","componentDidReceiveProps","setState","_mapStateToProps","_mapDispatchToProps","Component","prototype","componentInitialize","initialize","componentOnDestroy","onDestroy","connectMixin","_initOptions","initOptions","call","mixin"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}