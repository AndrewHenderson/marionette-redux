{"version":3,"file":"marionette-redux.js","sources":["src/mapStateToProps.js","src/mapDispatchToProps.js","src/mergeProps.js","src/setState.js","src/getState.js","src/isDisplayComponent.js","src/mixin.js","src/connect.js","src/marionette-redux.js"],"sourcesContent":["export default function mapStateToProps() {\n  return {}\n}\n","export default function mapDispatchToProps(dispatch) {\n  return {\n    dispatch: dispatch\n  }\n}\n","import _ from 'underscore';\nexport default function mergeProps(stateProps, dispatchProps, parentProps) {\n  return _.extend({}, parentProps, stateProps, dispatchProps)\n}\n","import _ from 'underscore';\n\nexport default function setState(key, val, options) {\n\n  if (key == null) {\n    return this;\n  }\n\n  // Handle both `\"key\", value` and `{key: value}` -style arguments.\n  let state;\n  if (typeof key === 'object') {\n    state = key;\n    options = val;\n  } else {\n    (state = {})[key] = val;\n  }\n\n  options || (options = {});\n\n  // Extract state and options.\n  const unset      = options.unset;\n  const silent     = options.silent;\n  const changes    = [];\n  const changing   = this._changing;\n  this._changing = true;\n\n  if (!changing) {\n    this._previousState = _.clone(this.state);\n    this.changed = {};\n  }\n\n  const current = this.state;\n  const changed = this.changed;\n  const prev    = this._previousState;\n\n  // For each `set` state, update or delete the current value.\n  _.each(state, function(_val, _key) {\n    if (!_.isEqual(current[_key], _val)) {\n      changes.push(_key);\n    }\n    if (!_.isEqual(prev[_key], _val)) {\n      changed[_key] = _val;\n    } else {\n      delete changed[_key];\n    }\n    unset ? delete current[_key] : current[_key] = _val;\n  });\n\n  // Trigger all relevant state changes.\n  if (!silent) {\n    if (changes.length) {\n      this._pending = options;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      this.trigger('change:' + changes[i], this, current[changes[i]], options);\n    }\n  }\n\n  // You might be wondering why there's a `while` loop here. Changes can\n  // be recursively nested within `\"change\"` events.\n  if (changing) {\n    return this;\n  }\n  if (!silent) {\n    while (this._pending) {\n      options = this._pending;\n      this._pending = false;\n      this.trigger('change', this, options);\n    }\n  }\n  this._pending = false;\n  this._changing = false;\n  return this\n}\n","export default function getState(attr) {\n  return this.state[attr];\n}\n","import Marionette from 'marionette'\n\nexport default function isDisplayComponent(Component) {\n  if (typeof Component === 'object') {\n    return Component instanceof Marionette.View || Component instanceof Marionette.Behavior\n  }\n  if (typeof Component === 'function') {\n    return Component.prototype instanceof Marionette.View || Component.prototype instanceof Marionette.Behavior\n  }\n  return false\n}\n","import _ from 'underscore';\nimport Marionette from 'marionette'\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport setState from './setState'\nimport getState from './getState'\nimport isDisplayComponent from './isDisplayComponent';\n\nconst mixin = {\n\n  initialize(_options) {\n\n    const options = _options || {};\n\n    this.mapState = options.mapStateToProps || this.mapStateToProps || defaultMapStateToProps;\n    this.mapDispatch = options.mapDispatchToProps || this.mapDispatchToProps || defaultMapDispatchToProps;\n    this.mergeProps = options.mergeProps || this.mergeProps || defaultMergeProps;\n    this.props = this.props || {};\n\n    if (options.props) {\n      _.extend(this.props, options.props)\n    }\n\n    this.store = options.store || this.store\n\n    if (!this.store && window && window.store) {\n      this.store = window.store\n    }\n\n    const storeState = this.store.getState();\n    this.state = _.defaults({\n      storeState: storeState\n    }, this.getInitialState());\n\n    this.bindStateEvents();\n    this.clearCache();\n\n    if (!isDisplayComponent(this)) {\n      this.trySubscribe()\n    }\n  },\n\n  getInitialState() {\n    return {}\n  },\n\n  setState,\n\n  getState,\n\n  bindStateEvents() {\n    let bind;\n    if (this.stateEvents) {\n      bind = Marionette.bindEvents || Marionette.bindEntityEvents;\n      bind(this, this, this.stateEvents)\n    }\n  },\n\n  unbindStateEvents() {\n    let unbind;\n    if (this.stateEvents) {\n      unbind = Marionette.unbindEvents || Marionette.unbindEntityEvents;\n      unbind(this, this, this.stateEvents)\n    }\n  },\n\n  computeStateProps(store, props) {\n    if (!this.finalMapStateToProps) {\n      return this.configureFinalMapState(store, props)\n    }\n\n    const state = store.getState();\n    const stateProps = this.doStatePropsDependOnOwnProps ?\n      this.finalMapStateToProps(state, props) :\n      this.finalMapStateToProps(state);\n\n    return stateProps\n  },\n\n  configureFinalMapState(store, props) {\n    const mappedState = this.mapState(store.getState(), props);\n    const isFactory = _.isFunction(mappedState);\n\n    this.finalMapStateToProps = isFactory ? mappedState : this.mapState;\n    this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeStateProps(store, props)\n    }\n\n    return mappedState\n  },\n\n  updateStatePropsIfNeeded() {\n    const nextStateProps = this.computeStateProps(this.store, this.props);\n    if (this.stateProps && _.isEqual(nextStateProps, this.stateProps)) {\n      return false\n    }\n\n    this.stateProps = nextStateProps;\n\n    return true\n  },\n\n  computeDispatchProps(store, props) {\n    if (!this.finalMapDispatchToProps) {\n      return this.configureFinalMapDispatch(store, props)\n    }\n\n    const dispatch = store.dispatch;\n    const dispatchProps = this.doDispatchPropsDependOnOwnProps ?\n      this.finalMapDispatchToProps(dispatch, props) :\n      this.finalMapDispatchToProps(dispatch);\n\n    return dispatchProps\n  },\n\n  configureFinalMapDispatch(store, props) {\n    const mappedDispatch = this.mapDispatch(store.dispatch, props);\n    const isFactory = _.isFunction(mappedDispatch);\n\n    this.finalMapDispatchToProps = isFactory ? mappedDispatch : this.mapDispatch;\n    this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeDispatchProps(store, props)\n    }\n\n    return mappedDispatch\n  },\n\n  updateDispatchPropsIfNeeded() {\n    const nextDispatchProps = this.computeDispatchProps(this.store, this.props);\n    if (this.dispatchProps && _.isEqual(nextDispatchProps, this.dispatchProps)) {\n      return false\n    }\n\n    this.dispatchProps = nextDispatchProps;\n\n    return true\n  },\n\n  isSubscribed() {\n    return _.isFunction(this.unsubscribe)\n  },\n\n  trySubscribe() {\n    if (!this.isSubscribed()) {\n      this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));\n      this.handleDispatchProps();\n      this.handleChange()\n    }\n  },\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null\n    }\n  },\n\n  onRender() {\n    this.trySubscribe()\n  },\n\n  onDestroy() {\n    this.tryUnsubscribe();\n    this.unbindStateEvents();\n    this.clearCache()\n  },\n\n  clearCache() {\n    this.dispatchProps = null;\n    this.stateProps = null;\n    this.finalMapDispatchToProps = null;\n    this.finalMapStateToProps = null;\n    this.haveInitialStatePropsBeenDetermined = false;\n    this.haveInitialDispatchPropsBeenDetermined = false\n  },\n\n  handleDispatchProps() {\n    if (!this.haveInitialDispatchPropsBeenDetermined) {\n      this.updateDispatchPropsIfNeeded();\n      this.haveInitialDispatchPropsBeenDetermined = true\n    }\n  },\n\n  handleChange() {\n    if (!this.unsubscribe) {\n      return\n    }\n\n    const storeState = this.store.getState();\n    const prevStoreState = this.getState('storeState');\n    if (this.haveInitialStatePropsBeenDetermined && _.isEqual(prevStoreState, storeState)) {\n      return\n    }\n\n    const haveStatePropsChanged = this.updateStatePropsIfNeeded();\n    this.haveInitialStatePropsBeenDetermined = true;\n\n    if (haveStatePropsChanged) {\n\n      const mergedProps = this.mergeProps(this.stateProps, this.dispatchProps, this.props);\n      this.props = mergedProps;\n\n      _.isFunction(this.componentDidReceiveProps) && this.componentDidReceiveProps(mergedProps)\n    }\n\n    this.setState({\n      storeState\n    })\n  }\n};\n\nexport default mixin;\n","import _ from 'underscore';\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport mixin from './mixin'\nimport isDisplayComponent from './isDisplayComponent';\n\nexport default function connect(_mapStateToProps, _mapDispatchToProps, _mergeProps, _options) {\n\n  const options = _options || {};\n\n  return function(Component) {\n\n    const mapStateToProps = _mapStateToProps || Component.prototype.mapStateToProps || defaultMapStateToProps;\n    const mapDispatchToProps = _mapDispatchToProps || Component.prototype.mapDispatchToProps || defaultMapDispatchToProps;\n    const mergeProps = _mergeProps || Component.prototype.mergeProps || defaultMergeProps;\n    const store = options.store || Component.prototype.store;\n    const componentInitialize = Component.prototype.initialize;\n    const componentonRender = Component.prototype.onRender;\n    const componentOnDestroy = Component.prototype.onDestroy;\n\n    let connectMixin = _.defaults({}, {\n\n      initialize(_initOptions) {\n\n        const initOptions = _initOptions || {};\n\n        mixin.initialize.call(this, {\n          mapStateToProps,\n          mapDispatchToProps,\n          mergeProps,\n          store,\n          props: initOptions.props\n        });\n\n        if (componentInitialize) {\n          componentInitialize.apply(this, arguments);\n        }\n      },\n\n      onRender() {\n\n        mixin.onRender.apply(this, arguments);\n\n        if (componentonRender) {\n          componentonRender.apply(this, arguments)\n        }\n      },\n\n      onDestroy() {\n\n        mixin.onDestroy.apply(this, arguments);\n\n        if (componentOnDestroy) {\n          componentOnDestroy.apply(this, arguments);\n        }\n      }\n    }, mixin);\n\n    if (!isDisplayComponent(Component)) {\n      connectMixin = _.omit(connectMixin, 'onRender')\n    }\n\n    return Component.extend(connectMixin)\n  }\n}\n","import connect from './connect'\nimport mixin from './mixin'\nimport { version } from '../package.json'\n\nconst MarionetteRedux = {};\n\nMarionetteRedux.connect = connect;\nMarionetteRedux.mixin = mixin;\nMarionetteRedux.VERSION = version;\n\nexport default MarionetteRedux;\n"],"names":["mapStateToProps","mapDispatchToProps","dispatch","mergeProps","stateProps","dispatchProps","parentProps","_","extend","setState","key","val","options","state","unset","silent","changes","changing","_changing","_previousState","clone","changed","current","prev","each","_val","_key","isEqual","push","length","_pending","i","trigger","getState","attr","isDisplayComponent","Component","Marionette","View","Behavior","prototype","mixin","_options","mapState","defaultMapStateToProps","mapDispatch","defaultMapDispatchToProps","defaultMergeProps","props","store","window","storeState","defaults","getInitialState","bindStateEvents","clearCache","trySubscribe","bind","stateEvents","bindEvents","bindEntityEvents","unbind","unbindEvents","unbindEntityEvents","finalMapStateToProps","configureFinalMapState","doStatePropsDependOnOwnProps","mappedState","isFactory","isFunction","computeStateProps","nextStateProps","finalMapDispatchToProps","configureFinalMapDispatch","doDispatchPropsDependOnOwnProps","mappedDispatch","computeDispatchProps","nextDispatchProps","unsubscribe","isSubscribed","subscribe","handleChange","handleDispatchProps","tryUnsubscribe","unbindStateEvents","haveInitialStatePropsBeenDetermined","haveInitialDispatchPropsBeenDetermined","updateDispatchPropsIfNeeded","prevStoreState","haveStatePropsChanged","updateStatePropsIfNeeded","mergedProps","componentDidReceiveProps","connect","_mapStateToProps","_mapDispatchToProps","_mergeProps","componentInitialize","initialize","componentonRender","onRender","componentOnDestroy","onDestroy","connectMixin","_initOptions","initOptions","call","apply","arguments","omit","MarionetteRedux","VERSION","version"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdoZW5kZXJzb24vbWFyaW9uZXR0ZS1yZWR1eC9zcmMvbWFwU3RhdGVUb1Byb3BzLmpzIiwiL1VzZXJzL2FuZHJld2hlbmRlcnNvbi9tYXJpb25ldHRlLXJlZHV4L3NyYy9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL21lcmdlUHJvcHMuanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL3NldFN0YXRlLmpzIiwiL1VzZXJzL2FuZHJld2hlbmRlcnNvbi9tYXJpb25ldHRlLXJlZHV4L3NyYy9nZXRTdGF0ZS5qcyIsIi9Vc2Vycy9hbmRyZXdoZW5kZXJzb24vbWFyaW9uZXR0ZS1yZWR1eC9zcmMvaXNEaXNwbGF5Q29tcG9uZW50LmpzIiwiL1VzZXJzL2FuZHJld2hlbmRlcnNvbi9tYXJpb25ldHRlLXJlZHV4L3NyYy9taXhpbi5qcyIsIi9Vc2Vycy9hbmRyZXdoZW5kZXJzb24vbWFyaW9uZXR0ZS1yZWR1eC9zcmMvY29ubmVjdC5qcyIsIi9Vc2Vycy9hbmRyZXdoZW5kZXJzb24vbWFyaW9uZXR0ZS1yZWR1eC9zcmMvbWFyaW9uZXR0ZS1yZWR1eC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoKSB7XG4gIHJldHVybiB7fVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIHJldHVybiB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gIH1cbn1cbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBwYXJlbnRQcm9wcykge1xuICByZXR1cm4gXy5leHRlbmQoe30sIHBhcmVudFByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKVxufVxuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFN0YXRlKGtleSwgdmFsLCBvcHRpb25zKSB7XG5cbiAgaWYgKGtleSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBIYW5kbGUgYm90aCBgXCJrZXlcIiwgdmFsdWVgIGFuZCBge2tleTogdmFsdWV9YCAtc3R5bGUgYXJndW1lbnRzLlxuICBsZXQgc3RhdGU7XG4gIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgIHN0YXRlID0ga2V5O1xuICAgIG9wdGlvbnMgPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgKHN0YXRlID0ge30pW2tleV0gPSB2YWw7XG4gIH1cblxuICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuXG4gIC8vIEV4dHJhY3Qgc3RhdGUgYW5kIG9wdGlvbnMuXG4gIGNvbnN0IHVuc2V0ICAgICAgPSBvcHRpb25zLnVuc2V0O1xuICBjb25zdCBzaWxlbnQgICAgID0gb3B0aW9ucy5zaWxlbnQ7XG4gIGNvbnN0IGNoYW5nZXMgICAgPSBbXTtcbiAgY29uc3QgY2hhbmdpbmcgICA9IHRoaXMuX2NoYW5naW5nO1xuICB0aGlzLl9jaGFuZ2luZyA9IHRydWU7XG5cbiAgaWYgKCFjaGFuZ2luZykge1xuICAgIHRoaXMuX3ByZXZpb3VzU3RhdGUgPSBfLmNsb25lKHRoaXMuc3RhdGUpO1xuICAgIHRoaXMuY2hhbmdlZCA9IHt9O1xuICB9XG5cbiAgY29uc3QgY3VycmVudCA9IHRoaXMuc3RhdGU7XG4gIGNvbnN0IGNoYW5nZWQgPSB0aGlzLmNoYW5nZWQ7XG4gIGNvbnN0IHByZXYgICAgPSB0aGlzLl9wcmV2aW91c1N0YXRlO1xuXG4gIC8vIEZvciBlYWNoIGBzZXRgIHN0YXRlLCB1cGRhdGUgb3IgZGVsZXRlIHRoZSBjdXJyZW50IHZhbHVlLlxuICBfLmVhY2goc3RhdGUsIGZ1bmN0aW9uKF92YWwsIF9rZXkpIHtcbiAgICBpZiAoIV8uaXNFcXVhbChjdXJyZW50W19rZXldLCBfdmFsKSkge1xuICAgICAgY2hhbmdlcy5wdXNoKF9rZXkpO1xuICAgIH1cbiAgICBpZiAoIV8uaXNFcXVhbChwcmV2W19rZXldLCBfdmFsKSkge1xuICAgICAgY2hhbmdlZFtfa2V5XSA9IF92YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSBjaGFuZ2VkW19rZXldO1xuICAgIH1cbiAgICB1bnNldCA/IGRlbGV0ZSBjdXJyZW50W19rZXldIDogY3VycmVudFtfa2V5XSA9IF92YWw7XG4gIH0pO1xuXG4gIC8vIFRyaWdnZXIgYWxsIHJlbGV2YW50IHN0YXRlIGNoYW5nZXMuXG4gIGlmICghc2lsZW50KSB7XG4gICAgaWYgKGNoYW5nZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nID0gb3B0aW9ucztcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZTonICsgY2hhbmdlc1tpXSwgdGhpcywgY3VycmVudFtjaGFuZ2VzW2ldXSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgLy8gWW91IG1pZ2h0IGJlIHdvbmRlcmluZyB3aHkgdGhlcmUncyBhIGB3aGlsZWAgbG9vcCBoZXJlLiBDaGFuZ2VzIGNhblxuICAvLyBiZSByZWN1cnNpdmVseSBuZXN0ZWQgd2l0aGluIGBcImNoYW5nZVwiYCBldmVudHMuXG4gIGlmIChjaGFuZ2luZykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGlmICghc2lsZW50KSB7XG4gICAgd2hpbGUgKHRoaXMuX3BlbmRpbmcpIHtcbiAgICAgIG9wdGlvbnMgPSB0aGlzLl9wZW5kaW5nO1xuICAgICAgdGhpcy5fcGVuZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy50cmlnZ2VyKCdjaGFuZ2UnLCB0aGlzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgdGhpcy5fcGVuZGluZyA9IGZhbHNlO1xuICB0aGlzLl9jaGFuZ2luZyA9IGZhbHNlO1xuICByZXR1cm4gdGhpc1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3RhdGUoYXR0cikge1xuICByZXR1cm4gdGhpcy5zdGF0ZVthdHRyXTtcbn1cbiIsImltcG9ydCBNYXJpb25ldHRlIGZyb20gJ21hcmlvbmV0dGUnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGlzcGxheUNvbXBvbmVudChDb21wb25lbnQpIHtcbiAgaWYgKHR5cGVvZiBDb21wb25lbnQgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudCBpbnN0YW5jZW9mIE1hcmlvbmV0dGUuVmlldyB8fCBDb21wb25lbnQgaW5zdGFuY2VvZiBNYXJpb25ldHRlLkJlaGF2aW9yXG4gIH1cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50LnByb3RvdHlwZSBpbnN0YW5jZW9mIE1hcmlvbmV0dGUuVmlldyB8fCBDb21wb25lbnQucHJvdG90eXBlIGluc3RhbmNlb2YgTWFyaW9uZXR0ZS5CZWhhdmlvclxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgTWFyaW9uZXR0ZSBmcm9tICdtYXJpb25ldHRlJ1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnXG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcydcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wcyBmcm9tICcuL21lcmdlUHJvcHMnXG5pbXBvcnQgc2V0U3RhdGUgZnJvbSAnLi9zZXRTdGF0ZSdcbmltcG9ydCBnZXRTdGF0ZSBmcm9tICcuL2dldFN0YXRlJ1xuaW1wb3J0IGlzRGlzcGxheUNvbXBvbmVudCBmcm9tICcuL2lzRGlzcGxheUNvbXBvbmVudCc7XG5cbmNvbnN0IG1peGluID0ge1xuXG4gIGluaXRpYWxpemUoX29wdGlvbnMpIHtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fTtcblxuICAgIHRoaXMubWFwU3RhdGUgPSBvcHRpb25zLm1hcFN0YXRlVG9Qcm9wcyB8fCB0aGlzLm1hcFN0YXRlVG9Qcm9wcyB8fCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzO1xuICAgIHRoaXMubWFwRGlzcGF0Y2ggPSBvcHRpb25zLm1hcERpc3BhdGNoVG9Qcm9wcyB8fCB0aGlzLm1hcERpc3BhdGNoVG9Qcm9wcyB8fCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzO1xuICAgIHRoaXMubWVyZ2VQcm9wcyA9IG9wdGlvbnMubWVyZ2VQcm9wcyB8fCB0aGlzLm1lcmdlUHJvcHMgfHwgZGVmYXVsdE1lcmdlUHJvcHM7XG4gICAgdGhpcy5wcm9wcyA9IHRoaXMucHJvcHMgfHwge307XG5cbiAgICBpZiAob3B0aW9ucy5wcm9wcykge1xuICAgICAgXy5leHRlbmQodGhpcy5wcm9wcywgb3B0aW9ucy5wcm9wcylcbiAgICB9XG5cbiAgICB0aGlzLnN0b3JlID0gb3B0aW9ucy5zdG9yZSB8fCB0aGlzLnN0b3JlXG5cbiAgICBpZiAoIXRoaXMuc3RvcmUgJiYgd2luZG93ICYmIHdpbmRvdy5zdG9yZSkge1xuICAgICAgdGhpcy5zdG9yZSA9IHdpbmRvdy5zdG9yZVxuICAgIH1cblxuICAgIGNvbnN0IHN0b3JlU3RhdGUgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgdGhpcy5zdGF0ZSA9IF8uZGVmYXVsdHMoe1xuICAgICAgc3RvcmVTdGF0ZTogc3RvcmVTdGF0ZVxuICAgIH0sIHRoaXMuZ2V0SW5pdGlhbFN0YXRlKCkpO1xuXG4gICAgdGhpcy5iaW5kU3RhdGVFdmVudHMoKTtcbiAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcblxuICAgIGlmICghaXNEaXNwbGF5Q29tcG9uZW50KHRoaXMpKSB7XG4gICAgICB0aGlzLnRyeVN1YnNjcmliZSgpXG4gICAgfVxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge31cbiAgfSxcblxuICBzZXRTdGF0ZSxcblxuICBnZXRTdGF0ZSxcblxuICBiaW5kU3RhdGVFdmVudHMoKSB7XG4gICAgbGV0IGJpbmQ7XG4gICAgaWYgKHRoaXMuc3RhdGVFdmVudHMpIHtcbiAgICAgIGJpbmQgPSBNYXJpb25ldHRlLmJpbmRFdmVudHMgfHwgTWFyaW9uZXR0ZS5iaW5kRW50aXR5RXZlbnRzO1xuICAgICAgYmluZCh0aGlzLCB0aGlzLCB0aGlzLnN0YXRlRXZlbnRzKVxuICAgIH1cbiAgfSxcblxuICB1bmJpbmRTdGF0ZUV2ZW50cygpIHtcbiAgICBsZXQgdW5iaW5kO1xuICAgIGlmICh0aGlzLnN0YXRlRXZlbnRzKSB7XG4gICAgICB1bmJpbmQgPSBNYXJpb25ldHRlLnVuYmluZEV2ZW50cyB8fCBNYXJpb25ldHRlLnVuYmluZEVudGl0eUV2ZW50cztcbiAgICAgIHVuYmluZCh0aGlzLCB0aGlzLCB0aGlzLnN0YXRlRXZlbnRzKVxuICAgIH1cbiAgfSxcblxuICBjb21wdXRlU3RhdGVQcm9wcyhzdG9yZSwgcHJvcHMpIHtcbiAgICBpZiAoIXRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZUZpbmFsTWFwU3RhdGUoc3RvcmUsIHByb3BzKVxuICAgIH1cblxuICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBzdGF0ZVByb3BzID0gdGhpcy5kb1N0YXRlUHJvcHNEZXBlbmRPbk93blByb3BzID9cbiAgICAgIHRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIHByb3BzKSA6XG4gICAgICB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzKHN0YXRlKTtcblxuICAgIHJldHVybiBzdGF0ZVByb3BzXG4gIH0sXG5cbiAgY29uZmlndXJlRmluYWxNYXBTdGF0ZShzdG9yZSwgcHJvcHMpIHtcbiAgICBjb25zdCBtYXBwZWRTdGF0ZSA9IHRoaXMubWFwU3RhdGUoc3RvcmUuZ2V0U3RhdGUoKSwgcHJvcHMpO1xuICAgIGNvbnN0IGlzRmFjdG9yeSA9IF8uaXNGdW5jdGlvbihtYXBwZWRTdGF0ZSk7XG5cbiAgICB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzID0gaXNGYWN0b3J5ID8gbWFwcGVkU3RhdGUgOiB0aGlzLm1hcFN0YXRlO1xuICAgIHRoaXMuZG9TdGF0ZVByb3BzRGVwZW5kT25Pd25Qcm9wcyA9IHRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMubGVuZ3RoICE9PSAxO1xuXG4gICAgaWYgKGlzRmFjdG9yeSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZVN0YXRlUHJvcHMoc3RvcmUsIHByb3BzKVxuICAgIH1cblxuICAgIHJldHVybiBtYXBwZWRTdGF0ZVxuICB9LFxuXG4gIHVwZGF0ZVN0YXRlUHJvcHNJZk5lZWRlZCgpIHtcbiAgICBjb25zdCBuZXh0U3RhdGVQcm9wcyA9IHRoaXMuY29tcHV0ZVN0YXRlUHJvcHModGhpcy5zdG9yZSwgdGhpcy5wcm9wcyk7XG4gICAgaWYgKHRoaXMuc3RhdGVQcm9wcyAmJiBfLmlzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHRoaXMuc3RhdGVQcm9wcykpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHRoaXMuc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuXG4gICAgcmV0dXJuIHRydWVcbiAgfSxcblxuICBjb21wdXRlRGlzcGF0Y2hQcm9wcyhzdG9yZSwgcHJvcHMpIHtcbiAgICBpZiAoIXRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZUZpbmFsTWFwRGlzcGF0Y2goc3RvcmUsIHByb3BzKVxuICAgIH1cblxuICAgIGNvbnN0IGRpc3BhdGNoID0gc3RvcmUuZGlzcGF0Y2g7XG4gICAgY29uc3QgZGlzcGF0Y2hQcm9wcyA9IHRoaXMuZG9EaXNwYXRjaFByb3BzRGVwZW5kT25Pd25Qcm9wcyA/XG4gICAgICB0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBwcm9wcykgOlxuICAgICAgdGhpcy5maW5hbE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCk7XG5cbiAgICByZXR1cm4gZGlzcGF0Y2hQcm9wc1xuICB9LFxuXG4gIGNvbmZpZ3VyZUZpbmFsTWFwRGlzcGF0Y2goc3RvcmUsIHByb3BzKSB7XG4gICAgY29uc3QgbWFwcGVkRGlzcGF0Y2ggPSB0aGlzLm1hcERpc3BhdGNoKHN0b3JlLmRpc3BhdGNoLCBwcm9wcyk7XG4gICAgY29uc3QgaXNGYWN0b3J5ID0gXy5pc0Z1bmN0aW9uKG1hcHBlZERpc3BhdGNoKTtcblxuICAgIHRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMgPSBpc0ZhY3RvcnkgPyBtYXBwZWREaXNwYXRjaCA6IHRoaXMubWFwRGlzcGF0Y2g7XG4gICAgdGhpcy5kb0Rpc3BhdGNoUHJvcHNEZXBlbmRPbk93blByb3BzID0gdGhpcy5maW5hbE1hcERpc3BhdGNoVG9Qcm9wcy5sZW5ndGggIT09IDE7XG5cbiAgICBpZiAoaXNGYWN0b3J5KSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21wdXRlRGlzcGF0Y2hQcm9wcyhzdG9yZSwgcHJvcHMpXG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcHBlZERpc3BhdGNoXG4gIH0sXG5cbiAgdXBkYXRlRGlzcGF0Y2hQcm9wc0lmTmVlZGVkKCkge1xuICAgIGNvbnN0IG5leHREaXNwYXRjaFByb3BzID0gdGhpcy5jb21wdXRlRGlzcGF0Y2hQcm9wcyh0aGlzLnN0b3JlLCB0aGlzLnByb3BzKTtcbiAgICBpZiAodGhpcy5kaXNwYXRjaFByb3BzICYmIF8uaXNFcXVhbChuZXh0RGlzcGF0Y2hQcm9wcywgdGhpcy5kaXNwYXRjaFByb3BzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5kaXNwYXRjaFByb3BzID0gbmV4dERpc3BhdGNoUHJvcHM7XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9LFxuXG4gIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHRoaXMudW5zdWJzY3JpYmUpXG4gIH0sXG5cbiAgdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5pc1N1YnNjcmliZWQoKSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5oYW5kbGVEaXNwYXRjaFByb3BzKCk7XG4gICAgICB0aGlzLmhhbmRsZUNoYW5nZSgpXG4gICAgfVxuICB9LFxuXG4gIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbFxuICAgIH1cbiAgfSxcblxuICBvblJlbmRlcigpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpXG4gIH0sXG5cbiAgb25EZXN0cm95KCkge1xuICAgIHRoaXMudHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnVuYmluZFN0YXRlRXZlbnRzKCk7XG4gICAgdGhpcy5jbGVhckNhY2hlKClcbiAgfSxcblxuICBjbGVhckNhY2hlKCkge1xuICAgIHRoaXMuZGlzcGF0Y2hQcm9wcyA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZVByb3BzID0gbnVsbDtcbiAgICB0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzID0gbnVsbDtcbiAgICB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzID0gbnVsbDtcbiAgICB0aGlzLmhhdmVJbml0aWFsU3RhdGVQcm9wc0JlZW5EZXRlcm1pbmVkID0gZmFsc2U7XG4gICAgdGhpcy5oYXZlSW5pdGlhbERpc3BhdGNoUHJvcHNCZWVuRGV0ZXJtaW5lZCA9IGZhbHNlXG4gIH0sXG5cbiAgaGFuZGxlRGlzcGF0Y2hQcm9wcygpIHtcbiAgICBpZiAoIXRoaXMuaGF2ZUluaXRpYWxEaXNwYXRjaFByb3BzQmVlbkRldGVybWluZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlRGlzcGF0Y2hQcm9wc0lmTmVlZGVkKCk7XG4gICAgICB0aGlzLmhhdmVJbml0aWFsRGlzcGF0Y2hQcm9wc0JlZW5EZXRlcm1pbmVkID0gdHJ1ZVxuICAgIH1cbiAgfSxcblxuICBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzdG9yZVN0YXRlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHByZXZTdG9yZVN0YXRlID0gdGhpcy5nZXRTdGF0ZSgnc3RvcmVTdGF0ZScpO1xuICAgIGlmICh0aGlzLmhhdmVJbml0aWFsU3RhdGVQcm9wc0JlZW5EZXRlcm1pbmVkICYmIF8uaXNFcXVhbChwcmV2U3RvcmVTdGF0ZSwgc3RvcmVTdGF0ZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGhhdmVTdGF0ZVByb3BzQ2hhbmdlZCA9IHRoaXMudXBkYXRlU3RhdGVQcm9wc0lmTmVlZGVkKCk7XG4gICAgdGhpcy5oYXZlSW5pdGlhbFN0YXRlUHJvcHNCZWVuRGV0ZXJtaW5lZCA9IHRydWU7XG5cbiAgICBpZiAoaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkKSB7XG5cbiAgICAgIGNvbnN0IG1lcmdlZFByb3BzID0gdGhpcy5tZXJnZVByb3BzKHRoaXMuc3RhdGVQcm9wcywgdGhpcy5kaXNwYXRjaFByb3BzLCB0aGlzLnByb3BzKTtcbiAgICAgIHRoaXMucHJvcHMgPSBtZXJnZWRQcm9wcztcblxuICAgICAgXy5pc0Z1bmN0aW9uKHRoaXMuY29tcG9uZW50RGlkUmVjZWl2ZVByb3BzKSAmJiB0aGlzLmNvbXBvbmVudERpZFJlY2VpdmVQcm9wcyhtZXJnZWRQcm9wcylcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHN0b3JlU3RhdGVcbiAgICB9KVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaXhpbjtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnXG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcydcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wcyBmcm9tICcuL21lcmdlUHJvcHMnXG5pbXBvcnQgbWl4aW4gZnJvbSAnLi9taXhpbidcbmltcG9ydCBpc0Rpc3BsYXlDb21wb25lbnQgZnJvbSAnLi9pc0Rpc3BsYXlDb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0KF9tYXBTdGF0ZVRvUHJvcHMsIF9tYXBEaXNwYXRjaFRvUHJvcHMsIF9tZXJnZVByb3BzLCBfb3B0aW9ucykge1xuXG4gIGNvbnN0IG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fTtcblxuICByZXR1cm4gZnVuY3Rpb24oQ29tcG9uZW50KSB7XG5cbiAgICBjb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBfbWFwU3RhdGVUb1Byb3BzIHx8IENvbXBvbmVudC5wcm90b3R5cGUubWFwU3RhdGVUb1Byb3BzIHx8IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHM7XG4gICAgY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gX21hcERpc3BhdGNoVG9Qcm9wcyB8fCBDb21wb25lbnQucHJvdG90eXBlLm1hcERpc3BhdGNoVG9Qcm9wcyB8fCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzO1xuICAgIGNvbnN0IG1lcmdlUHJvcHMgPSBfbWVyZ2VQcm9wcyB8fCBDb21wb25lbnQucHJvdG90eXBlLm1lcmdlUHJvcHMgfHwgZGVmYXVsdE1lcmdlUHJvcHM7XG4gICAgY29uc3Qgc3RvcmUgPSBvcHRpb25zLnN0b3JlIHx8IENvbXBvbmVudC5wcm90b3R5cGUuc3RvcmU7XG4gICAgY29uc3QgY29tcG9uZW50SW5pdGlhbGl6ZSA9IENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZTtcbiAgICBjb25zdCBjb21wb25lbnRvblJlbmRlciA9IENvbXBvbmVudC5wcm90b3R5cGUub25SZW5kZXI7XG4gICAgY29uc3QgY29tcG9uZW50T25EZXN0cm95ID0gQ29tcG9uZW50LnByb3RvdHlwZS5vbkRlc3Ryb3k7XG5cbiAgICBsZXQgY29ubmVjdE1peGluID0gXy5kZWZhdWx0cyh7fSwge1xuXG4gICAgICBpbml0aWFsaXplKF9pbml0T3B0aW9ucykge1xuXG4gICAgICAgIGNvbnN0IGluaXRPcHRpb25zID0gX2luaXRPcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIG1peGluLmluaXRpYWxpemUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgbWFwU3RhdGVUb1Byb3BzLFxuICAgICAgICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgICAgICBtZXJnZVByb3BzLFxuICAgICAgICAgIHN0b3JlLFxuICAgICAgICAgIHByb3BzOiBpbml0T3B0aW9ucy5wcm9wc1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY29tcG9uZW50SW5pdGlhbGl6ZSkge1xuICAgICAgICAgIGNvbXBvbmVudEluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgb25SZW5kZXIoKSB7XG5cbiAgICAgICAgbWl4aW4ub25SZW5kZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICBpZiAoY29tcG9uZW50b25SZW5kZXIpIHtcbiAgICAgICAgICBjb21wb25lbnRvblJlbmRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIG9uRGVzdHJveSgpIHtcblxuICAgICAgICBtaXhpbi5vbkRlc3Ryb3kuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICBpZiAoY29tcG9uZW50T25EZXN0cm95KSB7XG4gICAgICAgICAgY29tcG9uZW50T25EZXN0cm95LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBtaXhpbik7XG5cbiAgICBpZiAoIWlzRGlzcGxheUNvbXBvbmVudChDb21wb25lbnQpKSB7XG4gICAgICBjb25uZWN0TWl4aW4gPSBfLm9taXQoY29ubmVjdE1peGluLCAnb25SZW5kZXInKVxuICAgIH1cblxuICAgIHJldHVybiBDb21wb25lbnQuZXh0ZW5kKGNvbm5lY3RNaXhpbilcbiAgfVxufVxuIiwiaW1wb3J0IGNvbm5lY3QgZnJvbSAnLi9jb25uZWN0J1xuaW1wb3J0IG1peGluIGZyb20gJy4vbWl4aW4nXG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi4vcGFja2FnZS5qc29uJ1xuXG5jb25zdCBNYXJpb25ldHRlUmVkdXggPSB7fTtcblxuTWFyaW9uZXR0ZVJlZHV4LmNvbm5lY3QgPSBjb25uZWN0O1xuTWFyaW9uZXR0ZVJlZHV4Lm1peGluID0gbWl4aW47XG5NYXJpb25ldHRlUmVkdXguVkVSU0lPTiA9IHZlcnNpb247XG5cbmV4cG9ydCBkZWZhdWx0IE1hcmlvbmV0dGVSZWR1eDtcbiJdLCJuYW1lcyI6WyJtYXBTdGF0ZVRvUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJkaXNwYXRjaCIsIm1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsInBhcmVudFByb3BzIiwiXyIsImV4dGVuZCIsInNldFN0YXRlIiwia2V5IiwidmFsIiwib3B0aW9ucyIsInN0YXRlIiwidW5zZXQiLCJzaWxlbnQiLCJjaGFuZ2VzIiwiY2hhbmdpbmciLCJfY2hhbmdpbmciLCJfcHJldmlvdXNTdGF0ZSIsImNsb25lIiwiY2hhbmdlZCIsImN1cnJlbnQiLCJwcmV2IiwiZWFjaCIsIl92YWwiLCJfa2V5IiwiaXNFcXVhbCIsInB1c2giLCJsZW5ndGgiLCJfcGVuZGluZyIsImkiLCJ0cmlnZ2VyIiwiZ2V0U3RhdGUiLCJhdHRyIiwiaXNEaXNwbGF5Q29tcG9uZW50IiwiQ29tcG9uZW50IiwiTWFyaW9uZXR0ZSIsIlZpZXciLCJCZWhhdmlvciIsInByb3RvdHlwZSIsIm1peGluIiwiX29wdGlvbnMiLCJtYXBTdGF0ZSIsImRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMiLCJtYXBEaXNwYXRjaCIsImRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInByb3BzIiwic3RvcmUiLCJ3aW5kb3ciLCJzdG9yZVN0YXRlIiwiZGVmYXVsdHMiLCJnZXRJbml0aWFsU3RhdGUiLCJiaW5kU3RhdGVFdmVudHMiLCJjbGVhckNhY2hlIiwidHJ5U3Vic2NyaWJlIiwiYmluZCIsInN0YXRlRXZlbnRzIiwiYmluZEV2ZW50cyIsImJpbmRFbnRpdHlFdmVudHMiLCJ1bmJpbmQiLCJ1bmJpbmRFdmVudHMiLCJ1bmJpbmRFbnRpdHlFdmVudHMiLCJmaW5hbE1hcFN0YXRlVG9Qcm9wcyIsImNvbmZpZ3VyZUZpbmFsTWFwU3RhdGUiLCJkb1N0YXRlUHJvcHNEZXBlbmRPbk93blByb3BzIiwibWFwcGVkU3RhdGUiLCJpc0ZhY3RvcnkiLCJpc0Z1bmN0aW9uIiwiY29tcHV0ZVN0YXRlUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsImZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzIiwiY29uZmlndXJlRmluYWxNYXBEaXNwYXRjaCIsImRvRGlzcGF0Y2hQcm9wc0RlcGVuZE9uT3duUHJvcHMiLCJtYXBwZWREaXNwYXRjaCIsImNvbXB1dGVEaXNwYXRjaFByb3BzIiwibmV4dERpc3BhdGNoUHJvcHMiLCJ1bnN1YnNjcmliZSIsImlzU3Vic2NyaWJlZCIsInN1YnNjcmliZSIsImhhbmRsZUNoYW5nZSIsImhhbmRsZURpc3BhdGNoUHJvcHMiLCJ0cnlVbnN1YnNjcmliZSIsInVuYmluZFN0YXRlRXZlbnRzIiwiaGF2ZUluaXRpYWxTdGF0ZVByb3BzQmVlbkRldGVybWluZWQiLCJoYXZlSW5pdGlhbERpc3BhdGNoUHJvcHNCZWVuRGV0ZXJtaW5lZCIsInVwZGF0ZURpc3BhdGNoUHJvcHNJZk5lZWRlZCIsInByZXZTdG9yZVN0YXRlIiwiaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkIiwidXBkYXRlU3RhdGVQcm9wc0lmTmVlZGVkIiwibWVyZ2VkUHJvcHMiLCJjb21wb25lbnREaWRSZWNlaXZlUHJvcHMiLCJjb25uZWN0IiwiX21hcFN0YXRlVG9Qcm9wcyIsIl9tYXBEaXNwYXRjaFRvUHJvcHMiLCJfbWVyZ2VQcm9wcyIsImNvbXBvbmVudEluaXRpYWxpemUiLCJpbml0aWFsaXplIiwiY29tcG9uZW50b25SZW5kZXIiLCJvblJlbmRlciIsImNvbXBvbmVudE9uRGVzdHJveSIsIm9uRGVzdHJveSIsImNvbm5lY3RNaXhpbiIsIl9pbml0T3B0aW9ucyIsImluaXRPcHRpb25zIiwiY2FsbCIsImFwcGx5IiwiYXJndW1lbnRzIiwib21pdCIsIk1hcmlvbmV0dGVSZWR1eCIsIlZFUlNJT04iLCJ2ZXJzaW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFlLFNBQVNBLGVBQVQsR0FBMkI7U0FDakMsRUFBUDs7O0FDRGEsU0FBU0Msa0JBQVQsQ0FBNEJDLFFBQTVCLEVBQXNDO1NBQzVDO2NBQ0tBO0dBRFo7OztBQ0FhLFNBQVNDLFVBQVQsQ0FBb0JDLFVBQXBCLEVBQWdDQyxhQUFoQyxFQUErQ0MsV0FBL0MsRUFBNEQ7U0FDbEVDLEVBQUVDLE1BQUYsQ0FBUyxFQUFULEVBQWFGLFdBQWIsRUFBMEJGLFVBQTFCLEVBQXNDQyxhQUF0QyxDQUFQOzs7OztBQ0ZGLEFBRUEsQUFBZSxTQUFTSSxRQUFULENBQWtCQyxHQUFsQixFQUF1QkMsR0FBdkIsRUFBNEJDLE9BQTVCLEVBQXFDOztNQUU5Q0YsT0FBTyxJQUFYLEVBQWlCO1dBQ1IsSUFBUDs7OztNQUlFRyxjQUFKO01BQ0ksUUFBT0gsR0FBUCx5Q0FBT0EsR0FBUCxPQUFlLFFBQW5CLEVBQTZCO1lBQ25CQSxHQUFSO2NBQ1VDLEdBQVY7R0FGRixNQUdPO0tBQ0pFLFFBQVEsRUFBVCxFQUFhSCxHQUFiLElBQW9C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"}