{"version":3,"file":"marionette-redux.js","sources":["src/mapStateToProps.js","src/mapDispatchToProps.js","src/mergeProps.js","src/isDisplayComponent.js","src/mixin.js","src/connect.js","src/marionette-redux.js"],"sourcesContent":["export default function mapStateToProps() {\n  return {}\n}\n","export default function mapDispatchToProps(dispatch) {\n  return {\n    dispatch: dispatch\n  }\n}\n","import { extend } from 'underscore';\nexport default function mergeProps(stateProps, dispatchProps, parentProps) {\n  return extend({}, parentProps, stateProps, dispatchProps)\n}\n","import { isObject, isFunction } from 'underscore'\nimport { View, Behavior } from 'marionette'\n\nexport default function isDisplayComponent(Component) {\n  if (isFunction(Component)) {\n    return Component.prototype instanceof View || Component.prototype instanceof Behavior\n  }\n  if (isObject(Component)) {\n    return Component instanceof View || Component instanceof Behavior\n  }\n  return false\n}\n","import {\n  extend,\n  defaults,\n  clone,\n  each,\n  isEqual,\n  isFunction,\n  isObject\n} from 'underscore';\nimport {\n  bindEvents,\n  bindEntityEvents,\n  unbindEvents,\n  unbindEntityEvents\n} from 'marionette';\nimport defaultMapStateToProps from './mapStateToProps';\nimport defaultMapDispatchToProps from './mapDispatchToProps';\nimport defaultMergeProps from './mergeProps';\nimport isDisplayComponent from './isDisplayComponent';\n\nconst mixin = {\n\n  initialize(_options) {\n\n    const options = _options || {};\n\n    this.mapState = options.mapStateToProps || this.mapStateToProps || defaultMapStateToProps;\n    this.mapDispatch = options.mapDispatchToProps || this.mapDispatchToProps || defaultMapDispatchToProps;\n    this.mergeProps = options.mergeProps || this.mergeProps || defaultMergeProps;\n    this.props = this.props || {};\n\n    if (options.props) {\n      extend(this.props, options.props)\n    }\n\n    this.store = options.store || this.store;\n\n    if (!this.store && window && window.store) {\n      this.store = window.store\n    }\n\n    const storeState = this.store.getState();\n    this.state = defaults({\n      storeState: storeState\n    }, this.getInitialState());\n\n    this.bindStateEvents();\n    this.clearCache();\n\n    if (!isDisplayComponent(this)) {\n      this.trySubscribe()\n    }\n  },\n\n  getInitialState() {\n    return {}\n  },\n\n  setState(key, val, options) {\n\n    if (key == null) {\n      return this;\n    }\n\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    let state;\n    if (isObject(key)) {\n      state = key;\n      options = val;\n    } else {\n      (state = {})[key] = val;\n    }\n\n    options || (options = {});\n\n    // Extract state and options.\n    const unset      = options.unset;\n    const silent     = options.silent;\n    const changes    = [];\n    const changing   = this._changing;\n    this._changing = true;\n\n    if (!changing) {\n      this._previousState = clone(this.state);\n      this.changed = {};\n    }\n\n    const current = this.state;\n    const changed = this.changed;\n    const prev    = this._previousState;\n\n    // For each `set` state, update or delete the current value.\n    each(state, function(_val, _key) {\n      if (!isEqual(current[_key], _val)) {\n        changes.push(_key);\n      }\n      if (!isEqual(prev[_key], _val)) {\n        changed[_key] = _val;\n      } else {\n        delete changed[_key];\n      }\n      unset ? delete current[_key] : current[_key] = _val;\n    });\n\n    // Trigger all relevant state changes.\n    if (!silent) {\n      if (changes.length) {\n        this._pending = options;\n      }\n      for (let i = 0; i < changes.length; i++) {\n        this.trigger('change:' + changes[i], this, current[changes[i]], options);\n      }\n    }\n\n    // You might be wondering why there's a `while` loop here. Changes can\n    // be recursively nested within `\"change\"` events.\n    if (changing) {\n      return this;\n    }\n    if (!silent) {\n      while (this._pending) {\n        options = this._pending;\n        this._pending = false;\n        this.trigger('change', this, options);\n        if (isDisplayComponent(this) && this.triggerDomRefresh !== false) {\n          this.triggerMethod('dom:refresh');\n        }\n      }\n    }\n    this._pending = false;\n    this._changing = false;\n    return this\n  },\n\n  getState(attr) {\n    return this.state[attr]\n  },\n\n  bindStateEvents() {\n    const bind = bindEvents || bindEntityEvents;\n    if (this.stateEvents) {\n      bind(this, this, this.stateEvents)\n    }\n  },\n\n  unbindStateEvents() {\n    const unbind = unbindEvents || unbindEntityEvents;\n    if (this.stateEvents) {\n      unbind(this, this, this.stateEvents)\n    }\n  },\n\n  computeStateProps(store, props) {\n    if (!this.finalMapStateToProps) {\n      return this.configureFinalMapState(store, props)\n    }\n\n    const state = store.getState();\n    const stateProps = this.doStatePropsDependOnOwnProps ?\n      this.finalMapStateToProps(state, props) :\n      this.finalMapStateToProps(state);\n\n    return stateProps\n  },\n\n  configureFinalMapState(store, props) {\n    const mappedState = this.mapState(store.getState(), props);\n    const isFactory = isFunction(mappedState);\n\n    this.finalMapStateToProps = isFactory ? mappedState : this.mapState;\n    this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeStateProps(store, props)\n    }\n\n    return mappedState\n  },\n\n  updateStatePropsIfNeeded() {\n    const nextStateProps = this.computeStateProps(this.store, this.props);\n    if (this.stateProps && isEqual(nextStateProps, this.stateProps)) {\n      return false\n    }\n\n    this.stateProps = nextStateProps;\n\n    return true\n  },\n\n  computeDispatchProps(store, props) {\n    if (!this.finalMapDispatchToProps) {\n      return this.configureFinalMapDispatch(store, props)\n    }\n\n    const dispatch = store.dispatch;\n    const dispatchProps = this.doDispatchPropsDependOnOwnProps ?\n      this.finalMapDispatchToProps(dispatch, props) :\n      this.finalMapDispatchToProps(dispatch);\n\n    return dispatchProps\n  },\n\n  configureFinalMapDispatch(store, props) {\n    const mappedDispatch = this.mapDispatch(store.dispatch, props);\n    const isFactory = isFunction(mappedDispatch);\n\n    this.finalMapDispatchToProps = isFactory ? mappedDispatch : this.mapDispatch;\n    this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeDispatchProps(store, props)\n    }\n\n    return mappedDispatch\n  },\n\n  updateDispatchPropsIfNeeded() {\n    const nextDispatchProps = this.computeDispatchProps(this.store, this.props);\n    if (this.dispatchProps && isEqual(nextDispatchProps, this.dispatchProps)) {\n      return false\n    }\n\n    this.dispatchProps = nextDispatchProps;\n\n    return true\n  },\n\n  isSubscribed() {\n    return isFunction(this.unsubscribe)\n  },\n\n  trySubscribe() {\n    if (!this.isSubscribed()) {\n      this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));\n      this.handleDispatchProps();\n      this.handleChange()\n    }\n  },\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null\n    }\n  },\n\n  onRender() {\n    this.trySubscribe()\n  },\n\n  onDestroy() {\n    this.tryUnsubscribe();\n    this.unbindStateEvents();\n    this.clearCache()\n  },\n\n  clearCache() {\n    this.dispatchProps = null;\n    this.stateProps = null;\n    this.finalMapDispatchToProps = null;\n    this.finalMapStateToProps = null;\n    this.haveInitialStatePropsBeenDetermined = false;\n    this.haveInitialDispatchPropsBeenDetermined = false\n  },\n\n  handleDispatchProps() {\n    if (!this.haveInitialDispatchPropsBeenDetermined) {\n      this.updateDispatchPropsIfNeeded();\n      this.haveInitialDispatchPropsBeenDetermined = true\n    }\n  },\n\n  handleChange() {\n    if (!this.unsubscribe) {\n      return\n    }\n\n    const storeState = this.store.getState();\n    const prevStoreState = this.getState('storeState');\n    if (this.haveInitialStatePropsBeenDetermined && isEqual(prevStoreState, storeState)) {\n      return\n    }\n\n    const haveStatePropsChanged = this.updateStatePropsIfNeeded();\n    this.haveInitialStatePropsBeenDetermined = true;\n\n    if (haveStatePropsChanged) {\n\n      const mergedProps = this.mergeProps(this.stateProps, this.dispatchProps, this.props);\n      this.props = mergedProps;\n\n      isFunction(this.componentWillReceiveProps) && this.componentWillReceiveProps(mergedProps);\n\n      if (isDisplayComponent(this) && this._isRendered && this.triggerDomRefresh !== false) {\n        this.triggerMethod('dom:refresh');\n      }\n    }\n\n    this.setState({\n      storeState\n    }, { silent: true })\n  }\n};\n\nexport default mixin;\n","import { defaults, omit } from 'underscore';\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport mixin from './mixin'\nimport isDisplayComponent from './isDisplayComponent';\n\nexport default function connect(_mapStateToProps, _mapDispatchToProps, _mergeProps, _options) {\n\n  const options = _options || {};\n\n  return function(Component) {\n\n    const mapStateToProps = _mapStateToProps || Component.prototype.mapStateToProps || defaultMapStateToProps;\n    const mapDispatchToProps = _mapDispatchToProps || Component.prototype.mapDispatchToProps || defaultMapDispatchToProps;\n    const mergeProps = _mergeProps || Component.prototype.mergeProps || defaultMergeProps;\n    const store = options.store || Component.prototype.store;\n    const componentInitialize = Component.prototype.initialize;\n    const componentOnRender = Component.prototype.onRender;\n    const componentOnDestroy = Component.prototype.onDestroy;\n\n    let connectMixin = defaults({}, {\n\n      initialize(_initOptions) {\n\n        const initOptions = _initOptions || {};\n\n        mixin.initialize.call(this, {\n          mapStateToProps,\n          mapDispatchToProps,\n          mergeProps,\n          store,\n          props: initOptions.props\n        });\n\n        if (componentInitialize) {\n          componentInitialize.apply(this, arguments);\n        }\n      },\n\n      onRender() {\n\n        mixin.onRender.apply(this, arguments);\n\n        if (componentOnRender) {\n          componentOnRender.apply(this, arguments)\n        }\n      },\n\n      onDestroy() {\n\n        mixin.onDestroy.apply(this, arguments);\n\n        if (componentOnDestroy) {\n          componentOnDestroy.apply(this, arguments);\n        }\n      }\n    }, mixin);\n\n    if (!isDisplayComponent(Component)) {\n      connectMixin = omit(connectMixin, 'onRender')\n    }\n\n    return Component.extend(connectMixin)\n  }\n}\n","import connect from './connect'\nimport mixin from './mixin'\nimport { version as VERSION } from '../package.json'\n\nconst MarionetteRedux = {\n  connect,\n  mixin,\n  VERSION\n}\n\nexport default MarionetteRedux\n"],"names":["mapStateToProps","mapDispatchToProps","dispatch","mergeProps","stateProps","dispatchProps","parentProps","extend","isDisplayComponent","Component","isFunction","prototype","View","Behavior","isObject","mixin","_options","options","mapState","defaultMapStateToProps","mapDispatch","defaultMapDispatchToProps","defaultMergeProps","props","store","window","storeState","getState","state","defaults","getInitialState","bindStateEvents","clearCache","trySubscribe","key","val","unset","silent","changes","changing","_changing","_previousState","clone","changed","current","prev","_val","_key","isEqual","push","length","_pending","i","trigger","triggerDomRefresh","triggerMethod","attr","bind","bindEvents","bindEntityEvents","stateEvents","unbind","unbindEvents","unbindEntityEvents","finalMapStateToProps","configureFinalMapState","doStatePropsDependOnOwnProps","mappedState","isFactory","computeStateProps","nextStateProps","finalMapDispatchToProps","configureFinalMapDispatch","doDispatchPropsDependOnOwnProps","mappedDispatch","computeDispatchProps","nextDispatchProps","unsubscribe","isSubscribed","subscribe","handleChange","handleDispatchProps","tryUnsubscribe","unbindStateEvents","haveInitialStatePropsBeenDetermined","haveInitialDispatchPropsBeenDetermined","updateDispatchPropsIfNeeded","prevStoreState","haveStatePropsChanged","updateStatePropsIfNeeded","mergedProps","componentWillReceiveProps","_isRendered","setState","connect","_mapStateToProps","_mapDispatchToProps","_mergeProps","componentInitialize","initialize","componentOnRender","onRender","componentOnDestroy","onDestroy","connectMixin","_initOptions","initOptions","call","apply","arguments","omit","MarionetteRedux"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}