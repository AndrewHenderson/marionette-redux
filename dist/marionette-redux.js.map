{"version":3,"file":"marionette-redux.js","sources":["src/mapStateToProps.js","src/mapDispatchToProps.js","src/mergeProps.js","src/isDisplayComponent.js","src/mixin.js","src/connect.js","src/marionette-redux.js"],"sourcesContent":["export default function mapStateToProps() {\n  return {}\n}\n","export default function mapDispatchToProps(dispatch) {\n  return {\n    dispatch: dispatch\n  }\n}\n","import { extend } from 'underscore';\nexport default function mergeProps(stateProps, dispatchProps, parentProps) {\n  return extend({}, parentProps, stateProps, dispatchProps)\n}\n","import { isObject, isFunction } from 'underscore'\nimport { View, Behavior } from 'marionette'\n\nexport default function isDisplayComponent(Component) {\n  if (isFunction(Component)) {\n    return Component.prototype instanceof View || Component.prototype instanceof Behavior\n  }\n  if (isObject(Component)) {\n    return Component instanceof View || Component instanceof Behavior\n  }\n  return false\n}\n","import {\n  extend,\n  defaults,\n  clone,\n  each,\n  isEqual,\n  isFunction,\n  isObject\n} from 'underscore';\nimport {\n  bindEvents,\n  bindEntityEvents,\n  unbindEvents,\n  unbindEntityEvents\n} from 'marionette';\nimport defaultMapStateToProps from './mapStateToProps';\nimport defaultMapDispatchToProps from './mapDispatchToProps';\nimport defaultMergeProps from './mergeProps';\nimport isDisplayComponent from './isDisplayComponent';\n\nconst mixin = {\n\n  initialize(_options) {\n\n    const options = _options || {};\n\n    this.mapState = options.mapStateToProps || this.mapStateToProps || defaultMapStateToProps;\n    this.mapDispatch = options.mapDispatchToProps || this.mapDispatchToProps || defaultMapDispatchToProps;\n    this.mergeProps = options.mergeProps || this.mergeProps || defaultMergeProps;\n    this.props = this.props || {};\n\n    if (options.props) {\n      extend(this.props, options.props)\n    }\n\n    this.store = options.store || this.store;\n\n    if (!this.store && window && window.store) {\n      this.store = window.store\n    }\n\n    const storeState = this.store.getState();\n    this.state = defaults({\n      storeState: storeState\n    }, this.getInitialState());\n\n    this.bindStateEvents();\n    this.clearCache();\n\n    if (!isDisplayComponent(this)) {\n      this.trySubscribe()\n    } else {\n      if (this.componentWillUpdate) {\n        this.on('render', this.componentWillUpdate)\n      }\n    }\n  },\n\n  getInitialState() {\n    return {}\n  },\n\n  setState(key, val, options) {\n\n    if (key == null) {\n      return this;\n    }\n\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    let state;\n    if (isObject(key)) {\n      state = key;\n      options = val;\n    } else {\n      (state = {})[key] = val;\n    }\n\n    options || (options = {});\n\n    // Extract state and options.\n    const unset      = options.unset;\n    const silent     = options.silent;\n    const changes    = [];\n    const changing   = this._changing;\n    this._changing = true;\n\n    if (!changing) {\n      this._previousState = clone(this.state);\n      this.changed = {};\n    }\n\n    const current = this.state;\n    const changed = this.changed;\n    const prev    = this._previousState;\n\n    // For each `set` state, update or delete the current value.\n    each(state, function(_val, _key) {\n      if (!isEqual(current[_key], _val)) {\n        changes.push(_key);\n      }\n      if (!isEqual(prev[_key], _val)) {\n        changed[_key] = _val;\n      } else {\n        delete changed[_key];\n      }\n      unset ? delete current[_key] : current[_key] = _val;\n    });\n\n    // Trigger all relevant state changes.\n    if (!silent) {\n      if (changes.length) {\n        this._pending = options;\n      }\n      for (let i = 0; i < changes.length; i++) {\n        this.trigger('change:' + changes[i], this, current[changes[i]], options);\n      }\n    }\n\n    // You might be wondering why there's a `while` loop here. Changes can\n    // be recursively nested within `\"change\"` events.\n    if (changing) {\n      return this;\n    }\n    if (!silent) {\n      while (this._pending) {\n        options = this._pending;\n        this._pending = false;\n        this.trigger('change', this, options);\n        if (isDisplayComponent(this) &&\n          (this._isRendered || (this.view && this.view._isRendered)) &&\n          this.componentWillUpdate\n        ) {\n          this.componentWillUpdate()\n        }\n      }\n    }\n    this._pending = false;\n    this._changing = false;\n    return this\n  },\n\n  getState(attr) {\n    return this.state[attr]\n  },\n\n  bindStateEvents() {\n    const bind = bindEvents || bindEntityEvents;\n    if (this.stateEvents) {\n      bind(this, this, this.stateEvents)\n    }\n  },\n\n  unbindStateEvents() {\n    const unbind = unbindEvents || unbindEntityEvents;\n    if (this.stateEvents) {\n      unbind(this, this, this.stateEvents)\n    }\n  },\n\n  computeStateProps(store, props) {\n    if (!this.finalMapStateToProps) {\n      return this.configureFinalMapState(store, props)\n    }\n\n    const state = store.getState();\n    const stateProps = this.doStatePropsDependOnOwnProps ?\n      this.finalMapStateToProps(state, props) :\n      this.finalMapStateToProps(state);\n\n    return stateProps\n  },\n\n  configureFinalMapState(store, props) {\n    const mappedState = this.mapState(store.getState(), props);\n    const isFactory = isFunction(mappedState);\n\n    this.finalMapStateToProps = isFactory ? mappedState : this.mapState;\n    this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeStateProps(store, props)\n    }\n\n    return mappedState\n  },\n\n  updateStatePropsIfNeeded() {\n    const nextStateProps = this.computeStateProps(this.store, this.props);\n    if (this.stateProps && isEqual(nextStateProps, this.stateProps)) {\n      return false\n    }\n\n    this.stateProps = nextStateProps;\n\n    return true\n  },\n\n  computeDispatchProps(store, props) {\n    if (!this.finalMapDispatchToProps) {\n      return this.configureFinalMapDispatch(store, props)\n    }\n\n    const dispatch = store.dispatch;\n    const dispatchProps = this.doDispatchPropsDependOnOwnProps ?\n      this.finalMapDispatchToProps(dispatch, props) :\n      this.finalMapDispatchToProps(dispatch);\n\n    return dispatchProps\n  },\n\n  configureFinalMapDispatch(store, props) {\n    const mappedDispatch = this.mapDispatch(store.dispatch, props);\n    const isFactory = isFunction(mappedDispatch);\n\n    this.finalMapDispatchToProps = isFactory ? mappedDispatch : this.mapDispatch;\n    this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeDispatchProps(store, props)\n    }\n\n    return mappedDispatch\n  },\n\n  updateDispatchPropsIfNeeded() {\n    const nextDispatchProps = this.computeDispatchProps(this.store, this.props);\n    if (this.dispatchProps && isEqual(nextDispatchProps, this.dispatchProps)) {\n      return false\n    }\n\n    this.dispatchProps = nextDispatchProps;\n\n    return true\n  },\n\n  isSubscribed() {\n    return isFunction(this.unsubscribe)\n  },\n\n  trySubscribe() {\n    if (!this.isSubscribed()) {\n      this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));\n      this.handleDispatchProps();\n      this.handleChange()\n    }\n  },\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null\n    }\n  },\n\n  onRender() {\n    this.trySubscribe()\n  },\n\n  onDestroy() {\n    this.tryUnsubscribe();\n    this.unbindStateEvents();\n    this.clearCache()\n  },\n\n  clearCache() {\n    this.dispatchProps = null;\n    this.stateProps = null;\n    this.finalMapDispatchToProps = null;\n    this.finalMapStateToProps = null;\n    this.haveInitialStatePropsBeenDetermined = false;\n    this.haveInitialDispatchPropsBeenDetermined = false\n  },\n\n  handleDispatchProps() {\n    if (!this.haveInitialDispatchPropsBeenDetermined) {\n      this.updateDispatchPropsIfNeeded();\n      this.haveInitialDispatchPropsBeenDetermined = true\n    }\n  },\n\n  handleChange() {\n    if (!this.unsubscribe) {\n      return\n    }\n\n    const storeState = this.store.getState();\n    const prevStoreState = this.getState('storeState');\n    if (this.haveInitialStatePropsBeenDetermined && isEqual(prevStoreState, storeState)) {\n      return\n    }\n\n    const haveStatePropsChanged = this.updateStatePropsIfNeeded();\n    this.haveInitialStatePropsBeenDetermined = true;\n\n    if (haveStatePropsChanged) {\n\n      const mergedProps = this.mergeProps(this.stateProps, this.dispatchProps, this.props);\n      this.props = mergedProps;\n\n      isFunction(this.componentWillReceiveProps) && this.componentWillReceiveProps(mergedProps);\n\n      if (isDisplayComponent(this) &&\n        (this._isRendered || (this.view && this.view._isRendered)) &&\n        this.componentWillUpdate\n      ) {\n        this.componentWillUpdate();\n      }\n    }\n\n    this.setState({\n      storeState\n    }, { silent: true })\n  }\n};\n\nexport default mixin;\n","import { defaults, omit } from 'underscore';\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport mixin from './mixin'\nimport isDisplayComponent from './isDisplayComponent';\n\nexport default function connect(_mapStateToProps, _mapDispatchToProps, _mergeProps, _options) {\n\n  const options = _options || {};\n\n  return function(Component) {\n\n    const mapStateToProps = _mapStateToProps || Component.prototype.mapStateToProps || defaultMapStateToProps;\n    const mapDispatchToProps = _mapDispatchToProps || Component.prototype.mapDispatchToProps || defaultMapDispatchToProps;\n    const mergeProps = _mergeProps || Component.prototype.mergeProps || defaultMergeProps;\n    const store = options.store || Component.prototype.store;\n    const componentInitialize = Component.prototype.initialize;\n    const componentOnRender = Component.prototype.onRender;\n    const componentOnDestroy = Component.prototype.onDestroy;\n\n    let connectMixin = defaults({}, {\n\n      initialize(_initOptions) {\n\n        const initOptions = _initOptions || {};\n\n        mixin.initialize.call(this, {\n          mapStateToProps,\n          mapDispatchToProps,\n          mergeProps,\n          store,\n          props: initOptions.props\n        });\n\n        if (componentInitialize) {\n          componentInitialize.apply(this, arguments);\n        }\n      },\n\n      onRender() {\n\n        mixin.onRender.apply(this, arguments);\n\n        if (componentOnRender) {\n          componentOnRender.apply(this, arguments)\n        }\n      },\n\n      onDestroy() {\n\n        mixin.onDestroy.apply(this, arguments);\n\n        if (componentOnDestroy) {\n          componentOnDestroy.apply(this, arguments);\n        }\n      }\n    }, mixin);\n\n    if (!isDisplayComponent(Component)) {\n      connectMixin = omit(connectMixin, 'onRender')\n    }\n\n    return Component.extend(connectMixin)\n  }\n}\n","import connect from './connect'\nimport mixin from './mixin'\nimport { version as VERSION } from '../package.json'\n\nconst MarionetteRedux = {\n  connect,\n  mixin,\n  VERSION\n}\n\nexport default MarionetteRedux\n"],"names":["mapStateToProps","mapDispatchToProps","dispatch","mergeProps","stateProps","dispatchProps","parentProps","extend","isDisplayComponent","Component","isFunction","prototype","View","Behavior","isObject","mixin","_options","options","mapState","defaultMapStateToProps","mapDispatch","defaultMapDispatchToProps","defaultMergeProps","props","store","window","storeState","getState","state","defaults","getInitialState","bindStateEvents","clearCache","trySubscribe","componentWillUpdate","on","key","val","unset","silent","changes","changing","_changing","_previousState","clone","changed","current","prev","_val","_key","isEqual","push","length","_pending","i","trigger","_isRendered","view","attr","bind","bindEvents","bindEntityEvents","stateEvents","unbind","unbindEvents","unbindEntityEvents","finalMapStateToProps","configureFinalMapState","doStatePropsDependOnOwnProps","mappedState","isFactory","computeStateProps","nextStateProps","finalMapDispatchToProps","configureFinalMapDispatch","doDispatchPropsDependOnOwnProps","mappedDispatch","computeDispatchProps","nextDispatchProps","unsubscribe","isSubscribed","subscribe","handleChange","handleDispatchProps","tryUnsubscribe","unbindStateEvents","haveInitialStatePropsBeenDetermined","haveInitialDispatchPropsBeenDetermined","updateDispatchPropsIfNeeded","prevStoreState","haveStatePropsChanged","updateStatePropsIfNeeded","mergedProps","componentWillReceiveProps","setState","connect","_mapStateToProps","_mapDispatchToProps","_mergeProps","componentInitialize","initialize","componentOnRender","onRender","componentOnDestroy","onDestroy","connectMixin","_initOptions","initOptions","call","apply","arguments","omit","MarionetteRedux"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdoZW5kZXJzb24vbWFyaW9uZXR0ZS1yZWR1eC9zcmMvbWFwU3RhdGVUb1Byb3BzLmpzIiwiL1VzZXJzL2FuZHJld2hlbmRlcnNvbi9tYXJpb25ldHRlLXJlZHV4L3NyYy9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL21lcmdlUHJvcHMuanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL2lzRGlzcGxheUNvbXBvbmVudC5qcyIsIi9Vc2Vycy9hbmRyZXdoZW5kZXJzb24vbWFyaW9uZXR0ZS1yZWR1eC9zcmMvbWl4aW4uanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL2Nvbm5lY3QuanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL21hcmlvbmV0dGUtcmVkdXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKCkge1xuICByZXR1cm4ge31cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICB9XG59XG4iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICd1bmRlcnNjb3JlJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgcGFyZW50UHJvcHMpIHtcbiAgcmV0dXJuIGV4dGVuZCh7fSwgcGFyZW50UHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpXG59XG4iLCJpbXBvcnQgeyBpc09iamVjdCwgaXNGdW5jdGlvbiB9IGZyb20gJ3VuZGVyc2NvcmUnXG5pbXBvcnQgeyBWaWV3LCBCZWhhdmlvciB9IGZyb20gJ21hcmlvbmV0dGUnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGlzcGxheUNvbXBvbmVudChDb21wb25lbnQpIHtcbiAgaWYgKGlzRnVuY3Rpb24oQ29tcG9uZW50KSkge1xuICAgIHJldHVybiBDb21wb25lbnQucHJvdG90eXBlIGluc3RhbmNlb2YgVmlldyB8fCBDb21wb25lbnQucHJvdG90eXBlIGluc3RhbmNlb2YgQmVoYXZpb3JcbiAgfVxuICBpZiAoaXNPYmplY3QoQ29tcG9uZW50KSkge1xuICAgIHJldHVybiBDb21wb25lbnQgaW5zdGFuY2VvZiBWaWV3IHx8IENvbXBvbmVudCBpbnN0YW5jZW9mIEJlaGF2aW9yXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG4iLCJpbXBvcnQge1xuICBleHRlbmQsXG4gIGRlZmF1bHRzLFxuICBjbG9uZSxcbiAgZWFjaCxcbiAgaXNFcXVhbCxcbiAgaXNGdW5jdGlvbixcbiAgaXNPYmplY3Rcbn0gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQge1xuICBiaW5kRXZlbnRzLFxuICBiaW5kRW50aXR5RXZlbnRzLFxuICB1bmJpbmRFdmVudHMsXG4gIHVuYmluZEVudGl0eUV2ZW50c1xufSBmcm9tICdtYXJpb25ldHRlJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGlzRGlzcGxheUNvbXBvbmVudCBmcm9tICcuL2lzRGlzcGxheUNvbXBvbmVudCc7XG5cbmNvbnN0IG1peGluID0ge1xuXG4gIGluaXRpYWxpemUoX29wdGlvbnMpIHtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fTtcblxuICAgIHRoaXMubWFwU3RhdGUgPSBvcHRpb25zLm1hcFN0YXRlVG9Qcm9wcyB8fCB0aGlzLm1hcFN0YXRlVG9Qcm9wcyB8fCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzO1xuICAgIHRoaXMubWFwRGlzcGF0Y2ggPSBvcHRpb25zLm1hcERpc3BhdGNoVG9Qcm9wcyB8fCB0aGlzLm1hcERpc3BhdGNoVG9Qcm9wcyB8fCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzO1xuICAgIHRoaXMubWVyZ2VQcm9wcyA9IG9wdGlvbnMubWVyZ2VQcm9wcyB8fCB0aGlzLm1lcmdlUHJvcHMgfHwgZGVmYXVsdE1lcmdlUHJvcHM7XG4gICAgdGhpcy5wcm9wcyA9IHRoaXMucHJvcHMgfHwge307XG5cbiAgICBpZiAob3B0aW9ucy5wcm9wcykge1xuICAgICAgZXh0ZW5kKHRoaXMucHJvcHMsIG9wdGlvbnMucHJvcHMpXG4gICAgfVxuXG4gICAgdGhpcy5zdG9yZSA9IG9wdGlvbnMuc3RvcmUgfHwgdGhpcy5zdG9yZTtcblxuICAgIGlmICghdGhpcy5zdG9yZSAmJiB3aW5kb3cgJiYgd2luZG93LnN0b3JlKSB7XG4gICAgICB0aGlzLnN0b3JlID0gd2luZG93LnN0b3JlXG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnN0YXRlID0gZGVmYXVsdHMoe1xuICAgICAgc3RvcmVTdGF0ZTogc3RvcmVTdGF0ZVxuICAgIH0sIHRoaXMuZ2V0SW5pdGlhbFN0YXRlKCkpO1xuXG4gICAgdGhpcy5iaW5kU3RhdGVFdmVudHMoKTtcbiAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcblxuICAgIGlmICghaXNEaXNwbGF5Q29tcG9uZW50KHRoaXMpKSB7XG4gICAgICB0aGlzLnRyeVN1YnNjcmliZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmNvbXBvbmVudFdpbGxVcGRhdGUpIHtcbiAgICAgICAgdGhpcy5vbigncmVuZGVyJywgdGhpcy5jb21wb25lbnRXaWxsVXBkYXRlKVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH0sXG5cbiAgc2V0U3RhdGUoa2V5LCB2YWwsIG9wdGlvbnMpIHtcblxuICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJvdGggYFwia2V5XCIsIHZhbHVlYCBhbmQgYHtrZXk6IHZhbHVlfWAgLXN0eWxlIGFyZ3VtZW50cy5cbiAgICBsZXQgc3RhdGU7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHN0YXRlID0ga2V5O1xuICAgICAgb3B0aW9ucyA9IHZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgKHN0YXRlID0ge30pW2tleV0gPSB2YWw7XG4gICAgfVxuXG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcblxuICAgIC8vIEV4dHJhY3Qgc3RhdGUgYW5kIG9wdGlvbnMuXG4gICAgY29uc3QgdW5zZXQgICAgICA9IG9wdGlvbnMudW5zZXQ7XG4gICAgY29uc3Qgc2lsZW50ICAgICA9IG9wdGlvbnMuc2lsZW50O1xuICAgIGNvbnN0IGNoYW5nZXMgICAgPSBbXTtcbiAgICBjb25zdCBjaGFuZ2luZyAgID0gdGhpcy5fY2hhbmdpbmc7XG4gICAgdGhpcy5fY2hhbmdpbmcgPSB0cnVlO1xuXG4gICAgaWYgKCFjaGFuZ2luZykge1xuICAgICAgdGhpcy5fcHJldmlvdXNTdGF0ZSA9IGNsb25lKHRoaXMuc3RhdGUpO1xuICAgICAgdGhpcy5jaGFuZ2VkID0ge307XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudCA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgY2hhbmdlZCA9IHRoaXMuY2hhbmdlZDtcbiAgICBjb25zdCBwcmV2ICAgID0gdGhpcy5fcHJldmlvdXNTdGF0ZTtcblxuICAgIC8vIEZvciBlYWNoIGBzZXRgIHN0YXRlLCB1cGRhdGUgb3IgZGVsZXRlIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgIGVhY2goc3RhdGUsIGZ1bmN0aW9uKF92YWwsIF9rZXkpIHtcbiAgICAgIGlmICghaXNFcXVhbChjdXJyZW50W19rZXldLCBfdmFsKSkge1xuICAgICAgICBjaGFuZ2VzLnB1c2goX2tleSk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzRXF1YWwocHJldltfa2V5XSwgX3ZhbCkpIHtcbiAgICAgICAgY2hhbmdlZFtfa2V5XSA9IF92YWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgY2hhbmdlZFtfa2V5XTtcbiAgICAgIH1cbiAgICAgIHVuc2V0ID8gZGVsZXRlIGN1cnJlbnRbX2tleV0gOiBjdXJyZW50W19rZXldID0gX3ZhbDtcbiAgICB9KTtcblxuICAgIC8vIFRyaWdnZXIgYWxsIHJlbGV2YW50IHN0YXRlIGNoYW5nZXMuXG4gICAgaWYgKCFzaWxlbnQpIHtcbiAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9wZW5kaW5nID0gb3B0aW9ucztcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZTonICsgY2hhbmdlc1tpXSwgdGhpcywgY3VycmVudFtjaGFuZ2VzW2ldXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gWW91IG1pZ2h0IGJlIHdvbmRlcmluZyB3aHkgdGhlcmUncyBhIGB3aGlsZWAgbG9vcCBoZXJlLiBDaGFuZ2VzIGNhblxuICAgIC8vIGJlIHJlY3Vyc2l2ZWx5IG5lc3RlZCB3aXRoaW4gYFwiY2hhbmdlXCJgIGV2ZW50cy5cbiAgICBpZiAoY2hhbmdpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAoIXNpbGVudCkge1xuICAgICAgd2hpbGUgKHRoaXMuX3BlbmRpbmcpIHtcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMuX3BlbmRpbmc7XG4gICAgICAgIHRoaXMuX3BlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdjaGFuZ2UnLCB0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGlzRGlzcGxheUNvbXBvbmVudCh0aGlzKSAmJlxuICAgICAgICAgICh0aGlzLl9pc1JlbmRlcmVkIHx8ICh0aGlzLnZpZXcgJiYgdGhpcy52aWV3Ll9pc1JlbmRlcmVkKSkgJiZcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudFdpbGxVcGRhdGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5jb21wb25lbnRXaWxsVXBkYXRlKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9wZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fY2hhbmdpbmcgPSBmYWxzZTtcbiAgICByZXR1cm4gdGhpc1xuICB9LFxuXG4gIGdldFN0YXRlKGF0dHIpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVthdHRyXVxuICB9LFxuXG4gIGJpbmRTdGF0ZUV2ZW50cygpIHtcbiAgICBjb25zdCBiaW5kID0gYmluZEV2ZW50cyB8fCBiaW5kRW50aXR5RXZlbnRzO1xuICAgIGlmICh0aGlzLnN0YXRlRXZlbnRzKSB7XG4gICAgICBiaW5kKHRoaXMsIHRoaXMsIHRoaXMuc3RhdGVFdmVudHMpXG4gICAgfVxuICB9LFxuXG4gIHVuYmluZFN0YXRlRXZlbnRzKCkge1xuICAgIGNvbnN0IHVuYmluZCA9IHVuYmluZEV2ZW50cyB8fCB1bmJpbmRFbnRpdHlFdmVudHM7XG4gICAgaWYgKHRoaXMuc3RhdGVFdmVudHMpIHtcbiAgICAgIHVuYmluZCh0aGlzLCB0aGlzLCB0aGlzLnN0YXRlRXZlbnRzKVxuICAgIH1cbiAgfSxcblxuICBjb21wdXRlU3RhdGVQcm9wcyhzdG9yZSwgcHJvcHMpIHtcbiAgICBpZiAoIXRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZUZpbmFsTWFwU3RhdGUoc3RvcmUsIHByb3BzKVxuICAgIH1cblxuICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBzdGF0ZVByb3BzID0gdGhpcy5kb1N0YXRlUHJvcHNEZXBlbmRPbk93blByb3BzID9cbiAgICAgIHRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIHByb3BzKSA6XG4gICAgICB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzKHN0YXRlKTtcblxuICAgIHJldHVybiBzdGF0ZVByb3BzXG4gIH0sXG5cbiAgY29uZmlndXJlRmluYWxNYXBTdGF0ZShzdG9yZSwgcHJvcHMpIHtcbiAgICBjb25zdCBtYXBwZWRTdGF0ZSA9IHRoaXMubWFwU3RhdGUoc3RvcmUuZ2V0U3RhdGUoKSwgcHJvcHMpO1xuICAgIGNvbnN0IGlzRmFjdG9yeSA9IGlzRnVuY3Rpb24obWFwcGVkU3RhdGUpO1xuXG4gICAgdGhpcy5maW5hbE1hcFN0YXRlVG9Qcm9wcyA9IGlzRmFjdG9yeSA/IG1hcHBlZFN0YXRlIDogdGhpcy5tYXBTdGF0ZTtcbiAgICB0aGlzLmRvU3RhdGVQcm9wc0RlcGVuZE9uT3duUHJvcHMgPSB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzLmxlbmd0aCAhPT0gMTtcblxuICAgIGlmIChpc0ZhY3RvcnkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVTdGF0ZVByb3BzKHN0b3JlLCBwcm9wcylcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwcGVkU3RhdGVcbiAgfSxcblxuICB1cGRhdGVTdGF0ZVByb3BzSWZOZWVkZWQoKSB7XG4gICAgY29uc3QgbmV4dFN0YXRlUHJvcHMgPSB0aGlzLmNvbXB1dGVTdGF0ZVByb3BzKHRoaXMuc3RvcmUsIHRoaXMucHJvcHMpO1xuICAgIGlmICh0aGlzLnN0YXRlUHJvcHMgJiYgaXNFcXVhbChuZXh0U3RhdGVQcm9wcywgdGhpcy5zdGF0ZVByb3BzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9LFxuXG4gIGNvbXB1dGVEaXNwYXRjaFByb3BzKHN0b3JlLCBwcm9wcykge1xuICAgIGlmICghdGhpcy5maW5hbE1hcERpc3BhdGNoVG9Qcm9wcykge1xuICAgICAgcmV0dXJuIHRoaXMuY29uZmlndXJlRmluYWxNYXBEaXNwYXRjaChzdG9yZSwgcHJvcHMpXG4gICAgfVxuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBzdG9yZS5kaXNwYXRjaDtcbiAgICBjb25zdCBkaXNwYXRjaFByb3BzID0gdGhpcy5kb0Rpc3BhdGNoUHJvcHNEZXBlbmRPbk93blByb3BzID9cbiAgICAgIHRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIHByb3BzKSA6XG4gICAgICB0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKTtcblxuICAgIHJldHVybiBkaXNwYXRjaFByb3BzXG4gIH0sXG5cbiAgY29uZmlndXJlRmluYWxNYXBEaXNwYXRjaChzdG9yZSwgcHJvcHMpIHtcbiAgICBjb25zdCBtYXBwZWREaXNwYXRjaCA9IHRoaXMubWFwRGlzcGF0Y2goc3RvcmUuZGlzcGF0Y2gsIHByb3BzKTtcbiAgICBjb25zdCBpc0ZhY3RvcnkgPSBpc0Z1bmN0aW9uKG1hcHBlZERpc3BhdGNoKTtcblxuICAgIHRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMgPSBpc0ZhY3RvcnkgPyBtYXBwZWREaXNwYXRjaCA6IHRoaXMubWFwRGlzcGF0Y2g7XG4gICAgdGhpcy5kb0Rpc3BhdGNoUHJvcHNEZXBlbmRPbk93blByb3BzID0gdGhpcy5maW5hbE1hcERpc3BhdGNoVG9Qcm9wcy5sZW5ndGggIT09IDE7XG5cbiAgICBpZiAoaXNGYWN0b3J5KSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21wdXRlRGlzcGF0Y2hQcm9wcyhzdG9yZSwgcHJvcHMpXG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcHBlZERpc3BhdGNoXG4gIH0sXG5cbiAgdXBkYXRlRGlzcGF0Y2hQcm9wc0lmTmVlZGVkKCkge1xuICAgIGNvbnN0IG5leHREaXNwYXRjaFByb3BzID0gdGhpcy5jb21wdXRlRGlzcGF0Y2hQcm9wcyh0aGlzLnN0b3JlLCB0aGlzLnByb3BzKTtcbiAgICBpZiAodGhpcy5kaXNwYXRjaFByb3BzICYmIGlzRXF1YWwobmV4dERpc3BhdGNoUHJvcHMsIHRoaXMuZGlzcGF0Y2hQcm9wcykpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHRoaXMuZGlzcGF0Y2hQcm9wcyA9IG5leHREaXNwYXRjaFByb3BzO1xuXG4gICAgcmV0dXJuIHRydWVcbiAgfSxcblxuICBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGhpcy51bnN1YnNjcmliZSlcbiAgfSxcblxuICB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3Vic2NyaWJlZCgpKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmhhbmRsZURpc3BhdGNoUHJvcHMoKTtcbiAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlKClcbiAgICB9XG4gIH0sXG5cbiAgdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsXG4gICAgfVxuICB9LFxuXG4gIG9uUmVuZGVyKCkge1xuICAgIHRoaXMudHJ5U3Vic2NyaWJlKClcbiAgfSxcblxuICBvbkRlc3Ryb3koKSB7XG4gICAgdGhpcy50cnlVbnN1YnNjcmliZSgpO1xuICAgIHRoaXMudW5iaW5kU3RhdGVFdmVudHMoKTtcbiAgICB0aGlzLmNsZWFyQ2FjaGUoKVxuICB9LFxuXG4gIGNsZWFyQ2FjaGUoKSB7XG4gICAgdGhpcy5kaXNwYXRjaFByb3BzID0gbnVsbDtcbiAgICB0aGlzLnN0YXRlUHJvcHMgPSBudWxsO1xuICAgIHRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMgPSBudWxsO1xuICAgIHRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMgPSBudWxsO1xuICAgIHRoaXMuaGF2ZUluaXRpYWxTdGF0ZVByb3BzQmVlbkRldGVybWluZWQgPSBmYWxzZTtcbiAgICB0aGlzLmhhdmVJbml0aWFsRGlzcGF0Y2hQcm9wc0JlZW5EZXRlcm1pbmVkID0gZmFsc2VcbiAgfSxcblxuICBoYW5kbGVEaXNwYXRjaFByb3BzKCkge1xuICAgIGlmICghdGhpcy5oYXZlSW5pdGlhbERpc3BhdGNoUHJvcHNCZWVuRGV0ZXJtaW5lZCkge1xuICAgICAgdGhpcy51cGRhdGVEaXNwYXRjaFByb3BzSWZOZWVkZWQoKTtcbiAgICAgIHRoaXMuaGF2ZUluaXRpYWxEaXNwYXRjaFByb3BzQmVlbkRldGVybWluZWQgPSB0cnVlXG4gICAgfVxuICB9LFxuXG4gIGhhbmRsZUNoYW5nZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHN0b3JlU3RhdGUgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgY29uc3QgcHJldlN0b3JlU3RhdGUgPSB0aGlzLmdldFN0YXRlKCdzdG9yZVN0YXRlJyk7XG4gICAgaWYgKHRoaXMuaGF2ZUluaXRpYWxTdGF0ZVByb3BzQmVlbkRldGVybWluZWQgJiYgaXNFcXVhbChwcmV2U3RvcmVTdGF0ZSwgc3RvcmVTdGF0ZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGhhdmVTdGF0ZVByb3BzQ2hhbmdlZCA9IHRoaXMudXBkYXRlU3RhdGVQcm9wc0lmTmVlZGVkKCk7XG4gICAgdGhpcy5oYXZlSW5pdGlhbFN0YXRlUHJvcHNCZWVuRGV0ZXJtaW5lZCA9IHRydWU7XG5cbiAgICBpZiAoaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkKSB7XG5cbiAgICAgIGNvbnN0IG1lcmdlZFByb3BzID0gdGhpcy5tZXJnZVByb3BzKHRoaXMuc3RhdGVQcm9wcywgdGhpcy5kaXNwYXRjaFByb3BzLCB0aGlzLnByb3BzKTtcbiAgICAgIHRoaXMucHJvcHMgPSBtZXJnZWRQcm9wcztcblxuICAgICAgaXNGdW5jdGlvbih0aGlzLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMpICYmIHRoaXMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhtZXJnZWRQcm9wcyk7XG5cbiAgICAgIGlmIChpc0Rpc3BsYXlDb21wb25lbnQodGhpcykgJiZcbiAgICAgICAgKHRoaXMuX2lzUmVuZGVyZWQgfHwgKHRoaXMudmlldyAmJiB0aGlzLnZpZXcuX2lzUmVuZGVyZWQpKSAmJlxuICAgICAgICB0aGlzLmNvbXBvbmVudFdpbGxVcGRhdGVcbiAgICAgICkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudFdpbGxVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHN0b3JlU3RhdGVcbiAgICB9LCB7IHNpbGVudDogdHJ1ZSB9KVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaXhpbjtcbiIsImltcG9ydCB7IGRlZmF1bHRzLCBvbWl0IH0gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcydcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJ1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzIGZyb20gJy4vbWVyZ2VQcm9wcydcbmltcG9ydCBtaXhpbiBmcm9tICcuL21peGluJ1xuaW1wb3J0IGlzRGlzcGxheUNvbXBvbmVudCBmcm9tICcuL2lzRGlzcGxheUNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3QoX21hcFN0YXRlVG9Qcm9wcywgX21hcERpc3BhdGNoVG9Qcm9wcywgX21lcmdlUHJvcHMsIF9vcHRpb25zKSB7XG5cbiAgY29uc3Qgb3B0aW9ucyA9IF9vcHRpb25zIHx8IHt9O1xuXG4gIHJldHVybiBmdW5jdGlvbihDb21wb25lbnQpIHtcblxuICAgIGNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IF9tYXBTdGF0ZVRvUHJvcHMgfHwgQ29tcG9uZW50LnByb3RvdHlwZS5tYXBTdGF0ZVRvUHJvcHMgfHwgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcztcbiAgICBjb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBfbWFwRGlzcGF0Y2hUb1Byb3BzIHx8IENvbXBvbmVudC5wcm90b3R5cGUubWFwRGlzcGF0Y2hUb1Byb3BzIHx8IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHM7XG4gICAgY29uc3QgbWVyZ2VQcm9wcyA9IF9tZXJnZVByb3BzIHx8IENvbXBvbmVudC5wcm90b3R5cGUubWVyZ2VQcm9wcyB8fCBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgICBjb25zdCBzdG9yZSA9IG9wdGlvbnMuc3RvcmUgfHwgQ29tcG9uZW50LnByb3RvdHlwZS5zdG9yZTtcbiAgICBjb25zdCBjb21wb25lbnRJbml0aWFsaXplID0gQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplO1xuICAgIGNvbnN0IGNvbXBvbmVudE9uUmVuZGVyID0gQ29tcG9uZW50LnByb3RvdHlwZS5vblJlbmRlcjtcbiAgICBjb25zdCBjb21wb25lbnRPbkRlc3Ryb3kgPSBDb21wb25lbnQucHJvdG90eXBlLm9uRGVzdHJveTtcblxuICAgIGxldCBjb25uZWN0TWl4aW4gPSBkZWZhdWx0cyh7fSwge1xuXG4gICAgICBpbml0aWFsaXplKF9pbml0T3B0aW9ucykge1xuXG4gICAgICAgIGNvbnN0IGluaXRPcHRpb25zID0gX2luaXRPcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIG1peGluLmluaXRpYWxpemUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgbWFwU3RhdGVUb1Byb3BzLFxuICAgICAgICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgICAgICBtZXJnZVByb3BzLFxuICAgICAgICAgIHN0b3JlLFxuICAgICAgICAgIHByb3BzOiBpbml0T3B0aW9ucy5wcm9wc1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY29tcG9uZW50SW5pdGlhbGl6ZSkge1xuICAgICAgICAgIGNvbXBvbmVudEluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgb25SZW5kZXIoKSB7XG5cbiAgICAgICAgbWl4aW4ub25SZW5kZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICBpZiAoY29tcG9uZW50T25SZW5kZXIpIHtcbiAgICAgICAgICBjb21wb25lbnRPblJlbmRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIG9uRGVzdHJveSgpIHtcblxuICAgICAgICBtaXhpbi5vbkRlc3Ryb3kuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICBpZiAoY29tcG9uZW50T25EZXN0cm95KSB7XG4gICAgICAgICAgY29tcG9uZW50T25EZXN0cm95LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBtaXhpbik7XG5cbiAgICBpZiAoIWlzRGlzcGxheUNvbXBvbmVudChDb21wb25lbnQpKSB7XG4gICAgICBjb25uZWN0TWl4aW4gPSBvbWl0KGNvbm5lY3RNaXhpbiwgJ29uUmVuZGVyJylcbiAgICB9XG5cbiAgICByZXR1cm4gQ29tcG9uZW50LmV4dGVuZChjb25uZWN0TWl4aW4pXG4gIH1cbn1cbiIsImltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdCdcbmltcG9ydCBtaXhpbiBmcm9tICcuL21peGluJ1xuaW1wb3J0IHsgdmVyc2lvbiBhcyBWRVJTSU9OIH0gZnJvbSAnLi4vcGFja2FnZS5qc29uJ1xuXG5jb25zdCBNYXJpb25ldHRlUmVkdXggPSB7XG4gIGNvbm5lY3QsXG4gIG1peGluLFxuICBWRVJTSU9OXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hcmlvbmV0dGVSZWR1eFxuIl0sIm5hbWVzIjpbIm1hcFN0YXRlVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsImRpc3BhdGNoIiwibWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwicGFyZW50UHJvcHMiLCJleHRlbmQiLCJpc0Rpc3BsYXlDb21wb25lbnQiLCJDb21wb25lbnQiLCJpc0Z1bmN0aW9uIiwicHJvdG90eXBlIiwiVmlldyIsIkJlaGF2aW9yIiwiaXNPYmplY3QiLCJtaXhpbiIsIl9vcHRpb25zIiwib3B0aW9ucyIsIm1hcFN0YXRlIiwiZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyIsIm1hcERpc3BhdGNoIiwiZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwicHJvcHMiLCJzdG9yZSIsIndpbmRvdyIsInN0b3JlU3RhdGUiLCJnZXRTdGF0ZSIsInN0YXRlIiwiZGVmYXVsdHMiLCJnZXRJbml0aWFsU3RhdGUiLCJiaW5kU3RhdGVFdmVudHMiLCJjbGVhckNhY2hlIiwidHJ5U3Vic2NyaWJlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIm9uIiwia2V5IiwidmFsIiwidW5zZXQiLCJzaWxlbnQiLCJjaGFuZ2VzIiwiY2hhbmdpbmciLCJfY2hhbmdpbmciLCJfcHJldmlvdXNTdGF0ZSIsImNsb25lIiwiY2hhbmdlZCIsImN1cnJlbnQiLCJwcmV2IiwiX3ZhbCIsIl9rZXkiLCJpc0VxdWFsIiwicHVzaCIsImxlbmd0aCIsIl9wZW5kaW5nIiwiaSIsInRyaWdnZXIiLCJfaXNSZW5kZXJlZCIsInZpZXciLCJhdHRyIiwiYmluZCIsImJpbmRFdmVudHMiLCJiaW5kRW50aXR5RXZlbnRzIiwic3RhdGVFdmVudHMiLCJ1bmJpbmQiLCJ1bmJpbmRFdmVudHMiLCJ1bmJpbmRFbnRpdHlFdmVudHMiLCJmaW5hbE1hcFN0YXRlVG9Qcm9wcyIsImNvbmZpZ3VyZUZpbmFsTWFwU3RhdGUiLCJkb1N0YXRlUHJvcHNEZXBlbmRPbk93blByb3BzIiwibWFwcGVkU3RhdGUiLCJpc0ZhY3RvcnkiLCJjb21wdXRlU3RhdGVQcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwiZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMiLCJjb25maWd1cmVGaW5hbE1hcERpc3BhdGNoIiwiZG9EaXNwYXRjaFByb3BzRGVwZW5kT25Pd25Qcm9wcyIsIm1hcHBlZERpc3BhdGNoIiwiY29tcHV0ZURpc3BhdGNoUHJvcHMiLCJuZXh0RGlzcGF0Y2hQcm9wcyIsInVuc3Vic2NyaWJlIiwiaXNTdWJzY3JpYmVkIiwic3Vic2NyaWJlIiwiaGFuZGxlQ2hhbmdlIiwiaGFuZGxlRGlzcGF0Y2hQcm9wcyIsInRyeVVuc3Vic2NyaWJlIiwidW5iaW5kU3RhdGVFdmVudHMiLCJoYXZlSW5pdGlhbFN0YXRlUHJvcHNCZWVuRGV0ZXJtaW5lZCIsImhhdmVJbml0aWFsRGlzcGF0Y2hQcm9wc0JlZW5EZXRlcm1pbmVkIiwidXBkYXRlRGlzcGF0Y2hQcm9wc0lmTmVlZGVkIiwicHJldlN0b3JlU3RhdGUiLCJoYXZlU3RhdGVQcm9wc0NoYW5nZWQiLCJ1cGRhdGVTdGF0ZVByb3BzSWZOZWVkZWQiLCJtZXJnZWRQcm9wcyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJzZXRTdGF0ZSIsImNvbm5lY3QiLCJfbWFwU3RhdGVUb1Byb3BzIiwiX21hcERpc3BhdGNoVG9Qcm9wcyIsIl9tZXJnZVByb3BzIiwiY29tcG9uZW50SW5pdGlhbGl6ZSIsImluaXRpYWxpemUiLCJjb21wb25lbnRPblJlbmRlciIsIm9uUmVuZGVyIiwiY29tcG9uZW50T25EZXN0cm95Iiwib25EZXN0cm95IiwiY29ubmVjdE1peGluIiwiX2luaXRPcHRpb25zIiwiaW5pdE9wdGlvbnMiLCJjYWxsIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJvbWl0IiwiTWFyaW9uZXR0ZVJlZHV4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFlLFNBQVNBLGVBQVQsR0FBMkI7U0FDakMsRUFBUDs7O0FDRGEsU0FBU0Ms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"}