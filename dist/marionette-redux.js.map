{"version":3,"file":"marionette-redux.js","sources":["src/mapStateToProps.js","src/mapDispatchToProps.js","src/mergeProps.js","src/setState.js","src/getState.js","src/isDisplayComponent.js","src/mixin.js","src/connect.js"],"sourcesContent":["export default state => ({})\n","export default dispatch => ({ dispatch })\n","import _ from 'underscore';\nexport default (stateProps, dispatchProps, parentProps) => (\n  _.extend({}, parentProps, stateProps, dispatchProps)\n)\n","import _ from 'underscore';\n\nexport default function(key, val, options) {\n\n  if (key == null) {\n    return this;\n  }\n\n  // Handle both `\"key\", value` and `{key: value}` -style arguments.\n  let state;\n  if (typeof key === 'object') {\n    state = key;\n    options = val;\n  } else {\n    (state = {})[key] = val;\n  }\n\n  options || (options = {});\n\n  // Extract state and options.\n  const unset      = options.unset;\n  const silent     = options.silent;\n  const changes    = [];\n  const changing   = this._changing;\n  this._changing = true;\n\n  if (!changing) {\n    this._previousState = _.clone(this.state);\n    this.changed = {};\n  }\n\n  const current = this.state;\n  const changed = this.changed;\n  const prev    = this._previousState;\n\n  // For each `set` state, update or delete the current value.\n  _.each(state, function(_val, _key) {\n    if (!_.isEqual(current[_key], _val)) {\n      changes.push(_key);\n    }\n    if (!_.isEqual(prev[_key], _val)) {\n      changed[_key] = _val;\n    } else {\n      delete changed[_key];\n    }\n    unset ? delete current[_key] : current[_key] = _val;\n  });\n\n  // Trigger all relevant state changes.\n  if (!silent) {\n    if (changes.length) {\n      this._pending = options;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      this.trigger('change:' + changes[i], this, current[changes[i]], options);\n    }\n  }\n\n  // You might be wondering why there's a `while` loop here. Changes can\n  // be recursively nested within `\"change\"` events.\n  if (changing) {\n    return this;\n  }\n  if (!silent) {\n    while (this._pending) {\n      options = this._pending;\n      this._pending = false;\n      this.trigger('change', this, options);\n    }\n  }\n  this._pending = false;\n  this._changing = false;\n  return this\n}\n","export default function(attr) {\n  return this.state[attr];\n}\n","import Marionette from 'marionette'\n\nexport default function(Component) {\n  if (typeof Component === 'object') {\n    return Component instanceof Marionette.View || Component instanceof Marionette.Behavior\n  }\n  if (typeof Component === 'function') {\n    return Component.prototype instanceof Marionette.View || Component.prototype instanceof Marionette.Behavior\n  }\n  return false\n}\n","import _ from 'underscore';\nimport Marionette from 'marionette'\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport setState from './setState'\nimport getState from './getState'\nimport isDisplayComponent from './isDisplayComponent';\n\nexport default {\n\n  initialize(_options) {\n\n    const options = _options || {};\n\n    this.mapState = options.mapStateToProps || this.mapStateToProps || defaultMapStateToProps;\n    this.mapDispatch = options.mapDispatchToProps || this.mapDispatchToProps || defaultMapDispatchToProps;\n    this.mergeProps = options.mergeProps || this.mergeProps || defaultMergeProps;\n    this.props = this.props || {};\n\n    if (options.props) {\n      _.extend(this.props, options.props)\n    }\n\n    this.store = options.store || this.store\n\n    if (!this.store && window && window.store) {\n      this.store = window.store\n    }\n\n    const storeState = this.store.getState();\n    this.state = _.defaults({\n      storeState: storeState\n    }, this.getInitialState());\n\n    this.bindStateEvents();\n    this.clearCache();\n\n    if (!isDisplayComponent(this)) {\n      this.trySubscribe()\n    }\n  },\n\n  getInitialState() {\n    return {}\n  },\n\n  setState,\n\n  getState,\n\n  bindStateEvents() {\n    let bind;\n    if (this.stateEvents) {\n      bind = Marionette.bindEvents || Marionette.bindEntityEvents;\n      bind(this, this, this.stateEvents)\n    }\n  },\n\n  unbindStateEvents() {\n    let unbind;\n    if (this.stateEvents) {\n      unbind = Marionette.unbindEvents || Marionette.unbindEntityEvents;\n      unbind(this, this, this.stateEvents)\n    }\n  },\n\n  computeStateProps(store, props) {\n    if (!this.finalMapStateToProps) {\n      return this.configureFinalMapState(store, props)\n    }\n\n    const state = store.getState();\n    const stateProps = this.doStatePropsDependOnOwnProps ?\n      this.finalMapStateToProps(state, props) :\n      this.finalMapStateToProps(state);\n\n    return stateProps\n  },\n\n  configureFinalMapState(store, props) {\n    const mappedState = this.mapState(store.getState(), props);\n    const isFactory = _.isFunction(mappedState);\n\n    this.finalMapStateToProps = isFactory ? mappedState : this.mapState;\n    this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeStateProps(store, props)\n    }\n\n    return mappedState\n  },\n\n  updateStatePropsIfNeeded() {\n    const nextStateProps = this.computeStateProps(this.store, this.props);\n    if (this.stateProps && _.isEqual(nextStateProps, this.stateProps)) {\n      return false\n    }\n\n    this.stateProps = nextStateProps;\n\n    return true\n  },\n\n  computeDispatchProps(store, props) {\n    if (!this.finalMapDispatchToProps) {\n      return this.configureFinalMapDispatch(store, props)\n    }\n\n    const dispatch = store.dispatch;\n    const dispatchProps = this.doDispatchPropsDependOnOwnProps ?\n      this.finalMapDispatchToProps(dispatch, props) :\n      this.finalMapDispatchToProps(dispatch);\n\n    return dispatchProps\n  },\n\n  configureFinalMapDispatch(store, props) {\n    const mappedDispatch = this.mapDispatch(store.dispatch, props);\n    const isFactory = _.isFunction(mappedDispatch);\n\n    this.finalMapDispatchToProps = isFactory ? mappedDispatch : this.mapDispatch;\n    this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeDispatchProps(store, props)\n    }\n\n    return mappedDispatch\n  },\n\n  updateDispatchPropsIfNeeded() {\n    const nextDispatchProps = this.computeDispatchProps(this.store, this.props);\n    if (this.dispatchProps && _.isEqual(nextDispatchProps, this.dispatchProps)) {\n      return false\n    }\n\n    this.dispatchProps = nextDispatchProps;\n\n    return true\n  },\n\n  isSubscribed() {\n    return _.isFunction(this.unsubscribe)\n  },\n\n  trySubscribe() {\n    if (!this.isSubscribed()) {\n      this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));\n      this.handleDispatchProps();\n      this.handleChange()\n    }\n  },\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null\n    }\n  },\n\n  onRender() {\n    this.trySubscribe()\n  },\n\n  onDestroy() {\n    this.tryUnsubscribe();\n    this.unbindStateEvents();\n    this.clearCache()\n  },\n\n  clearCache() {\n    this.dispatchProps = null;\n    this.stateProps = null;\n    this.finalMapDispatchToProps = null;\n    this.finalMapStateToProps = null;\n    this.haveInitialStatePropsBeenDetermined = false;\n    this.haveInitialDispatchPropsBeenDetermined = false\n  },\n\n  handleDispatchProps() {\n    if (!this.haveInitialDispatchPropsBeenDetermined) {\n      this.updateDispatchPropsIfNeeded();\n      this.haveInitialDispatchPropsBeenDetermined = true\n    }\n  },\n\n  handleChange() {\n    if (!this.unsubscribe) {\n      return\n    }\n\n    const storeState = this.store.getState();\n    const prevStoreState = this.getState('storeState');\n    if (this.haveInitialStatePropsBeenDetermined && _.isEqual(prevStoreState, storeState)) {\n      return\n    }\n\n    const haveStatePropsChanged = this.updateStatePropsIfNeeded();\n    this.haveInitialStatePropsBeenDetermined = true;\n\n    if (haveStatePropsChanged) {\n\n      const mergedProps = this.mergeProps(this.stateProps, this.dispatchProps, this.props);\n      this.props = mergedProps;\n\n      _.isFunction(this.componentDidReceiveProps) && this.componentDidReceiveProps(mergedProps)\n    }\n\n    this.setState({\n      storeState\n    })\n  }\n};\n","import _ from 'underscore';\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport mixin from './mixin'\nimport isDisplayComponent from './isDisplayComponent';\n\nexport default (_mapStateToProps, _mapDispatchToProps, _mergeProps, _options) => {\n\n  const options = _options || {};\n\n  return function(Component) {\n\n    const mapStateToProps = _mapStateToProps || Component.prototype.mapStateToProps || defaultMapStateToProps;\n    const mapDispatchToProps = _mapDispatchToProps || Component.prototype.mapDispatchToProps || defaultMapDispatchToProps;\n    const mergeProps = _mergeProps || Component.prototype.mergeProps || defaultMergeProps;\n    const store = options.store || Component.prototype.store;\n    const componentInitialize = Component.prototype.initialize;\n    const componentonRender = Component.prototype.onRender;\n    const componentOnDestroy = Component.prototype.onDestroy;\n\n    let connectMixin = _.defaults({}, {\n\n      initialize(_initOptions) {\n\n        const initOptions = _initOptions || {};\n\n        mixin.initialize.call(this, {\n          mapStateToProps,\n          mapDispatchToProps,\n          mergeProps,\n          store,\n          props: initOptions.props\n        });\n\n        if (componentInitialize) {\n          componentInitialize.apply(this, arguments);\n        }\n      },\n\n      onRender() {\n\n        mixin.onRender.apply(this, arguments);\n\n        if (componentonRender) {\n          componentonRender.apply(this, arguments)\n        }\n      },\n\n      onDestroy() {\n\n        mixin.onDestroy.apply(this, arguments);\n\n        if (componentOnDestroy) {\n          componentOnDestroy.apply(this, arguments);\n        }\n      }\n    }, mixin);\n\n    if (!isDisplayComponent(Component)) {\n      connectMixin = _.omit(connectMixin, 'onRender')\n    }\n\n    return Component.extend(connectMixin)\n  }\n}\n"],"names":["dispatch","stateProps","dispatchProps","parentProps","_","extend","key","val","options","state","unset","silent","changes","changing","_changing","_previousState","clone","changed","current","prev","each","_val","_key","isEqual","push","length","_pending","i","trigger","attr","Component","Marionette","View","Behavior","prototype","_options","mapState","mapStateToProps","defaultMapStateToProps","mapDispatch","mapDispatchToProps","defaultMapDispatchToProps","mergeProps","defaultMergeProps","props","store","window","storeState","getState","defaults","getInitialState","bindStateEvents","clearCache","isDisplayComponent","trySubscribe","bind","stateEvents","bindEvents","bindEntityEvents","unbind","unbindEvents","unbindEntityEvents","finalMapStateToProps","configureFinalMapState","doStatePropsDependOnOwnProps","mappedState","isFactory","isFunction","computeStateProps","nextStateProps","finalMapDispatchToProps","configureFinalMapDispatch","doDispatchPropsDependOnOwnProps","mappedDispatch","computeDispatchProps","nextDispatchProps","unsubscribe","isSubscribed","subscribe","handleChange","handleDispatchProps","tryUnsubscribe","unbindStateEvents","haveInitialStatePropsBeenDetermined","haveInitialDispatchPropsBeenDetermined","updateDispatchPropsIfNeeded","prevStoreState","haveStatePropsChanged","updateStatePropsIfNeeded","mergedProps","componentDidReceiveProps","setState","_mapStateToProps","_mapDispatchToProps","_mergeProps","componentInitialize","initialize","componentonRender","onRender","componentOnDestroy","onDestroy","connectMixin","_initOptions","initOptions","call","apply","arguments","mixin","omit"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdoZW5kZXJzb24vbWFyaW9uZXR0ZS1yZWR1eC9zcmMvbWFwU3RhdGVUb1Byb3BzLmpzIiwiL1VzZXJzL2FuZHJld2hlbmRlcnNvbi9tYXJpb25ldHRlLXJlZHV4L3NyYy9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL21lcmdlUHJvcHMuanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL3NldFN0YXRlLmpzIiwiL1VzZXJzL2FuZHJld2hlbmRlcnNvbi9tYXJpb25ldHRlLXJlZHV4L3NyYy9nZXRTdGF0ZS5qcyIsIi9Vc2Vycy9hbmRyZXdoZW5kZXJzb24vbWFyaW9uZXR0ZS1yZWR1eC9zcmMvaXNEaXNwbGF5Q29tcG9uZW50LmpzIiwiL1VzZXJzL2FuZHJld2hlbmRlcnNvbi9tYXJpb25ldHRlLXJlZHV4L3NyYy9taXhpbi5qcyIsIi9Vc2Vycy9hbmRyZXdoZW5kZXJzb24vbWFyaW9uZXR0ZS1yZWR1eC9zcmMvY29ubmVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBzdGF0ZSA9PiAoe30pXG4iLCJleHBvcnQgZGVmYXVsdCBkaXNwYXRjaCA9PiAoeyBkaXNwYXRjaCB9KVxuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5leHBvcnQgZGVmYXVsdCAoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgcGFyZW50UHJvcHMpID0+IChcbiAgXy5leHRlbmQoe30sIHBhcmVudFByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKVxuKVxuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGtleSwgdmFsLCBvcHRpb25zKSB7XG5cbiAgaWYgKGtleSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBIYW5kbGUgYm90aCBgXCJrZXlcIiwgdmFsdWVgIGFuZCBge2tleTogdmFsdWV9YCAtc3R5bGUgYXJndW1lbnRzLlxuICBsZXQgc3RhdGU7XG4gIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgIHN0YXRlID0ga2V5O1xuICAgIG9wdGlvbnMgPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgKHN0YXRlID0ge30pW2tleV0gPSB2YWw7XG4gIH1cblxuICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuXG4gIC8vIEV4dHJhY3Qgc3RhdGUgYW5kIG9wdGlvbnMuXG4gIGNvbnN0IHVuc2V0ICAgICAgPSBvcHRpb25zLnVuc2V0O1xuICBjb25zdCBzaWxlbnQgICAgID0gb3B0aW9ucy5zaWxlbnQ7XG4gIGNvbnN0IGNoYW5nZXMgICAgPSBbXTtcbiAgY29uc3QgY2hhbmdpbmcgICA9IHRoaXMuX2NoYW5naW5nO1xuICB0aGlzLl9jaGFuZ2luZyA9IHRydWU7XG5cbiAgaWYgKCFjaGFuZ2luZykge1xuICAgIHRoaXMuX3ByZXZpb3VzU3RhdGUgPSBfLmNsb25lKHRoaXMuc3RhdGUpO1xuICAgIHRoaXMuY2hhbmdlZCA9IHt9O1xuICB9XG5cbiAgY29uc3QgY3VycmVudCA9IHRoaXMuc3RhdGU7XG4gIGNvbnN0IGNoYW5nZWQgPSB0aGlzLmNoYW5nZWQ7XG4gIGNvbnN0IHByZXYgICAgPSB0aGlzLl9wcmV2aW91c1N0YXRlO1xuXG4gIC8vIEZvciBlYWNoIGBzZXRgIHN0YXRlLCB1cGRhdGUgb3IgZGVsZXRlIHRoZSBjdXJyZW50IHZhbHVlLlxuICBfLmVhY2goc3RhdGUsIGZ1bmN0aW9uKF92YWwsIF9rZXkpIHtcbiAgICBpZiAoIV8uaXNFcXVhbChjdXJyZW50W19rZXldLCBfdmFsKSkge1xuICAgICAgY2hhbmdlcy5wdXNoKF9rZXkpO1xuICAgIH1cbiAgICBpZiAoIV8uaXNFcXVhbChwcmV2W19rZXldLCBfdmFsKSkge1xuICAgICAgY2hhbmdlZFtfa2V5XSA9IF92YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSBjaGFuZ2VkW19rZXldO1xuICAgIH1cbiAgICB1bnNldCA/IGRlbGV0ZSBjdXJyZW50W19rZXldIDogY3VycmVudFtfa2V5XSA9IF92YWw7XG4gIH0pO1xuXG4gIC8vIFRyaWdnZXIgYWxsIHJlbGV2YW50IHN0YXRlIGNoYW5nZXMuXG4gIGlmICghc2lsZW50KSB7XG4gICAgaWYgKGNoYW5nZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nID0gb3B0aW9ucztcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZTonICsgY2hhbmdlc1tpXSwgdGhpcywgY3VycmVudFtjaGFuZ2VzW2ldXSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgLy8gWW91IG1pZ2h0IGJlIHdvbmRlcmluZyB3aHkgdGhlcmUncyBhIGB3aGlsZWAgbG9vcCBoZXJlLiBDaGFuZ2VzIGNhblxuICAvLyBiZSByZWN1cnNpdmVseSBuZXN0ZWQgd2l0aGluIGBcImNoYW5nZVwiYCBldmVudHMuXG4gIGlmIChjaGFuZ2luZykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGlmICghc2lsZW50KSB7XG4gICAgd2hpbGUgKHRoaXMuX3BlbmRpbmcpIHtcbiAgICAgIG9wdGlvbnMgPSB0aGlzLl9wZW5kaW5nO1xuICAgICAgdGhpcy5fcGVuZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy50cmlnZ2VyKCdjaGFuZ2UnLCB0aGlzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgdGhpcy5fcGVuZGluZyA9IGZhbHNlO1xuICB0aGlzLl9jaGFuZ2luZyA9IGZhbHNlO1xuICByZXR1cm4gdGhpc1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXR0cikge1xuICByZXR1cm4gdGhpcy5zdGF0ZVthdHRyXTtcbn1cbiIsImltcG9ydCBNYXJpb25ldHRlIGZyb20gJ21hcmlvbmV0dGUnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKENvbXBvbmVudCkge1xuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50IGluc3RhbmNlb2YgTWFyaW9uZXR0ZS5WaWV3IHx8IENvbXBvbmVudCBpbnN0YW5jZW9mIE1hcmlvbmV0dGUuQmVoYXZpb3JcbiAgfVxuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBDb21wb25lbnQucHJvdG90eXBlIGluc3RhbmNlb2YgTWFyaW9uZXR0ZS5WaWV3IHx8IENvbXBvbmVudC5wcm90b3R5cGUgaW5zdGFuY2VvZiBNYXJpb25ldHRlLkJlaGF2aW9yXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBNYXJpb25ldHRlIGZyb20gJ21hcmlvbmV0dGUnXG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcydcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJ1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzIGZyb20gJy4vbWVyZ2VQcm9wcydcbmltcG9ydCBzZXRTdGF0ZSBmcm9tICcuL3NldFN0YXRlJ1xuaW1wb3J0IGdldFN0YXRlIGZyb20gJy4vZ2V0U3RhdGUnXG5pbXBvcnQgaXNEaXNwbGF5Q29tcG9uZW50IGZyb20gJy4vaXNEaXNwbGF5Q29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIGluaXRpYWxpemUoX29wdGlvbnMpIHtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fTtcblxuICAgIHRoaXMubWFwU3RhdGUgPSBvcHRpb25zLm1hcFN0YXRlVG9Qcm9wcyB8fCB0aGlzLm1hcFN0YXRlVG9Qcm9wcyB8fCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzO1xuICAgIHRoaXMubWFwRGlzcGF0Y2ggPSBvcHRpb25zLm1hcERpc3BhdGNoVG9Qcm9wcyB8fCB0aGlzLm1hcERpc3BhdGNoVG9Qcm9wcyB8fCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzO1xuICAgIHRoaXMubWVyZ2VQcm9wcyA9IG9wdGlvbnMubWVyZ2VQcm9wcyB8fCB0aGlzLm1lcmdlUHJvcHMgfHwgZGVmYXVsdE1lcmdlUHJvcHM7XG4gICAgdGhpcy5wcm9wcyA9IHRoaXMucHJvcHMgfHwge307XG5cbiAgICBpZiAob3B0aW9ucy5wcm9wcykge1xuICAgICAgXy5leHRlbmQodGhpcy5wcm9wcywgb3B0aW9ucy5wcm9wcylcbiAgICB9XG5cbiAgICB0aGlzLnN0b3JlID0gb3B0aW9ucy5zdG9yZSB8fCB0aGlzLnN0b3JlXG5cbiAgICBpZiAoIXRoaXMuc3RvcmUgJiYgd2luZG93ICYmIHdpbmRvdy5zdG9yZSkge1xuICAgICAgdGhpcy5zdG9yZSA9IHdpbmRvdy5zdG9yZVxuICAgIH1cblxuICAgIGNvbnN0IHN0b3JlU3RhdGUgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgdGhpcy5zdGF0ZSA9IF8uZGVmYXVsdHMoe1xuICAgICAgc3RvcmVTdGF0ZTogc3RvcmVTdGF0ZVxuICAgIH0sIHRoaXMuZ2V0SW5pdGlhbFN0YXRlKCkpO1xuXG4gICAgdGhpcy5iaW5kU3RhdGVFdmVudHMoKTtcbiAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcblxuICAgIGlmICghaXNEaXNwbGF5Q29tcG9uZW50KHRoaXMpKSB7XG4gICAgICB0aGlzLnRyeVN1YnNjcmliZSgpXG4gICAgfVxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge31cbiAgfSxcblxuICBzZXRTdGF0ZSxcblxuICBnZXRTdGF0ZSxcblxuICBiaW5kU3RhdGVFdmVudHMoKSB7XG4gICAgbGV0IGJpbmQ7XG4gICAgaWYgKHRoaXMuc3RhdGVFdmVudHMpIHtcbiAgICAgIGJpbmQgPSBNYXJpb25ldHRlLmJpbmRFdmVudHMgfHwgTWFyaW9uZXR0ZS5iaW5kRW50aXR5RXZlbnRzO1xuICAgICAgYmluZCh0aGlzLCB0aGlzLCB0aGlzLnN0YXRlRXZlbnRzKVxuICAgIH1cbiAgfSxcblxuICB1bmJpbmRTdGF0ZUV2ZW50cygpIHtcbiAgICBsZXQgdW5iaW5kO1xuICAgIGlmICh0aGlzLnN0YXRlRXZlbnRzKSB7XG4gICAgICB1bmJpbmQgPSBNYXJpb25ldHRlLnVuYmluZEV2ZW50cyB8fCBNYXJpb25ldHRlLnVuYmluZEVudGl0eUV2ZW50cztcbiAgICAgIHVuYmluZCh0aGlzLCB0aGlzLCB0aGlzLnN0YXRlRXZlbnRzKVxuICAgIH1cbiAgfSxcblxuICBjb21wdXRlU3RhdGVQcm9wcyhzdG9yZSwgcHJvcHMpIHtcbiAgICBpZiAoIXRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZUZpbmFsTWFwU3RhdGUoc3RvcmUsIHByb3BzKVxuICAgIH1cblxuICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBzdGF0ZVByb3BzID0gdGhpcy5kb1N0YXRlUHJvcHNEZXBlbmRPbk93blByb3BzID9cbiAgICAgIHRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIHByb3BzKSA6XG4gICAgICB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzKHN0YXRlKTtcblxuICAgIHJldHVybiBzdGF0ZVByb3BzXG4gIH0sXG5cbiAgY29uZmlndXJlRmluYWxNYXBTdGF0ZShzdG9yZSwgcHJvcHMpIHtcbiAgICBjb25zdCBtYXBwZWRTdGF0ZSA9IHRoaXMubWFwU3RhdGUoc3RvcmUuZ2V0U3RhdGUoKSwgcHJvcHMpO1xuICAgIGNvbnN0IGlzRmFjdG9yeSA9IF8uaXNGdW5jdGlvbihtYXBwZWRTdGF0ZSk7XG5cbiAgICB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzID0gaXNGYWN0b3J5ID8gbWFwcGVkU3RhdGUgOiB0aGlzLm1hcFN0YXRlO1xuICAgIHRoaXMuZG9TdGF0ZVByb3BzRGVwZW5kT25Pd25Qcm9wcyA9IHRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMubGVuZ3RoICE9PSAxO1xuXG4gICAgaWYgKGlzRmFjdG9yeSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZVN0YXRlUHJvcHMoc3RvcmUsIHByb3BzKVxuICAgIH1cblxuICAgIHJldHVybiBtYXBwZWRTdGF0ZVxuICB9LFxuXG4gIHVwZGF0ZVN0YXRlUHJvcHNJZk5lZWRlZCgpIHtcbiAgICBjb25zdCBuZXh0U3RhdGVQcm9wcyA9IHRoaXMuY29tcHV0ZVN0YXRlUHJvcHModGhpcy5zdG9yZSwgdGhpcy5wcm9wcyk7XG4gICAgaWYgKHRoaXMuc3RhdGVQcm9wcyAmJiBfLmlzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHRoaXMuc3RhdGVQcm9wcykpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHRoaXMuc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuXG4gICAgcmV0dXJuIHRydWVcbiAgfSxcblxuICBjb21wdXRlRGlzcGF0Y2hQcm9wcyhzdG9yZSwgcHJvcHMpIHtcbiAgICBpZiAoIXRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZUZpbmFsTWFwRGlzcGF0Y2goc3RvcmUsIHByb3BzKVxuICAgIH1cblxuICAgIGNvbnN0IGRpc3BhdGNoID0gc3RvcmUuZGlzcGF0Y2g7XG4gICAgY29uc3QgZGlzcGF0Y2hQcm9wcyA9IHRoaXMuZG9EaXNwYXRjaFByb3BzRGVwZW5kT25Pd25Qcm9wcyA/XG4gICAgICB0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBwcm9wcykgOlxuICAgICAgdGhpcy5maW5hbE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCk7XG5cbiAgICByZXR1cm4gZGlzcGF0Y2hQcm9wc1xuICB9LFxuXG4gIGNvbmZpZ3VyZUZpbmFsTWFwRGlzcGF0Y2goc3RvcmUsIHByb3BzKSB7XG4gICAgY29uc3QgbWFwcGVkRGlzcGF0Y2ggPSB0aGlzLm1hcERpc3BhdGNoKHN0b3JlLmRpc3BhdGNoLCBwcm9wcyk7XG4gICAgY29uc3QgaXNGYWN0b3J5ID0gXy5pc0Z1bmN0aW9uKG1hcHBlZERpc3BhdGNoKTtcblxuICAgIHRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMgPSBpc0ZhY3RvcnkgPyBtYXBwZWREaXNwYXRjaCA6IHRoaXMubWFwRGlzcGF0Y2g7XG4gICAgdGhpcy5kb0Rpc3BhdGNoUHJvcHNEZXBlbmRPbk93blByb3BzID0gdGhpcy5maW5hbE1hcERpc3BhdGNoVG9Qcm9wcy5sZW5ndGggIT09IDE7XG5cbiAgICBpZiAoaXNGYWN0b3J5KSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21wdXRlRGlzcGF0Y2hQcm9wcyhzdG9yZSwgcHJvcHMpXG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcHBlZERpc3BhdGNoXG4gIH0sXG5cbiAgdXBkYXRlRGlzcGF0Y2hQcm9wc0lmTmVlZGVkKCkge1xuICAgIGNvbnN0IG5leHREaXNwYXRjaFByb3BzID0gdGhpcy5jb21wdXRlRGlzcGF0Y2hQcm9wcyh0aGlzLnN0b3JlLCB0aGlzLnByb3BzKTtcbiAgICBpZiAodGhpcy5kaXNwYXRjaFByb3BzICYmIF8uaXNFcXVhbChuZXh0RGlzcGF0Y2hQcm9wcywgdGhpcy5kaXNwYXRjaFByb3BzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5kaXNwYXRjaFByb3BzID0gbmV4dERpc3BhdGNoUHJvcHM7XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9LFxuXG4gIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHRoaXMudW5zdWJzY3JpYmUpXG4gIH0sXG5cbiAgdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5pc1N1YnNjcmliZWQoKSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5oYW5kbGVEaXNwYXRjaFByb3BzKCk7XG4gICAgICB0aGlzLmhhbmRsZUNoYW5nZSgpXG4gICAgfVxuICB9LFxuXG4gIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbFxuICAgIH1cbiAgfSxcblxuICBvblJlbmRlcigpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpXG4gIH0sXG5cbiAgb25EZXN0cm95KCkge1xuICAgIHRoaXMudHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnVuYmluZFN0YXRlRXZlbnRzKCk7XG4gICAgdGhpcy5jbGVhckNhY2hlKClcbiAgfSxcblxuICBjbGVhckNhY2hlKCkge1xuICAgIHRoaXMuZGlzcGF0Y2hQcm9wcyA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZVByb3BzID0gbnVsbDtcbiAgICB0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzID0gbnVsbDtcbiAgICB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzID0gbnVsbDtcbiAgICB0aGlzLmhhdmVJbml0aWFsU3RhdGVQcm9wc0JlZW5EZXRlcm1pbmVkID0gZmFsc2U7XG4gICAgdGhpcy5oYXZlSW5pdGlhbERpc3BhdGNoUHJvcHNCZWVuRGV0ZXJtaW5lZCA9IGZhbHNlXG4gIH0sXG5cbiAgaGFuZGxlRGlzcGF0Y2hQcm9wcygpIHtcbiAgICBpZiAoIXRoaXMuaGF2ZUluaXRpYWxEaXNwYXRjaFByb3BzQmVlbkRldGVybWluZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlRGlzcGF0Y2hQcm9wc0lmTmVlZGVkKCk7XG4gICAgICB0aGlzLmhhdmVJbml0aWFsRGlzcGF0Y2hQcm9wc0JlZW5EZXRlcm1pbmVkID0gdHJ1ZVxuICAgIH1cbiAgfSxcblxuICBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzdG9yZVN0YXRlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHByZXZTdG9yZVN0YXRlID0gdGhpcy5nZXRTdGF0ZSgnc3RvcmVTdGF0ZScpO1xuICAgIGlmICh0aGlzLmhhdmVJbml0aWFsU3RhdGVQcm9wc0JlZW5EZXRlcm1pbmVkICYmIF8uaXNFcXVhbChwcmV2U3RvcmVTdGF0ZSwgc3RvcmVTdGF0ZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGhhdmVTdGF0ZVByb3BzQ2hhbmdlZCA9IHRoaXMudXBkYXRlU3RhdGVQcm9wc0lmTmVlZGVkKCk7XG4gICAgdGhpcy5oYXZlSW5pdGlhbFN0YXRlUHJvcHNCZWVuRGV0ZXJtaW5lZCA9IHRydWU7XG5cbiAgICBpZiAoaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkKSB7XG5cbiAgICAgIGNvbnN0IG1lcmdlZFByb3BzID0gdGhpcy5tZXJnZVByb3BzKHRoaXMuc3RhdGVQcm9wcywgdGhpcy5kaXNwYXRjaFByb3BzLCB0aGlzLnByb3BzKTtcbiAgICAgIHRoaXMucHJvcHMgPSBtZXJnZWRQcm9wcztcblxuICAgICAgXy5pc0Z1bmN0aW9uKHRoaXMuY29tcG9uZW50RGlkUmVjZWl2ZVByb3BzKSAmJiB0aGlzLmNvbXBvbmVudERpZFJlY2VpdmVQcm9wcyhtZXJnZWRQcm9wcylcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHN0b3JlU3RhdGVcbiAgICB9KVxuICB9XG59O1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcydcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJ1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzIGZyb20gJy4vbWVyZ2VQcm9wcydcbmltcG9ydCBtaXhpbiBmcm9tICcuL21peGluJ1xuaW1wb3J0IGlzRGlzcGxheUNvbXBvbmVudCBmcm9tICcuL2lzRGlzcGxheUNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IChfbWFwU3RhdGVUb1Byb3BzLCBfbWFwRGlzcGF0Y2hUb1Byb3BzLCBfbWVyZ2VQcm9wcywgX29wdGlvbnMpID0+IHtcblxuICBjb25zdCBvcHRpb25zID0gX29wdGlvbnMgfHwge307XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKENvbXBvbmVudCkge1xuXG4gICAgY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gX21hcFN0YXRlVG9Qcm9wcyB8fCBDb21wb25lbnQucHJvdG90eXBlLm1hcFN0YXRlVG9Qcm9wcyB8fCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzO1xuICAgIGNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IF9tYXBEaXNwYXRjaFRvUHJvcHMgfHwgQ29tcG9uZW50LnByb3RvdHlwZS5tYXBEaXNwYXRjaFRvUHJvcHMgfHwgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcztcbiAgICBjb25zdCBtZXJnZVByb3BzID0gX21lcmdlUHJvcHMgfHwgQ29tcG9uZW50LnByb3RvdHlwZS5tZXJnZVByb3BzIHx8IGRlZmF1bHRNZXJnZVByb3BzO1xuICAgIGNvbnN0IHN0b3JlID0gb3B0aW9ucy5zdG9yZSB8fCBDb21wb25lbnQucHJvdG90eXBlLnN0b3JlO1xuICAgIGNvbnN0IGNvbXBvbmVudEluaXRpYWxpemUgPSBDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemU7XG4gICAgY29uc3QgY29tcG9uZW50b25SZW5kZXIgPSBDb21wb25lbnQucHJvdG90eXBlLm9uUmVuZGVyO1xuICAgIGNvbnN0IGNvbXBvbmVudE9uRGVzdHJveSA9IENvbXBvbmVudC5wcm90b3R5cGUub25EZXN0cm95O1xuXG4gICAgbGV0IGNvbm5lY3RNaXhpbiA9IF8uZGVmYXVsdHMoe30sIHtcblxuICAgICAgaW5pdGlhbGl6ZShfaW5pdE9wdGlvbnMpIHtcblxuICAgICAgICBjb25zdCBpbml0T3B0aW9ucyA9IF9pbml0T3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBtaXhpbi5pbml0aWFsaXplLmNhbGwodGhpcywge1xuICAgICAgICAgIG1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgICAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICAgICAgbWVyZ2VQcm9wcyxcbiAgICAgICAgICBzdG9yZSxcbiAgICAgICAgICBwcm9wczogaW5pdE9wdGlvbnMucHJvcHNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudEluaXRpYWxpemUpIHtcbiAgICAgICAgICBjb21wb25lbnRJbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIG9uUmVuZGVyKCkge1xuXG4gICAgICAgIG1peGluLm9uUmVuZGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudG9uUmVuZGVyKSB7XG4gICAgICAgICAgY29tcG9uZW50b25SZW5kZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBvbkRlc3Ryb3koKSB7XG5cbiAgICAgICAgbWl4aW4ub25EZXN0cm95LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudE9uRGVzdHJveSkge1xuICAgICAgICAgIGNvbXBvbmVudE9uRGVzdHJveS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgbWl4aW4pO1xuXG4gICAgaWYgKCFpc0Rpc3BsYXlDb21wb25lbnQoQ29tcG9uZW50KSkge1xuICAgICAgY29ubmVjdE1peGluID0gXy5vbWl0KGNvbm5lY3RNaXhpbiwgJ29uUmVuZGVyJylcbiAgICB9XG5cbiAgICByZXR1cm4gQ29tcG9uZW50LmV4dGVuZChjb25uZWN0TWl4aW4pXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJkaXNwYXRjaCIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwicGFyZW50UHJvcHMiLCJfIiwiZXh0ZW5kIiwia2V5IiwidmFsIiwib3B0aW9ucyIsInN0YXRlIiwidW5zZXQiLCJzaWxlbnQiLCJjaGFuZ2VzIiwiY2hhbmdpbmciLCJfY2hhbmdpbmciLCJfcHJldmlvdXNTdGF0ZSIsImNsb25lIiwiY2hhbmdlZCIsImN1cnJlbnQiLCJwcmV2IiwiZWFjaCIsIl92YWwiLCJfa2V5IiwiaXNFcXVhbCIsInB1c2giLCJsZW5ndGgiLCJfcGVuZGluZyIsImkiLCJ0cmlnZ2VyIiwiYXR0ciIsIkNvbXBvbmVudCIsIk1hcmlvbmV0dGUiLCJWaWV3IiwiQmVoYXZpb3IiLCJwcm90b3R5cGUiLCJfb3B0aW9ucyIsIm1hcFN0YXRlIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyIsIm1hcERpc3BhdGNoIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwiZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcyIsIm1lcmdlUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInByb3BzIiwic3RvcmUiLCJ3aW5kb3ciLCJzdG9yZVN0YXRlIiwiZ2V0U3RhdGUiLCJkZWZhdWx0cyIsImdldEluaXRpYWxTdGF0ZSIsImJpbmRTdGF0ZUV2ZW50cyIsImNsZWFyQ2FjaGUiLCJpc0Rpc3BsYXlDb21wb25lbnQiLCJ0cnlTdWJzY3JpYmUiLCJiaW5kIiwic3RhdGVFdmVudHMiLCJiaW5kRXZlbnRzIiwiYmluZEVudGl0eUV2ZW50cyIsInVuYmluZCIsInVuYmluZEV2ZW50cyIsInVuYmluZEVudGl0eUV2ZW50cyIsImZpbmFsTWFwU3RhdGVUb1Byb3BzIiwiY29uZmlndXJlRmluYWxNYXBTdGF0ZSIsImRvU3RhdGVQcm9wc0RlcGVuZE9uT3duUHJvcHMiLCJtYXBwZWRTdGF0ZSIsImlzRmFjdG9yeSIsImlzRnVuY3Rpb24iLCJjb21wdXRlU3RhdGVQcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwiZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMiLCJjb25maWd1cmVGaW5hbE1hcERpc3BhdGNoIiwiZG9EaXNwYXRjaFByb3BzRGVwZW5kT25Pd25Qcm9wcyIsIm1hcHBlZERpc3BhdGNoIiwiY29tcHV0ZURpc3BhdGNoUHJvcHMiLCJuZXh0RGlzcGF0Y2hQcm9wcyIsInVuc3Vic2NyaWJlIiwiaXNTdWJzY3JpYmVkIiwic3Vic2NyaWJlIiwiaGFuZGxlQ2hhbmdlIiwiaGFuZGxlRGlzcGF0Y2hQcm9wcyIsInRyeVVuc3Vic2NyaWJlIiwidW5iaW5kU3RhdGVFdmVudHMiLCJoYXZlSW5pdGlhbFN0YXRlUHJvcHNCZWVuRGV0ZXJtaW5lZCIsImhhdmVJbml0aWFsRGlzcGF0Y2hQcm9wc0JlZW5EZXRlcm1pbmVkIiwidXBkYXRlRGlzcGF0Y2hQcm9wc0lmTmVlZGVkIiwicHJldlN0b3JlU3RhdGUiLCJoYXZlU3RhdGVQcm9wc0NoYW5nZWQiLCJ1cGRhdGVTdGF0ZVByb3BzSWZOZWVkZWQiLCJtZXJnZWRQcm9wcyIsImNvbXBvbmVudERpZFJlY2VpdmVQcm9wcyIsInNldFN0YXRlIiwiX21hcFN0YXRlVG9Qcm9wcyIsIl9tYXBEaXNwYXRjaFRvUHJvcHMiLCJfbWVyZ2VQcm9wcyIsImNvbXBvbmVudEluaXRpYWxpemUiLCJpbml0aWFsaXplIiwiY29tcG9uZW50b25SZW5kZXIiLCJvblJlbmRlciIsImNvbXBvbmVudE9uRGVzdHJveSIsIm9uRGVzdHJveSIsImNvbm5lY3RNaXhpbiIsIl9pbml0T3B0aW9ucyIsImluaXRPcHRpb25zIiwiY2FsbCIsImFwcGx5IiwiYXJndW1lbnRzIiwibWl4aW4iLCJvbWl0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhCQUFlO1NBQVUsRUFBVjtDQUFmOztBQ0FBLGlDQUFlO1NBQWEsRUFBRUEsa0JBQUYsRUFBYjtDQUFmOztBQ0NBLHlCQUFlLFVBQUNDLFVBQUQsRUFBYUMsYUFBYixFQUE0QkMsV0FBNUI7U0FDYkMsRUFBRUMsTUFBRixDQUFT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"}