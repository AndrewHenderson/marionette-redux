{"version":3,"file":"marionette-redux.js","sources":["src/mapStateToProps.js","src/mapDispatchToProps.js","src/mergeProps.js","src/isDisplayComponent.js","src/mixin.js","src/connect.js","src/marionette-redux.js"],"sourcesContent":["export default function mapStateToProps() {\n  return {}\n}\n","export default function mapDispatchToProps(dispatch) {\n  return {\n    dispatch: dispatch\n  }\n}\n","import _ from 'underscore';\nexport default function mergeProps(stateProps, dispatchProps, parentProps) {\n  return _.extend({}, parentProps, stateProps, dispatchProps)\n}\n","import Marionette from 'marionette'\n\nexport default function isDisplayComponent(Component) {\n  if (typeof Component === 'object') {\n    return Component instanceof Marionette.View || Component instanceof Marionette.Behavior\n  }\n  if (typeof Component === 'function') {\n    return Component.prototype instanceof Marionette.View || Component.prototype instanceof Marionette.Behavior\n  }\n  return false\n}\n","import _ from 'underscore';\nimport Marionette from 'marionette'\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport isDisplayComponent from './isDisplayComponent';\n\nconst mixin = {\n\n  initialize(_options) {\n\n    const options = _options || {};\n\n    this.mapState = options.mapStateToProps || this.mapStateToProps || defaultMapStateToProps;\n    this.mapDispatch = options.mapDispatchToProps || this.mapDispatchToProps || defaultMapDispatchToProps;\n    this.mergeProps = options.mergeProps || this.mergeProps || defaultMergeProps;\n    this.props = this.props || {};\n\n    if (options.props) {\n      _.extend(this.props, options.props)\n    }\n\n    this.store = options.store || this.store\n\n    if (!this.store && window && window.store) {\n      this.store = window.store\n    }\n\n    const storeState = this.store.getState();\n    this.state = _.defaults({\n      storeState: storeState\n    }, this.getInitialState());\n\n    this.bindStateEvents();\n    this.clearCache();\n\n    if (!isDisplayComponent(this)) {\n      this.trySubscribe()\n    }\n  },\n\n  getInitialState() {\n    return {}\n  },\n\n  setState(key, val, options) {\n\n    if (key == null) {\n      return this;\n    }\n\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    let state;\n    if (typeof key === 'object') {\n      state = key;\n      options = val;\n    } else {\n      (state = {})[key] = val;\n    }\n\n    options || (options = {});\n\n    // Extract state and options.\n    const unset      = options.unset;\n    const silent     = options.silent;\n    const changes    = [];\n    const changing   = this._changing;\n    this._changing = true;\n\n    if (!changing) {\n      this._previousState = _.clone(this.state);\n      this.changed = {};\n    }\n\n    const current = this.state;\n    const changed = this.changed;\n    const prev    = this._previousState;\n\n    // For each `set` state, update or delete the current value.\n    _.each(state, function(_val, _key) {\n      if (!_.isEqual(current[_key], _val)) {\n        changes.push(_key);\n      }\n      if (!_.isEqual(prev[_key], _val)) {\n        changed[_key] = _val;\n      } else {\n        delete changed[_key];\n      }\n      unset ? delete current[_key] : current[_key] = _val;\n    });\n\n    // Trigger all relevant state changes.\n    if (!silent) {\n      if (changes.length) {\n        this._pending = options;\n      }\n      for (let i = 0; i < changes.length; i++) {\n        this.trigger('change:' + changes[i], this, current[changes[i]], options);\n      }\n    }\n\n    // You might be wondering why there's a `while` loop here. Changes can\n    // be recursively nested within `\"change\"` events.\n    if (changing) {\n      return this;\n    }\n    if (!silent) {\n      while (this._pending) {\n        options = this._pending;\n        this._pending = false;\n        this.trigger('change', this, options);\n      }\n    }\n    this._pending = false;\n    this._changing = false;\n    return this\n  },\n\n  getState(attr) {\n    return this.state[attr]\n  },\n\n  bindStateEvents() {\n    let bind;\n    if (this.stateEvents) {\n      bind = Marionette.bindEvents || Marionette.bindEntityEvents;\n      bind(this, this, this.stateEvents)\n    }\n  },\n\n  unbindStateEvents() {\n    let unbind;\n    if (this.stateEvents) {\n      unbind = Marionette.unbindEvents || Marionette.unbindEntityEvents;\n      unbind(this, this, this.stateEvents)\n    }\n  },\n\n  computeStateProps(store, props) {\n    if (!this.finalMapStateToProps) {\n      return this.configureFinalMapState(store, props)\n    }\n\n    const state = store.getState();\n    const stateProps = this.doStatePropsDependOnOwnProps ?\n      this.finalMapStateToProps(state, props) :\n      this.finalMapStateToProps(state);\n\n    return stateProps\n  },\n\n  configureFinalMapState(store, props) {\n    const mappedState = this.mapState(store.getState(), props);\n    const isFactory = _.isFunction(mappedState);\n\n    this.finalMapStateToProps = isFactory ? mappedState : this.mapState;\n    this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeStateProps(store, props)\n    }\n\n    return mappedState\n  },\n\n  updateStatePropsIfNeeded() {\n    const nextStateProps = this.computeStateProps(this.store, this.props);\n    if (this.stateProps && _.isEqual(nextStateProps, this.stateProps)) {\n      return false\n    }\n\n    this.stateProps = nextStateProps;\n\n    return true\n  },\n\n  computeDispatchProps(store, props) {\n    if (!this.finalMapDispatchToProps) {\n      return this.configureFinalMapDispatch(store, props)\n    }\n\n    const dispatch = store.dispatch;\n    const dispatchProps = this.doDispatchPropsDependOnOwnProps ?\n      this.finalMapDispatchToProps(dispatch, props) :\n      this.finalMapDispatchToProps(dispatch);\n\n    return dispatchProps\n  },\n\n  configureFinalMapDispatch(store, props) {\n    const mappedDispatch = this.mapDispatch(store.dispatch, props);\n    const isFactory = _.isFunction(mappedDispatch);\n\n    this.finalMapDispatchToProps = isFactory ? mappedDispatch : this.mapDispatch;\n    this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeDispatchProps(store, props)\n    }\n\n    return mappedDispatch\n  },\n\n  updateDispatchPropsIfNeeded() {\n    const nextDispatchProps = this.computeDispatchProps(this.store, this.props);\n    if (this.dispatchProps && _.isEqual(nextDispatchProps, this.dispatchProps)) {\n      return false\n    }\n\n    this.dispatchProps = nextDispatchProps;\n\n    return true\n  },\n\n  isSubscribed() {\n    return _.isFunction(this.unsubscribe)\n  },\n\n  trySubscribe() {\n    if (!this.isSubscribed()) {\n      this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));\n      this.handleDispatchProps();\n      this.handleChange()\n    }\n  },\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null\n    }\n  },\n\n  onRender() {\n    this.trySubscribe()\n  },\n\n  onDestroy() {\n    this.tryUnsubscribe();\n    this.unbindStateEvents();\n    this.clearCache()\n  },\n\n  clearCache() {\n    this.dispatchProps = null;\n    this.stateProps = null;\n    this.finalMapDispatchToProps = null;\n    this.finalMapStateToProps = null;\n    this.haveInitialStatePropsBeenDetermined = false;\n    this.haveInitialDispatchPropsBeenDetermined = false\n  },\n\n  handleDispatchProps() {\n    if (!this.haveInitialDispatchPropsBeenDetermined) {\n      this.updateDispatchPropsIfNeeded();\n      this.haveInitialDispatchPropsBeenDetermined = true\n    }\n  },\n\n  handleChange() {\n    if (!this.unsubscribe) {\n      return\n    }\n\n    const storeState = this.store.getState();\n    const prevStoreState = this.getState('storeState');\n    if (this.haveInitialStatePropsBeenDetermined && _.isEqual(prevStoreState, storeState)) {\n      return\n    }\n\n    const haveStatePropsChanged = this.updateStatePropsIfNeeded();\n    this.haveInitialStatePropsBeenDetermined = true;\n\n    if (haveStatePropsChanged) {\n\n      const mergedProps = this.mergeProps(this.stateProps, this.dispatchProps, this.props);\n      this.props = mergedProps;\n\n      _.isFunction(this.componentDidReceiveProps) && this.componentDidReceiveProps(mergedProps)\n    }\n\n    this.setState({\n      storeState\n    })\n  }\n};\n\nexport default mixin;\n","import _ from 'underscore';\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport mixin from './mixin'\nimport isDisplayComponent from './isDisplayComponent';\n\nexport default function connect(_mapStateToProps, _mapDispatchToProps, _mergeProps, _options) {\n\n  const options = _options || {};\n\n  return function(Component) {\n\n    const mapStateToProps = _mapStateToProps || Component.prototype.mapStateToProps || defaultMapStateToProps;\n    const mapDispatchToProps = _mapDispatchToProps || Component.prototype.mapDispatchToProps || defaultMapDispatchToProps;\n    const mergeProps = _mergeProps || Component.prototype.mergeProps || defaultMergeProps;\n    const store = options.store || Component.prototype.store;\n    const componentInitialize = Component.prototype.initialize;\n    const componentonRender = Component.prototype.onRender;\n    const componentOnDestroy = Component.prototype.onDestroy;\n\n    let connectMixin = _.defaults({}, {\n\n      initialize(_initOptions) {\n\n        const initOptions = _initOptions || {};\n\n        mixin.initialize.call(this, {\n          mapStateToProps,\n          mapDispatchToProps,\n          mergeProps,\n          store,\n          props: initOptions.props\n        });\n\n        if (componentInitialize) {\n          componentInitialize.apply(this, arguments);\n        }\n      },\n\n      onRender() {\n\n        mixin.onRender.apply(this, arguments);\n\n        if (componentonRender) {\n          componentonRender.apply(this, arguments)\n        }\n      },\n\n      onDestroy() {\n\n        mixin.onDestroy.apply(this, arguments);\n\n        if (componentOnDestroy) {\n          componentOnDestroy.apply(this, arguments);\n        }\n      }\n    }, mixin);\n\n    if (!isDisplayComponent(Component)) {\n      connectMixin = _.omit(connectMixin, 'onRender')\n    }\n\n    return Component.extend(connectMixin)\n  }\n}\n","import connect from './connect'\nimport mixin from './mixin'\nimport { version as VERSION } from '../package.json'\n\nconst MarionetteRedux = {\n  connect,\n  mixin,\n  VERSION\n}\n\nexport default MarionetteRedux\n"],"names":["mapStateToProps","mapDispatchToProps","dispatch","mergeProps","stateProps","dispatchProps","parentProps","_","extend","isDisplayComponent","Component","Marionette","View","Behavior","prototype","mixin","_options","options","mapState","defaultMapStateToProps","mapDispatch","defaultMapDispatchToProps","defaultMergeProps","props","store","window","storeState","getState","state","defaults","getInitialState","bindStateEvents","clearCache","trySubscribe","key","val","unset","silent","changes","changing","_changing","_previousState","clone","changed","current","prev","each","_val","_key","isEqual","push","length","_pending","i","trigger","attr","bind","stateEvents","bindEvents","bindEntityEvents","unbind","unbindEvents","unbindEntityEvents","finalMapStateToProps","configureFinalMapState","doStatePropsDependOnOwnProps","mappedState","isFactory","isFunction","computeStateProps","nextStateProps","finalMapDispatchToProps","configureFinalMapDispatch","doDispatchPropsDependOnOwnProps","mappedDispatch","computeDispatchProps","nextDispatchProps","unsubscribe","isSubscribed","subscribe","handleChange","handleDispatchProps","tryUnsubscribe","unbindStateEvents","haveInitialStatePropsBeenDetermined","haveInitialDispatchPropsBeenDetermined","updateDispatchPropsIfNeeded","prevStoreState","haveStatePropsChanged","updateStatePropsIfNeeded","mergedProps","componentDidReceiveProps","setState","connect","_mapStateToProps","_mapDispatchToProps","_mergeProps","componentInitialize","initialize","componentonRender","onRender","componentOnDestroy","onDestroy","connectMixin","_initOptions","initOptions","call","apply","arguments","omit","MarionetteRedux"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}