{"version":3,"file":"marionette-redux.js","sources":["src/mapStateToProps.js","src/mapDispatchToProps.js","src/mergeProps.js","src/setState.js","src/getState.js","src/mixin.js","src/connect.js"],"sourcesContent":["export default state => ({})\n","export default dispatch => ({ dispatch })\n","import _ from 'underscore';\nexport default (stateProps, dispatchProps, parentProps) => (\n  _.extend({}, parentProps, stateProps, dispatchProps)\n)\n","import _ from 'underscore';\n\nexport default function(key, val, options) {\n\n  if (key == null) {\n    return this;\n  }\n\n  // Handle both `\"key\", value` and `{key: value}` -style arguments.\n  let state;\n  if (typeof key === 'object') {\n    state = key;\n    options = val;\n  } else {\n    (state = {})[key] = val;\n  }\n\n  options || (options = {});\n\n  // Extract state and options.\n  const unset      = options.unset;\n  const silent     = options.silent;\n  const changes    = [];\n  const changing   = this._changing;\n  this._changing = true;\n\n  if (!changing) {\n    this._previousState = _.clone(this.state);\n    this.changed = {};\n  }\n\n  const current = this.state;\n  const changed = this.changed;\n  const prev    = this._previousState;\n\n  // For each `set` state, update or delete the current value.\n  _.each(state, function(_val, _key) {\n    if (!_.isEqual(current[_key], _val)) {\n      changes.push(_key);\n    }\n    if (!_.isEqual(prev[_key], _val)) {\n      changed[_key] = _val;\n    } else {\n      delete changed[_key];\n    }\n    unset ? delete current[_key] : current[_key] = _val;\n  });\n\n  // Trigger all relevant state changes.\n  if (!silent) {\n    if (changes.length) {\n      this._pending = options;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      this.trigger('change:' + changes[i], this, current[changes[i]], options);\n    }\n  }\n\n  // You might be wondering why there's a `while` loop here. Changes can\n  // be recursively nested within `\"change\"` events.\n  if (changing) {\n    return this;\n  }\n  if (!silent) {\n    while (this._pending) {\n      options = this._pending;\n      this._pending = false;\n      this.trigger('change', this, options);\n    }\n  }\n  this._pending = false;\n  this._changing = false;\n  return this\n}\n","export default function(attr) {\n  return this.state[attr];\n}\n","import _ from 'underscore';\nimport Marionette from 'marionette'\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport setState from './setState'\nimport getState from './getState'\n\nexport default {\n\n  initialize(_options) {\n\n    const options = _options || {};\n\n    this.mapState = options.mapStateToProps || this.mapStateToProps || defaultMapStateToProps;\n    this.mapDispatch = options.mapDispatchToProps || this.mapDispatchToProps || defaultMapDispatchToProps;\n    this.mergeProps = options.mergeProps || this.mergeProps || defaultMergeProps;\n    this.props = this.props || {};\n    if (options.props) {\n      _.extend(this.props, options.props)\n    }\n    this.store = options.store || this.store;\n    if (!this.store && window && window.store) {\n      this.store = window.store\n    }\n    const storeState = this.store.getState();\n    this.state = _.defaults({\n      storeState: storeState\n    }, this.state);\n    this.bindStateEvents();\n    this.clearCache();\n    if (!(this instanceof Marionette.View) && !(this instanceof Marionette.Behavior)) {\n      this.trySubscribe()\n    }\n  },\n\n  setState,\n\n  getState,\n\n  bindStateEvents() {\n    let bind;\n    if (this.stateEvents) {\n      bind = Marionette.bindEvents || Marionette.bindEntityEvents;\n      bind(this, this, this.stateEvents)\n    }\n  },\n\n  unbindStateEvents() {\n    let unbind;\n    if (this.stateEvents) {\n      unbind = Marionette.unbindEvents || Marionette.unbindEntityEvents;\n      unbind(this, this, this.stateEvents)\n    }\n  },\n\n  computeStateProps(store, props) {\n    if (!this.finalMapStateToProps) {\n      return this.configureFinalMapState(store, props)\n    }\n\n    const state = store.getState();\n    const stateProps = this.doStatePropsDependOnOwnProps ?\n      this.finalMapStateToProps(state, props) :\n      this.finalMapStateToProps(state);\n\n    return stateProps\n  },\n\n  configureFinalMapState(store, props) {\n    const mappedState = this.mapState(store.getState(), props);\n    const isFactory = _.isFunction(mappedState);\n\n    this.finalMapStateToProps = isFactory ? mappedState : this.mapState;\n    this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeStateProps(store, props)\n    }\n\n    return mappedState\n  },\n\n  updateStatePropsIfNeeded() {\n    const nextStateProps = this.computeStateProps(this.store, this.props);\n    if (this.stateProps && _.isEqual(nextStateProps, this.stateProps)) {\n      return false\n    }\n\n    this.stateProps = nextStateProps;\n\n    return true\n  },\n\n  computeDispatchProps(store, props) {\n    if (!this.finalMapDispatchToProps) {\n      return this.configureFinalMapDispatch(store, props)\n    }\n\n    const dispatch = store.dispatch;\n    const dispatchProps = this.doDispatchPropsDependOnOwnProps ?\n      this.finalMapDispatchToProps(dispatch, props) :\n      this.finalMapDispatchToProps(dispatch);\n\n    return dispatchProps\n  },\n\n  configureFinalMapDispatch(store, props) {\n    const mappedDispatch = this.mapDispatch(store.dispatch, props);\n    const isFactory = _.isFunction(mappedDispatch);\n\n    this.finalMapDispatchToProps = isFactory ? mappedDispatch : this.mapDispatch;\n    this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeDispatchProps(store, props)\n    }\n\n    return mappedDispatch\n  },\n\n  updateDispatchPropsIfNeeded() {\n    const nextDispatchProps = this.computeDispatchProps(this.store, this.props);\n    if (this.dispatchProps && _.isEqual(nextDispatchProps, this.dispatchProps)) {\n      return false\n    }\n\n    this.dispatchProps = nextDispatchProps;\n\n    return true\n  },\n\n  isSubscribed() {\n    return _.isFunction(this.unsubscribe)\n  },\n\n  trySubscribe() {\n    if (!this.isSubscribed()) {\n      this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));\n      this.handleDispatchProps();\n      this.handleChange()\n    }\n  },\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null\n    }\n  },\n\n  onRender() {\n    this.trySubscribe()\n  },\n\n  onDestroy() {\n    this.tryUnsubscribe();\n    this.unbindStateEvents();\n    this.clearCache()\n  },\n\n  clearCache() {\n    this.dispatchProps = null;\n    this.stateProps = null;\n    this.finalMapDispatchToProps = null;\n    this.finalMapStateToProps = null;\n    this.haveInitialStatePropsBeenDetermined = false;\n    this.haveInitialDispatchPropsBeenDetermined = false\n  },\n\n  handleDispatchProps() {\n    if (!this.haveInitialDispatchPropsBeenDetermined) {\n      this.updateDispatchPropsIfNeeded();\n      this.haveInitialDispatchPropsBeenDetermined = true\n    }\n  },\n\n  handleChange() {\n    if (!this.unsubscribe) {\n      return\n    }\n\n    const storeState = this.store.getState();\n    const prevStoreState = this.getState('storeState');\n    if (this.haveInitialStatePropsBeenDetermined && _.isEqual(prevStoreState, storeState)) {\n      return\n    }\n\n    const haveStatePropsChanged = this.updateStatePropsIfNeeded();\n    this.haveInitialStatePropsBeenDetermined = true;\n\n    if (haveStatePropsChanged) {\n\n      const mergedProps = this.mergeProps(this.stateProps, this.dispatchProps, this.props);\n      this.props = mergedProps;\n\n      _.isFunction(this.componentDidReceiveProps) && this.componentDidReceiveProps(mergedProps)\n    }\n\n    this.setState({\n      storeState\n    })\n  }\n};\n","import _ from 'underscore';\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport mixin from './mixin'\n\nexport default (_mapStateToProps, _mapDispatchToProps, _mergeProps, _options) => {\n\n  const options = _options || {};\n\n  return function(Component) {\n\n    const mapStateToProps = _mapStateToProps || Component.prototype.mapStateToProps || defaultMapStateToProps;\n    const mapDispatchToProps = _mapDispatchToProps || Component.prototype.mapDispatchToProps || defaultMapDispatchToProps;\n    const mergeProps = _mergeProps || Component.prototype.mergeProps || defaultMergeProps;\n    const store = options.store || Component.prototype.store;\n    const componentInitialize = Component.prototype.initialize;\n    const componentonRender = Component.prototype.onRender;\n    const componentOnDestroy = Component.prototype.onDestroy;\n\n    const connectMixin = _.defaults({}, {\n\n      initialize(_initOptions) {\n\n        const initOptions = _initOptions || {};\n\n        mixin.initialize.call(this, {\n          mapStateToProps,\n          mapDispatchToProps,\n          mergeProps,\n          store,\n          props: initOptions.props\n        });\n\n        if (componentInitialize) {\n          componentInitialize.apply(this, arguments);\n        }\n      },\n\n      onRender() {\n\n        mixin.onRender.apply(this, arguments);\n\n        if (componentonRender) {\n          componentonRender.apply(this, arguments)\n        }\n      },\n\n      onDestroy() {\n\n        mixin.onDestroy.apply(this, arguments);\n\n        if (componentOnDestroy) {\n          componentOnDestroy.apply(this, arguments);\n        }\n      }\n    }, mixin);\n\n    return Component.extend(connectMixin)\n  }\n}\n"],"names":["dispatch","stateProps","dispatchProps","parentProps","_","extend","key","val","options","state","unset","silent","changes","changing","_changing","_previousState","clone","changed","current","prev","each","_val","_key","isEqual","push","length","_pending","i","trigger","attr","_options","mapState","mapStateToProps","defaultMapStateToProps","mapDispatch","mapDispatchToProps","defaultMapDispatchToProps","mergeProps","defaultMergeProps","props","store","window","storeState","getState","defaults","bindStateEvents","clearCache","Marionette","View","Behavior","trySubscribe","bind","stateEvents","bindEvents","bindEntityEvents","unbind","unbindEvents","unbindEntityEvents","finalMapStateToProps","configureFinalMapState","doStatePropsDependOnOwnProps","mappedState","isFactory","isFunction","computeStateProps","nextStateProps","finalMapDispatchToProps","configureFinalMapDispatch","doDispatchPropsDependOnOwnProps","mappedDispatch","computeDispatchProps","nextDispatchProps","unsubscribe","isSubscribed","subscribe","handleChange","handleDispatchProps","tryUnsubscribe","unbindStateEvents","haveInitialStatePropsBeenDetermined","haveInitialDispatchPropsBeenDetermined","updateDispatchPropsIfNeeded","prevStoreState","haveStatePropsChanged","updateStatePropsIfNeeded","mergedProps","componentDidReceiveProps","setState","_mapStateToProps","_mapDispatchToProps","_mergeProps","Component","prototype","componentInitialize","initialize","componentonRender","onRender","componentOnDestroy","onDestroy","connectMixin","_initOptions","initOptions","call","apply","arguments","mixin"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}