// Marionette Redux
// ----------------------------------
// v1.0.0
//
// Copyright (c)2016 Andrew Henderson.
// Distributed under MIT license


(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('underscore'), require('marionette')) :
  typeof define === 'function' && define.amd ? define(['exports', 'underscore', 'marionette'], factory) :
  (factory((global.MarionetteRedux = global.MarionetteRedux || {}),global._,global.Marionette));
}(this, (function (exports,_,Marionette) { 'use strict';

_ = 'default' in _ ? _['default'] : _;
Marionette = 'default' in Marionette ? Marionette['default'] : Marionette;

var defaultMapStateToProps = (function (state) {
  return {};
});

var defaultMapDispatchToProps = (function (dispatch) {
  return { dispatch: dispatch };
});

var defaultMergeProps = (function (stateProps, dispatchProps, parentProps) {
  return _.extend({}, parentProps, stateProps, dispatchProps);
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var setState = function (key, val, options) {

  if (key == null) {
    return this;
  }

  // Handle both `"key", value` and `{key: value}` -style arguments.
  var state = void 0;
  if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object') {
    state = key;
    options = val;
  } else {
    (state = {})[key] = val;
  }

  options || (options = {});

  // Extract state and options.
  var unset = options.unset;
  var silent = options.silent;
  var changes = [];
  var changing = this._changing;
  this._changing = true;

  if (!changing) {
    this._previousState = _.clone(this.state);
    this.changed = {};
  }

  var current = this.state;
  var changed = this.changed;
  var prev = this._previousState;

  // For each `set` state, update or delete the current value.
  _.each(state, function (_val, _key) {
    if (!_.isEqual(current[_key], _val)) {
      changes.push(_key);
    }
    if (!_.isEqual(prev[_key], _val)) {
      changed[_key] = _val;
    } else {
      delete changed[_key];
    }
    unset ? delete current[_key] : current[_key] = _val;
  });

  // Trigger all relevant state changes.
  if (!silent) {
    if (changes.length) {
      this._pending = options;
    }
    for (var i = 0; i < changes.length; i++) {
      this.trigger('change:' + changes[i], this, current[changes[i]], options);
    }
  }

  // You might be wondering why there's a `while` loop here. Changes can
  // be recursively nested within `"change"` events.
  if (changing) {
    return this;
  }
  if (!silent) {
    while (this._pending) {
      options = this._pending;
      this._pending = false;
      this.trigger('change', this, options);
    }
  }
  this._pending = false;
  this._changing = false;
  return this;
};

var getState = function (attr) {
  return this.state[attr];
};

var mixin = {
  initialize: function initialize(_options) {

    var options = _options || {};

    this.mapState = options.mapStateToProps || this.mapStateToProps || defaultMapStateToProps;
    this.mapDispatch = options.mapDispatchToProps || this.mapDispatchToProps || defaultMapDispatchToProps;
    this.props = this.props || {};
    this.store = options.store || this.store;
    var storeState = this.store.getState();
    this.state = _.defaults({
      storeState: storeState
    }, this.state);
    this.bindStateEvents();
    this.clearCache();
    this.trySubscribe();
  },


  setState: setState,

  getState: getState,

  bindStateEvents: function bindStateEvents() {
    if (this.stateEvents) {
      Marionette.bindEvents(this, this, this.stateEvents);
    }
  },
  unbindStateEvents: function unbindStateEvents() {
    if (this.stateEvents) {
      Marionette.unbindEvents(this, this, this.stateEvents);
    }
  },
  computeStateProps: function computeStateProps(store, props) {
    if (!this.finalMapStateToProps) {
      return this.configureFinalMapState(store, props);
    }

    var state = store.getState();
    var stateProps = this.doStatePropsDependOnOwnProps ? this.finalMapStateToProps(state, props) : this.finalMapStateToProps(state);

    return stateProps;
  },
  configureFinalMapState: function configureFinalMapState(store, props) {
    var mappedState = this.mapState(store.getState(), props);
    var isFactory = _.isFunction(mappedState);

    this.finalMapStateToProps = isFactory ? mappedState : this.mapState;
    this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;

    if (isFactory) {
      return this.computeStateProps(store, props);
    }

    return mappedState;
  },
  updateStatePropsIfNeeded: function updateStatePropsIfNeeded() {
    var nextStateProps = this.computeStateProps(this.store, this.props);
    if (this.stateProps && _.isEqual(nextStateProps, this.stateProps)) {
      return false;
    }

    this.stateProps = nextStateProps;

    return true;
  },
  computeDispatchProps: function computeDispatchProps(store, props) {
    if (!this.finalMapDispatchToProps) {
      return this.configureFinalMapDispatch(store, props);
    }

    var dispatch = store.dispatch;
    var dispatchProps = this.doDispatchPropsDependOnOwnProps ? this.finalMapDispatchToProps(dispatch, props) : this.finalMapDispatchToProps(dispatch);

    return dispatchProps;
  },
  configureFinalMapDispatch: function configureFinalMapDispatch(store, props) {
    var mappedDispatch = this.mapDispatch(store.dispatch, props);
    var isFactory = _.isFunction(mappedDispatch);

    this.finalMapDispatchToProps = isFactory ? mappedDispatch : this.mapDispatch;
    this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;

    if (isFactory) {
      return this.computeDispatchProps(store, props);
    }

    return mappedDispatch;
  },
  updateDispatchPropsIfNeeded: function updateDispatchPropsIfNeeded() {
    var nextDispatchProps = this.computeDispatchProps(this.store, this.props);
    if (this.dispatchProps && _.isEqual(nextDispatchProps, this.dispatchProps)) {
      return false;
    }

    this.dispatchProps = nextDispatchProps;

    return true;
  },
  isSubscribed: function isSubscribed() {
    return _.isFunction(this.unsubscribe);
  },
  trySubscribe: function trySubscribe() {
    if (!this.isSubscribed()) {
      this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
      this.handleDispatchProps();
      this.handleChange();
    }
  },
  tryUnsubscribe: function tryUnsubscribe() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
    }
  },
  onDestroy: function onDestroy() {
    this.tryUnsubscribe();
    this.unbindStateEvents();
    this.clearCache();
  },
  clearCache: function clearCache() {
    this.dispatchProps = null;
    this.stateProps = null;
    this.finalMapDispatchToProps = null;
    this.finalMapStateToProps = null;
    this.haveInitialStatePropsBeenDetermined = false;
    this.haveInitialDispatchPropsBeenDetermined = false;
  },
  handleDispatchProps: function handleDispatchProps() {
    if (!this.haveInitialDispatchPropsBeenDetermined) {
      this.updateDispatchPropsIfNeeded();
      this.haveInitialDispatchPropsBeenDetermined = true;
    }
  },
  handleChange: function handleChange() {
    if (!this.unsubscribe) {
      return;
    }

    var storeState = this.store.getState();
    var prevStoreState = this.getState('storeState');
    if (this.haveInitialStatePropsBeenDetermined && _.isEqual(prevStoreState, storeState)) {
      return;
    }

    var haveStatePropsChanged = this.updateStatePropsIfNeeded();
    this.haveInitialStatePropsBeenDetermined = true;

    if (haveStatePropsChanged) {

      var mergedProps = defaultMergeProps(this.stateProps, this.dispatchProps, this.props);
      this.props = mergedProps;

      _.isFunction(this.componentDidReceiveProps) && this.componentDidReceiveProps(mergedProps);
    }

    this.setState({
      storeState: storeState
    });
  }
};

var connect = (function (_mapStateToProps, _mapDispatchToProps, _options) {

  var options = _options || {};

  return function (Component) {

    var mapStateToProps = _mapStateToProps || Component.prototype.mapStateToProps || defaultMapStateToProps;
    var mapDispatchToProps = _mapDispatchToProps || Component.prototype.mapDispatchToProps || defaultMapDispatchToProps;
    var store = options.store || Component.prototype.store;
    var componentInitialize = Component.prototype.initialize;
    var componentOnDestroy = Component.prototype.onDestroy;

    var connectMixin = _.defaults({}, {
      initialize: function initialize(initOptions) {

        mixin.initialize.call(this, {
          mapStateToProps: mapStateToProps,
          mapDispatchToProps: mapDispatchToProps,
          store: store
        });

        if (componentInitialize) {
          componentInitialize.call(this, initOptions);
        }
      },
      onDestroy: function onDestroy() {

        mixin.onDestroy.call(this);

        if (componentOnDestroy) {
          componentOnDestroy.call(this);
        }
      }
    }, mixin);

    return Component.extend(connectMixin);
  };
});

exports.connect = connect;
exports.mixin = mixin;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,