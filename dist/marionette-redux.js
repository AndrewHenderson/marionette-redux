// Marionette Redux
// ----------------------------------
// v0.3.0
//
// Copyright (c)2017 Andrew Henderson.
// Distributed under MIT license


(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('underscore'), require('marionette')) :
	typeof define === 'function' && define.amd ? define(['underscore', 'marionette'], factory) :
	(global.MarionetteRedux = factory(global._,global.Marionette));
}(this, (function (underscore,marionette) { 'use strict';

function mapStateToProps() {
  return {};
}

function mapDispatchToProps(dispatch) {
  return {
    dispatch: dispatch
  };
}

function mergeProps(stateProps, dispatchProps, parentProps) {
  return underscore.extend({}, parentProps, stateProps, dispatchProps);
}

function isDisplayComponent(Component) {
  if (underscore.isFunction(Component)) {
    return Component.prototype instanceof marionette.View || Component.prototype instanceof marionette.Behavior;
  }
  if (underscore.isObject(Component)) {
    return Component instanceof marionette.View || Component instanceof marionette.Behavior;
  }
  return false;
}

var mixin = {
  initialize: function initialize(_options) {

    var options = _options || {};

    this.mapState = options.mapStateToProps || this.mapStateToProps || mapStateToProps;
    this.mapDispatch = options.mapDispatchToProps || this.mapDispatchToProps || mapDispatchToProps;
    this.mergeProps = options.mergeProps || this.mergeProps || mergeProps;
    this.props = this.props || {};

    if (options.props) {
      underscore.extend(this.props, options.props);
    }

    this.store = options.store || this.store;

    if (!this.store && window && window.store) {
      this.store = window.store;
    }

    var storeState = this.store.getState();
    this.state = underscore.defaults({
      storeState: storeState
    }, this.getInitialState());

    this.bindStateEvents();
    this.clearCache();

    if (!isDisplayComponent(this)) {
      this.trySubscribe();
    }
  },
  getInitialState: function getInitialState() {
    return {};
  },
  setState: function setState(key, val, options) {

    if (key == null) {
      return this;
    }

    // Handle both `"key", value` and `{key: value}` -style arguments.
    var state = void 0;
    if (underscore.isObject(key)) {
      state = key;
      options = val;
    } else {
      (state = {})[key] = val;
    }

    options || (options = {});

    // Extract state and options.
    var unset = options.unset;
    var silent = options.silent;
    var changes = [];
    var changing = this._changing;
    this._changing = true;

    if (!changing) {
      this._previousState = underscore.clone(this.state);
      this.changed = {};
    }

    var current = this.state;
    var changed = this.changed;
    var prev = this._previousState;

    // For each `set` state, update or delete the current value.
    underscore.each(state, function (_val, _key) {
      if (!underscore.isEqual(current[_key], _val)) {
        changes.push(_key);
      }
      if (!underscore.isEqual(prev[_key], _val)) {
        changed[_key] = _val;
      } else {
        delete changed[_key];
      }
      unset ? delete current[_key] : current[_key] = _val;
    });

    // Trigger all relevant state changes.
    if (!silent) {
      if (changes.length) {
        this._pending = options;
      }
      for (var i = 0; i < changes.length; i++) {
        this.trigger('change:' + changes[i], this, current[changes[i]], options);
      }
    }

    // You might be wondering why there's a `while` loop here. Changes can
    // be recursively nested within `"change"` events.
    if (changing) {
      return this;
    }
    if (!silent) {
      while (this._pending) {
        options = this._pending;
        this._pending = false;
        this.trigger('change', this, options);
        if (isDisplayComponent(this) && this.triggerDomRefresh !== false) {
          this.triggerMethod('dom:refresh');
        }
      }
    }
    this._pending = false;
    this._changing = false;
    return this;
  },
  getState: function getState(attr) {
    return this.state[attr];
  },
  bindStateEvents: function bindStateEvents() {
    var bind = marionette.bindEvents || marionette.bindEntityEvents;
    if (this.stateEvents) {
      bind(this, this, this.stateEvents);
    }
  },
  unbindStateEvents: function unbindStateEvents() {
    var unbind = marionette.unbindEvents || marionette.unbindEntityEvents;
    if (this.stateEvents) {
      unbind(this, this, this.stateEvents);
    }
  },
  computeStateProps: function computeStateProps(store, props) {
    if (!this.finalMapStateToProps) {
      return this.configureFinalMapState(store, props);
    }

    var state = store.getState();
    var stateProps = this.doStatePropsDependOnOwnProps ? this.finalMapStateToProps(state, props) : this.finalMapStateToProps(state);

    return stateProps;
  },
  configureFinalMapState: function configureFinalMapState(store, props) {
    var mappedState = this.mapState(store.getState(), props);
    var isFactory = underscore.isFunction(mappedState);

    this.finalMapStateToProps = isFactory ? mappedState : this.mapState;
    this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;

    if (isFactory) {
      return this.computeStateProps(store, props);
    }

    return mappedState;
  },
  updateStatePropsIfNeeded: function updateStatePropsIfNeeded() {
    var nextStateProps = this.computeStateProps(this.store, this.props);
    if (this.stateProps && underscore.isEqual(nextStateProps, this.stateProps)) {
      return false;
    }

    this.stateProps = nextStateProps;

    return true;
  },
  computeDispatchProps: function computeDispatchProps(store, props) {
    if (!this.finalMapDispatchToProps) {
      return this.configureFinalMapDispatch(store, props);
    }

    var dispatch = store.dispatch;
    var dispatchProps = this.doDispatchPropsDependOnOwnProps ? this.finalMapDispatchToProps(dispatch, props) : this.finalMapDispatchToProps(dispatch);

    return dispatchProps;
  },
  configureFinalMapDispatch: function configureFinalMapDispatch(store, props) {
    var mappedDispatch = this.mapDispatch(store.dispatch, props);
    var isFactory = underscore.isFunction(mappedDispatch);

    this.finalMapDispatchToProps = isFactory ? mappedDispatch : this.mapDispatch;
    this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;

    if (isFactory) {
      return this.computeDispatchProps(store, props);
    }

    return mappedDispatch;
  },
  updateDispatchPropsIfNeeded: function updateDispatchPropsIfNeeded() {
    var nextDispatchProps = this.computeDispatchProps(this.store, this.props);
    if (this.dispatchProps && underscore.isEqual(nextDispatchProps, this.dispatchProps)) {
      return false;
    }

    this.dispatchProps = nextDispatchProps;

    return true;
  },
  isSubscribed: function isSubscribed() {
    return underscore.isFunction(this.unsubscribe);
  },
  trySubscribe: function trySubscribe() {
    if (!this.isSubscribed()) {
      this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
      this.handleDispatchProps();
      this.handleChange();
    }
  },
  tryUnsubscribe: function tryUnsubscribe() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
    }
  },
  onRender: function onRender() {
    this.trySubscribe();
  },
  onDestroy: function onDestroy() {
    this.tryUnsubscribe();
    this.unbindStateEvents();
    this.clearCache();
  },
  clearCache: function clearCache() {
    this.dispatchProps = null;
    this.stateProps = null;
    this.finalMapDispatchToProps = null;
    this.finalMapStateToProps = null;
    this.haveInitialStatePropsBeenDetermined = false;
    this.haveInitialDispatchPropsBeenDetermined = false;
  },
  handleDispatchProps: function handleDispatchProps() {
    if (!this.haveInitialDispatchPropsBeenDetermined) {
      this.updateDispatchPropsIfNeeded();
      this.haveInitialDispatchPropsBeenDetermined = true;
    }
  },
  handleChange: function handleChange() {
    if (!this.unsubscribe) {
      return;
    }

    var storeState = this.store.getState();
    var prevStoreState = this.getState('storeState');
    if (this.haveInitialStatePropsBeenDetermined && underscore.isEqual(prevStoreState, storeState)) {
      return;
    }

    var haveStatePropsChanged = this.updateStatePropsIfNeeded();
    this.haveInitialStatePropsBeenDetermined = true;

    if (haveStatePropsChanged) {

      var mergedProps = this.mergeProps(this.stateProps, this.dispatchProps, this.props);
      this.props = mergedProps;

      underscore.isFunction(this.componentWillReceiveProps) && this.componentWillReceiveProps(mergedProps);

      if (isDisplayComponent(this) && this.triggerDomRefresh !== false) {
        this.triggerMethod('dom:refresh');
      }
    }

    this.setState({
      storeState: storeState
    });
  }
};

function connect(_mapStateToProps, _mapDispatchToProps, _mergeProps, _options) {

  var options = _options || {};

  return function (Component) {

    var mapStateToProps$$1 = _mapStateToProps || Component.prototype.mapStateToProps || mapStateToProps;
    var mapDispatchToProps$$1 = _mapDispatchToProps || Component.prototype.mapDispatchToProps || mapDispatchToProps;
    var mergeProps$$1 = _mergeProps || Component.prototype.mergeProps || mergeProps;
    var store = options.store || Component.prototype.store;
    var componentInitialize = Component.prototype.initialize;
    var componentOnRender = Component.prototype.onRender;
    var componentOnDestroy = Component.prototype.onDestroy;

    var connectMixin = underscore.defaults({}, {
      initialize: function initialize(_initOptions) {

        var initOptions = _initOptions || {};

        mixin.initialize.call(this, {
          mapStateToProps: mapStateToProps$$1,
          mapDispatchToProps: mapDispatchToProps$$1,
          mergeProps: mergeProps$$1,
          store: store,
          props: initOptions.props
        });

        if (componentInitialize) {
          componentInitialize.apply(this, arguments);
        }
      },
      onRender: function onRender() {

        mixin.onRender.apply(this, arguments);

        if (componentOnRender) {
          componentOnRender.apply(this, arguments);
        }
      },
      onDestroy: function onDestroy() {

        mixin.onDestroy.apply(this, arguments);

        if (componentOnDestroy) {
          componentOnDestroy.apply(this, arguments);
        }
      }
    }, mixin);

    if (!isDisplayComponent(Component)) {
      connectMixin = underscore.omit(connectMixin, 'onRender');
    }

    return Component.extend(connectMixin);
  };
}

var version = "0.3.0";

var MarionetteRedux = {
  connect: connect,
  mixin: mixin,
  VERSION: version
};

return MarionetteRedux;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdoZW5kZXJzb24vbWFyaW9uZXR0ZS1yZWR1eC9zcmMvbWFwU3RhdGVUb1Byb3BzLmpzIiwiL1VzZXJzL2FuZHJld2hlbmRlcnNvbi9tYXJpb25ldHRlLXJlZHV4L3NyYy9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL21lcmdlUHJvcHMuanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL2lzRGlzcGxheUNvbXBvbmVudC5qcyIsIi9Vc2Vycy9hbmRyZXdoZW5kZXJzb24vbWFyaW9uZXR0ZS1yZWR1eC9zcmMvbWl4aW4uanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL2Nvbm5lY3QuanMiLCIvVXNlcnMvYW5kcmV3aGVuZGVyc29uL21hcmlvbmV0dGUtcmVkdXgvc3JjL21hcmlvbmV0dGUtcmVkdXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKCkge1xuICByZXR1cm4ge31cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICB9XG59XG4iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICd1bmRlcnNjb3JlJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgcGFyZW50UHJvcHMpIHtcbiAgcmV0dXJuIGV4dGVuZCh7fSwgcGFyZW50UHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpXG59XG4iLCJpbXBvcnQgeyBpc09iamVjdCwgaXNGdW5jdGlvbiB9IGZyb20gJ3VuZGVyc2NvcmUnXG5pbXBvcnQgeyBWaWV3LCBCZWhhdmlvciB9IGZyb20gJ21hcmlvbmV0dGUnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGlzcGxheUNvbXBvbmVudChDb21wb25lbnQpIHtcbiAgaWYgKGlzRnVuY3Rpb24oQ29tcG9uZW50KSkge1xuICAgIHJldHVybiBDb21wb25lbnQucHJvdG90eXBlIGluc3RhbmNlb2YgVmlldyB8fCBDb21wb25lbnQucHJvdG90eXBlIGluc3RhbmNlb2YgQmVoYXZpb3JcbiAgfVxuICBpZiAoaXNPYmplY3QoQ29tcG9uZW50KSkge1xuICAgIHJldHVybiBDb21wb25lbnQgaW5zdGFuY2VvZiBWaWV3IHx8IENvbXBvbmVudCBpbnN0YW5jZW9mIEJlaGF2aW9yXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG4iLCJpbXBvcnQge1xuICBleHRlbmQsXG4gIGRlZmF1bHRzLFxuICBjbG9uZSxcbiAgZWFjaCxcbiAgaXNFcXVhbCxcbiAgaXNGdW5jdGlvbixcbiAgaXNPYmplY3Rcbn0gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQge1xuICBiaW5kRXZlbnRzLFxuICBiaW5kRW50aXR5RXZlbnRzLFxuICB1bmJpbmRFdmVudHMsXG4gIHVuYmluZEVudGl0eUV2ZW50c1xufSBmcm9tICdtYXJpb25ldHRlJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGlzRGlzcGxheUNvbXBvbmVudCBmcm9tICcuL2lzRGlzcGxheUNvbXBvbmVudCc7XG5cbmNvbnN0IG1peGluID0ge1xuXG4gIGluaXRpYWxpemUoX29wdGlvbnMpIHtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fTtcblxuICAgIHRoaXMubWFwU3RhdGUgPSBvcHRpb25zLm1hcFN0YXRlVG9Qcm9wcyB8fCB0aGlzLm1hcFN0YXRlVG9Qcm9wcyB8fCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzO1xuICAgIHRoaXMubWFwRGlzcGF0Y2ggPSBvcHRpb25zLm1hcERpc3BhdGNoVG9Qcm9wcyB8fCB0aGlzLm1hcERpc3BhdGNoVG9Qcm9wcyB8fCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzO1xuICAgIHRoaXMubWVyZ2VQcm9wcyA9IG9wdGlvbnMubWVyZ2VQcm9wcyB8fCB0aGlzLm1lcmdlUHJvcHMgfHwgZGVmYXVsdE1lcmdlUHJvcHM7XG4gICAgdGhpcy5wcm9wcyA9IHRoaXMucHJvcHMgfHwge307XG5cbiAgICBpZiAob3B0aW9ucy5wcm9wcykge1xuICAgICAgZXh0ZW5kKHRoaXMucHJvcHMsIG9wdGlvbnMucHJvcHMpXG4gICAgfVxuXG4gICAgdGhpcy5zdG9yZSA9IG9wdGlvbnMuc3RvcmUgfHwgdGhpcy5zdG9yZTtcblxuICAgIGlmICghdGhpcy5zdG9yZSAmJiB3aW5kb3cgJiYgd2luZG93LnN0b3JlKSB7XG4gICAgICB0aGlzLnN0b3JlID0gd2luZG93LnN0b3JlXG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnN0YXRlID0gZGVmYXVsdHMoe1xuICAgICAgc3RvcmVTdGF0ZTogc3RvcmVTdGF0ZVxuICAgIH0sIHRoaXMuZ2V0SW5pdGlhbFN0YXRlKCkpO1xuXG4gICAgdGhpcy5iaW5kU3RhdGVFdmVudHMoKTtcbiAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcblxuICAgIGlmICghaXNEaXNwbGF5Q29tcG9uZW50KHRoaXMpKSB7XG4gICAgICB0aGlzLnRyeVN1YnNjcmliZSgpXG4gICAgfVxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge31cbiAgfSxcblxuICBzZXRTdGF0ZShrZXksIHZhbCwgb3B0aW9ucykge1xuXG4gICAgaWYgKGtleSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYm90aCBgXCJrZXlcIiwgdmFsdWVgIGFuZCBge2tleTogdmFsdWV9YCAtc3R5bGUgYXJndW1lbnRzLlxuICAgIGxldCBzdGF0ZTtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgc3RhdGUgPSBrZXk7XG4gICAgICBvcHRpb25zID0gdmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICAoc3RhdGUgPSB7fSlba2V5XSA9IHZhbDtcbiAgICB9XG5cbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuXG4gICAgLy8gRXh0cmFjdCBzdGF0ZSBhbmQgb3B0aW9ucy5cbiAgICBjb25zdCB1bnNldCAgICAgID0gb3B0aW9ucy51bnNldDtcbiAgICBjb25zdCBzaWxlbnQgICAgID0gb3B0aW9ucy5zaWxlbnQ7XG4gICAgY29uc3QgY2hhbmdlcyAgICA9IFtdO1xuICAgIGNvbnN0IGNoYW5naW5nICAgPSB0aGlzLl9jaGFuZ2luZztcbiAgICB0aGlzLl9jaGFuZ2luZyA9IHRydWU7XG5cbiAgICBpZiAoIWNoYW5naW5nKSB7XG4gICAgICB0aGlzLl9wcmV2aW91c1N0YXRlID0gY2xvbmUodGhpcy5zdGF0ZSk7XG4gICAgICB0aGlzLmNoYW5nZWQgPSB7fTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5jaGFuZ2VkO1xuICAgIGNvbnN0IHByZXYgICAgPSB0aGlzLl9wcmV2aW91c1N0YXRlO1xuXG4gICAgLy8gRm9yIGVhY2ggYHNldGAgc3RhdGUsIHVwZGF0ZSBvciBkZWxldGUgdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAgZWFjaChzdGF0ZSwgZnVuY3Rpb24oX3ZhbCwgX2tleSkge1xuICAgICAgaWYgKCFpc0VxdWFsKGN1cnJlbnRbX2tleV0sIF92YWwpKSB7XG4gICAgICAgIGNoYW5nZXMucHVzaChfa2V5KTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNFcXVhbChwcmV2W19rZXldLCBfdmFsKSkge1xuICAgICAgICBjaGFuZ2VkW19rZXldID0gX3ZhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZSBjaGFuZ2VkW19rZXldO1xuICAgICAgfVxuICAgICAgdW5zZXQgPyBkZWxldGUgY3VycmVudFtfa2V5XSA6IGN1cnJlbnRbX2tleV0gPSBfdmFsO1xuICAgIH0pO1xuXG4gICAgLy8gVHJpZ2dlciBhbGwgcmVsZXZhbnQgc3RhdGUgY2hhbmdlcy5cbiAgICBpZiAoIXNpbGVudCkge1xuICAgICAgaWYgKGNoYW5nZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX3BlbmRpbmcgPSBvcHRpb25zO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlOicgKyBjaGFuZ2VzW2ldLCB0aGlzLCBjdXJyZW50W2NoYW5nZXNbaV1dLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBZb3UgbWlnaHQgYmUgd29uZGVyaW5nIHdoeSB0aGVyZSdzIGEgYHdoaWxlYCBsb29wIGhlcmUuIENoYW5nZXMgY2FuXG4gICAgLy8gYmUgcmVjdXJzaXZlbHkgbmVzdGVkIHdpdGhpbiBgXCJjaGFuZ2VcImAgZXZlbnRzLlxuICAgIGlmIChjaGFuZ2luZykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICghc2lsZW50KSB7XG4gICAgICB3aGlsZSAodGhpcy5fcGVuZGluZykge1xuICAgICAgICBvcHRpb25zID0gdGhpcy5fcGVuZGluZztcbiAgICAgICAgdGhpcy5fcGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZScsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoaXNEaXNwbGF5Q29tcG9uZW50KHRoaXMpICYmIHRoaXMudHJpZ2dlckRvbVJlZnJlc2ggIT09IGZhbHNlKSB7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyTWV0aG9kKCdkb206cmVmcmVzaCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3BlbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9jaGFuZ2luZyA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzXG4gIH0sXG5cbiAgZ2V0U3RhdGUoYXR0cikge1xuICAgIHJldHVybiB0aGlzLnN0YXRlW2F0dHJdXG4gIH0sXG5cbiAgYmluZFN0YXRlRXZlbnRzKCkge1xuICAgIGNvbnN0IGJpbmQgPSBiaW5kRXZlbnRzIHx8IGJpbmRFbnRpdHlFdmVudHM7XG4gICAgaWYgKHRoaXMuc3RhdGVFdmVudHMpIHtcbiAgICAgIGJpbmQodGhpcywgdGhpcywgdGhpcy5zdGF0ZUV2ZW50cylcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kU3RhdGVFdmVudHMoKSB7XG4gICAgY29uc3QgdW5iaW5kID0gdW5iaW5kRXZlbnRzIHx8IHVuYmluZEVudGl0eUV2ZW50cztcbiAgICBpZiAodGhpcy5zdGF0ZUV2ZW50cykge1xuICAgICAgdW5iaW5kKHRoaXMsIHRoaXMsIHRoaXMuc3RhdGVFdmVudHMpXG4gICAgfVxuICB9LFxuXG4gIGNvbXB1dGVTdGF0ZVByb3BzKHN0b3JlLCBwcm9wcykge1xuICAgIGlmICghdGhpcy5maW5hbE1hcFN0YXRlVG9Qcm9wcykge1xuICAgICAgcmV0dXJuIHRoaXMuY29uZmlndXJlRmluYWxNYXBTdGF0ZShzdG9yZSwgcHJvcHMpXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHN0YXRlUHJvcHMgPSB0aGlzLmRvU3RhdGVQcm9wc0RlcGVuZE9uT3duUHJvcHMgP1xuICAgICAgdGhpcy5maW5hbE1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgcHJvcHMpIDpcbiAgICAgIHRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMoc3RhdGUpO1xuXG4gICAgcmV0dXJuIHN0YXRlUHJvcHNcbiAgfSxcblxuICBjb25maWd1cmVGaW5hbE1hcFN0YXRlKHN0b3JlLCBwcm9wcykge1xuICAgIGNvbnN0IG1hcHBlZFN0YXRlID0gdGhpcy5tYXBTdGF0ZShzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG4gICAgY29uc3QgaXNGYWN0b3J5ID0gaXNGdW5jdGlvbihtYXBwZWRTdGF0ZSk7XG5cbiAgICB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzID0gaXNGYWN0b3J5ID8gbWFwcGVkU3RhdGUgOiB0aGlzLm1hcFN0YXRlO1xuICAgIHRoaXMuZG9TdGF0ZVByb3BzRGVwZW5kT25Pd25Qcm9wcyA9IHRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMubGVuZ3RoICE9PSAxO1xuXG4gICAgaWYgKGlzRmFjdG9yeSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZVN0YXRlUHJvcHMoc3RvcmUsIHByb3BzKVxuICAgIH1cblxuICAgIHJldHVybiBtYXBwZWRTdGF0ZVxuICB9LFxuXG4gIHVwZGF0ZVN0YXRlUHJvcHNJZk5lZWRlZCgpIHtcbiAgICBjb25zdCBuZXh0U3RhdGVQcm9wcyA9IHRoaXMuY29tcHV0ZVN0YXRlUHJvcHModGhpcy5zdG9yZSwgdGhpcy5wcm9wcyk7XG4gICAgaWYgKHRoaXMuc3RhdGVQcm9wcyAmJiBpc0VxdWFsKG5leHRTdGF0ZVByb3BzLCB0aGlzLnN0YXRlUHJvcHMpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcblxuICAgIHJldHVybiB0cnVlXG4gIH0sXG5cbiAgY29tcHV0ZURpc3BhdGNoUHJvcHMoc3RvcmUsIHByb3BzKSB7XG4gICAgaWYgKCF0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25maWd1cmVGaW5hbE1hcERpc3BhdGNoKHN0b3JlLCBwcm9wcylcbiAgICB9XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IHN0b3JlLmRpc3BhdGNoO1xuICAgIGNvbnN0IGRpc3BhdGNoUHJvcHMgPSB0aGlzLmRvRGlzcGF0Y2hQcm9wc0RlcGVuZE9uT3duUHJvcHMgP1xuICAgICAgdGhpcy5maW5hbE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgcHJvcHMpIDpcbiAgICAgIHRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gpO1xuXG4gICAgcmV0dXJuIGRpc3BhdGNoUHJvcHNcbiAgfSxcblxuICBjb25maWd1cmVGaW5hbE1hcERpc3BhdGNoKHN0b3JlLCBwcm9wcykge1xuICAgIGNvbnN0IG1hcHBlZERpc3BhdGNoID0gdGhpcy5tYXBEaXNwYXRjaChzdG9yZS5kaXNwYXRjaCwgcHJvcHMpO1xuICAgIGNvbnN0IGlzRmFjdG9yeSA9IGlzRnVuY3Rpb24obWFwcGVkRGlzcGF0Y2gpO1xuXG4gICAgdGhpcy5maW5hbE1hcERpc3BhdGNoVG9Qcm9wcyA9IGlzRmFjdG9yeSA/IG1hcHBlZERpc3BhdGNoIDogdGhpcy5tYXBEaXNwYXRjaDtcbiAgICB0aGlzLmRvRGlzcGF0Y2hQcm9wc0RlcGVuZE9uT3duUHJvcHMgPSB0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzLmxlbmd0aCAhPT0gMTtcblxuICAgIGlmIChpc0ZhY3RvcnkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVEaXNwYXRjaFByb3BzKHN0b3JlLCBwcm9wcylcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwcGVkRGlzcGF0Y2hcbiAgfSxcblxuICB1cGRhdGVEaXNwYXRjaFByb3BzSWZOZWVkZWQoKSB7XG4gICAgY29uc3QgbmV4dERpc3BhdGNoUHJvcHMgPSB0aGlzLmNvbXB1dGVEaXNwYXRjaFByb3BzKHRoaXMuc3RvcmUsIHRoaXMucHJvcHMpO1xuICAgIGlmICh0aGlzLmRpc3BhdGNoUHJvcHMgJiYgaXNFcXVhbChuZXh0RGlzcGF0Y2hQcm9wcywgdGhpcy5kaXNwYXRjaFByb3BzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5kaXNwYXRjaFByb3BzID0gbmV4dERpc3BhdGNoUHJvcHM7XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9LFxuXG4gIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0aGlzLnVuc3Vic2NyaWJlKVxuICB9LFxuXG4gIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdWJzY3JpYmVkKCkpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuaGFuZGxlRGlzcGF0Y2hQcm9wcygpO1xuICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoKVxuICAgIH1cbiAgfSxcblxuICB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgb25SZW5kZXIoKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKVxuICB9LFxuXG4gIG9uRGVzdHJveSgpIHtcbiAgICB0aGlzLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy51bmJpbmRTdGF0ZUV2ZW50cygpO1xuICAgIHRoaXMuY2xlYXJDYWNoZSgpXG4gIH0sXG5cbiAgY2xlYXJDYWNoZSgpIHtcbiAgICB0aGlzLmRpc3BhdGNoUHJvcHMgPSBudWxsO1xuICAgIHRoaXMuc3RhdGVQcm9wcyA9IG51bGw7XG4gICAgdGhpcy5maW5hbE1hcERpc3BhdGNoVG9Qcm9wcyA9IG51bGw7XG4gICAgdGhpcy5maW5hbE1hcFN0YXRlVG9Qcm9wcyA9IG51bGw7XG4gICAgdGhpcy5oYXZlSW5pdGlhbFN0YXRlUHJvcHNCZWVuRGV0ZXJtaW5lZCA9IGZhbHNlO1xuICAgIHRoaXMuaGF2ZUluaXRpYWxEaXNwYXRjaFByb3BzQmVlbkRldGVybWluZWQgPSBmYWxzZVxuICB9LFxuXG4gIGhhbmRsZURpc3BhdGNoUHJvcHMoKSB7XG4gICAgaWYgKCF0aGlzLmhhdmVJbml0aWFsRGlzcGF0Y2hQcm9wc0JlZW5EZXRlcm1pbmVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZURpc3BhdGNoUHJvcHNJZk5lZWRlZCgpO1xuICAgICAgdGhpcy5oYXZlSW5pdGlhbERpc3BhdGNoUHJvcHNCZWVuRGV0ZXJtaW5lZCA9IHRydWVcbiAgICB9XG4gIH0sXG5cbiAgaGFuZGxlQ2hhbmdlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBwcmV2U3RvcmVTdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoJ3N0b3JlU3RhdGUnKTtcbiAgICBpZiAodGhpcy5oYXZlSW5pdGlhbFN0YXRlUHJvcHNCZWVuRGV0ZXJtaW5lZCAmJiBpc0VxdWFsKHByZXZTdG9yZVN0YXRlLCBzdG9yZVN0YXRlKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkID0gdGhpcy51cGRhdGVTdGF0ZVByb3BzSWZOZWVkZWQoKTtcbiAgICB0aGlzLmhhdmVJbml0aWFsU3RhdGVQcm9wc0JlZW5EZXRlcm1pbmVkID0gdHJ1ZTtcblxuICAgIGlmIChoYXZlU3RhdGVQcm9wc0NoYW5nZWQpIHtcblxuICAgICAgY29uc3QgbWVyZ2VkUHJvcHMgPSB0aGlzLm1lcmdlUHJvcHModGhpcy5zdGF0ZVByb3BzLCB0aGlzLmRpc3BhdGNoUHJvcHMsIHRoaXMucHJvcHMpO1xuICAgICAgdGhpcy5wcm9wcyA9IG1lcmdlZFByb3BzO1xuXG4gICAgICBpc0Z1bmN0aW9uKHRoaXMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykgJiYgdGhpcy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG1lcmdlZFByb3BzKTtcblxuICAgICAgaWYgKGlzRGlzcGxheUNvbXBvbmVudCh0aGlzKSAmJiB0aGlzLnRyaWdnZXJEb21SZWZyZXNoICE9PSBmYWxzZSkge1xuICAgICAgICB0aGlzLnRyaWdnZXJNZXRob2QoJ2RvbTpyZWZyZXNoJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzdG9yZVN0YXRlXG4gICAgfSlcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbWl4aW47XG4iLCJpbXBvcnQgeyBkZWZhdWx0cywgb21pdCB9IGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnXG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcydcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wcyBmcm9tICcuL21lcmdlUHJvcHMnXG5pbXBvcnQgbWl4aW4gZnJvbSAnLi9taXhpbidcbmltcG9ydCBpc0Rpc3BsYXlDb21wb25lbnQgZnJvbSAnLi9pc0Rpc3BsYXlDb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0KF9tYXBTdGF0ZVRvUHJvcHMsIF9tYXBEaXNwYXRjaFRvUHJvcHMsIF9tZXJnZVByb3BzLCBfb3B0aW9ucykge1xuXG4gIGNvbnN0IG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fTtcblxuICByZXR1cm4gZnVuY3Rpb24oQ29tcG9uZW50KSB7XG5cbiAgICBjb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBfbWFwU3RhdGVUb1Byb3BzIHx8IENvbXBvbmVudC5wcm90b3R5cGUubWFwU3RhdGVUb1Byb3BzIHx8IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHM7XG4gICAgY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gX21hcERpc3BhdGNoVG9Qcm9wcyB8fCBDb21wb25lbnQucHJvdG90eXBlLm1hcERpc3BhdGNoVG9Qcm9wcyB8fCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzO1xuICAgIGNvbnN0IG1lcmdlUHJvcHMgPSBfbWVyZ2VQcm9wcyB8fCBDb21wb25lbnQucHJvdG90eXBlLm1lcmdlUHJvcHMgfHwgZGVmYXVsdE1lcmdlUHJvcHM7XG4gICAgY29uc3Qgc3RvcmUgPSBvcHRpb25zLnN0b3JlIHx8IENvbXBvbmVudC5wcm90b3R5cGUuc3RvcmU7XG4gICAgY29uc3QgY29tcG9uZW50SW5pdGlhbGl6ZSA9IENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZTtcbiAgICBjb25zdCBjb21wb25lbnRPblJlbmRlciA9IENvbXBvbmVudC5wcm90b3R5cGUub25SZW5kZXI7XG4gICAgY29uc3QgY29tcG9uZW50T25EZXN0cm95ID0gQ29tcG9uZW50LnByb3RvdHlwZS5vbkRlc3Ryb3k7XG5cbiAgICBsZXQgY29ubmVjdE1peGluID0gZGVmYXVsdHMoe30sIHtcblxuICAgICAgaW5pdGlhbGl6ZShfaW5pdE9wdGlvbnMpIHtcblxuICAgICAgICBjb25zdCBpbml0T3B0aW9ucyA9IF9pbml0T3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBtaXhpbi5pbml0aWFsaXplLmNhbGwodGhpcywge1xuICAgICAgICAgIG1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgICAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICAgICAgbWVyZ2VQcm9wcyxcbiAgICAgICAgICBzdG9yZSxcbiAgICAgICAgICBwcm9wczogaW5pdE9wdGlvbnMucHJvcHNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudEluaXRpYWxpemUpIHtcbiAgICAgICAgICBjb21wb25lbnRJbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIG9uUmVuZGVyKCkge1xuXG4gICAgICAgIG1peGluLm9uUmVuZGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudE9uUmVuZGVyKSB7XG4gICAgICAgICAgY29tcG9uZW50T25SZW5kZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBvbkRlc3Ryb3koKSB7XG5cbiAgICAgICAgbWl4aW4ub25EZXN0cm95LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudE9uRGVzdHJveSkge1xuICAgICAgICAgIGNvbXBvbmVudE9uRGVzdHJveS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgbWl4aW4pO1xuXG4gICAgaWYgKCFpc0Rpc3BsYXlDb21wb25lbnQoQ29tcG9uZW50KSkge1xuICAgICAgY29ubmVjdE1peGluID0gb21pdChjb25uZWN0TWl4aW4sICdvblJlbmRlcicpXG4gICAgfVxuXG4gICAgcmV0dXJuIENvbXBvbmVudC5leHRlbmQoY29ubmVjdE1peGluKVxuICB9XG59XG4iLCJpbXBvcnQgY29ubmVjdCBmcm9tICcuL2Nvbm5lY3QnXG5pbXBvcnQgbWl4aW4gZnJvbSAnLi9taXhpbidcbmltcG9ydCB7IHZlcnNpb24gYXMgVkVSU0lPTiB9IGZyb20gJy4uL3BhY2thZ2UuanNvbidcblxuY29uc3QgTWFyaW9uZXR0ZVJlZHV4ID0ge1xuICBjb25uZWN0LFxuICBtaXhpbixcbiAgVkVSU0lPTlxufVxuXG5leHBvcnQgZGVmYXVsdCBNYXJpb25ldHRlUmVkdXhcbiJdLCJuYW1lcyI6WyJtYXBTdGF0ZVRvUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJkaXNwYXRjaCIsIm1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsInBhcmVudFByb3BzIiwiZXh0ZW5kIiwiaXNEaXNwbGF5Q29tcG9uZW50IiwiQ29tcG9uZW50IiwiaXNGdW5jdGlvbiIsInByb3RvdHlwZSIsIlZpZXciLCJCZWhhdmlvciIsImlzT2JqZWN0IiwibWl4aW4iLCJfb3B0aW9ucyIsIm9wdGlvbnMiLCJtYXBTdGF0ZSIsImRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMiLCJtYXBEaXNwYXRjaCIsImRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInByb3BzIiwic3RvcmUiLCJ3aW5kb3ciLCJzdG9yZVN0YXRlIiwiZ2V0U3RhdGUiLCJzdGF0ZSIsImRlZmF1bHRzIiwiZ2V0SW5pdGlhbFN0YXRlIiwiYmluZFN0YXRlRXZlbnRzIiwiY2xlYXJDYWNoZSIsInRyeVN1YnNjcmliZSIsImtleSIsInZhbCIsInVuc2V0Iiwic2lsZW50IiwiY2hhbmdlcyIsImNoYW5naW5nIiwiX2NoYW5naW5nIiwiX3ByZXZpb3VzU3RhdGUiLCJjbG9uZSIsImNoYW5nZWQiLCJjdXJyZW50IiwicHJldiIsIl92YWwiLCJfa2V5IiwiaXNFcXVhbCIsInB1c2giLCJsZW5ndGgiLCJfcGVuZGluZyIsImkiLCJ0cmlnZ2VyIiwidHJpZ2dlckRvbVJlZnJlc2giLCJ0cmlnZ2VyTWV0aG9kIiwiYXR0ciIsImJpbmQiLCJiaW5kRXZlbnRzIiwiYmluZEVudGl0eUV2ZW50cyIsInN0YXRlRXZlbnRzIiwidW5iaW5kIiwidW5iaW5kRXZlbnRzIiwidW5iaW5kRW50aXR5RXZlbnRzIiwiZmluYWxNYXBTdGF0ZVRvUHJvcHMiLCJjb25maWd1cmVGaW5hbE1hcFN0YXRlIiwiZG9TdGF0ZVByb3BzRGVwZW5kT25Pd25Qcm9wcyIsIm1hcHBlZFN0YXRlIiwiaXNGYWN0b3J5IiwiY29tcHV0ZVN0YXRlUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsImZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzIiwiY29uZmlndXJlRmluYWxNYXBEaXNwYXRjaCIsImRvRGlzcGF0Y2hQcm9wc0RlcGVuZE9uT3duUHJvcHMiLCJtYXBwZWREaXNwYXRjaCIsImNvbXB1dGVEaXNwYXRjaFByb3BzIiwibmV4dERpc3BhdGNoUHJvcHMiLCJ1bnN1YnNjcmliZSIsImlzU3Vic2NyaWJlZCIsInN1YnNjcmliZSIsImhhbmRsZUNoYW5nZSIsImhhbmRsZURpc3BhdGNoUHJvcHMiLCJ0cnlVbnN1YnNjcmliZSIsInVuYmluZFN0YXRlRXZlbnRzIiwiaGF2ZUluaXRpYWxTdGF0ZVByb3BzQmVlbkRldGVybWluZWQiLCJoYXZlSW5pdGlhbERpc3BhdGNoUHJvcHNCZWVuRGV0ZXJtaW5lZCIsInVwZGF0ZURpc3BhdGNoUHJvcHNJZk5lZWRlZCIsInByZXZTdG9yZVN0YXRlIiwiaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkIiwidXBkYXRlU3RhdGVQcm9wc0lmTmVlZGVkIiwibWVyZ2VkUHJvcHMiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwic2V0U3RhdGUiLCJjb25uZWN0IiwiX21hcFN0YXRlVG9Qcm9wcyIsIl9tYXBEaXNwYXRjaFRvUHJvcHMiLCJfbWVyZ2VQcm9wcyIsImNvbXBvbmVudEluaXRpYWxpemUiLCJpbml0aWFsaXplIiwiY29tcG9uZW50T25SZW5kZXIiLCJvblJlbmRlciIsImNvbXBvbmVudE9uRGVzdHJveSIsIm9uRGVzdHJveSIsImNvbm5lY3RNaXhpbiIsIl9pbml0T3B0aW9ucyIsImluaXRPcHRpb25zIiwiY2FsbCIsImFwcGx5IiwiYXJndW1lbnRzIiwib21pdCIsIk1hcmlvbmV0dGVSZWR1eCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBZSxTQUFTQSxlQUFULEdBQTJCO1NBQ2pDLEVBQVA7OztBQ0RhLFNBQVNDLGtCQUFULENBQTRCQyxRQUE1QixFQUFzQztTQUM1QztjQUNLQTtHQURaOzs7QUNBYSxTQUFTQyxVQUFULENBQW9CQyxVQUFwQixFQUFnQ0MsYUFBaEMsRUFBK0NDLFdBQS9DLEVBQTREO1NBQ2xFQyxrQkFBTyxFQUFQLEVBQVdELFdBQVgsRUFBd0JGLFVBQXhCLEVBQW9DQyxhQUFwQyxDQUFQOzs7QUNDYSxTQUFTRyxrQkFBVCxDQUE0QkMsU0FBNUIsRUFBdUM7TUFDaERDLHNCQUFXRCxTQUFYLENBQUosRUFBMkI7V0FDbEJBLFVBQVVFLFNBQVYsWUFBK0JDLGVBQS9CLElBQXVDSCxVQUFVRSxTQUFWLFlBQStCRSxtQkFBN0U7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