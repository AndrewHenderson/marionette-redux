{"version":3,"sources":["src/mapStateToProps.js","src/mapDispatchToProps.js","src/mergeProps.js","src/isDisplayComponent.js","src/connect.js","src/mixin.js","src/marionette-redux.js"],"names":["mapStateToProps","mapDispatchToProps","dispatch","mergeProps","stateProps","dispatchProps","parentProps","extend","isDisplayComponent","Component","isFunction","prototype","View","Behavior","isObject","connect","_mapStateToProps","_mapDispatchToProps","_mergeProps","_options","options","defaultMapStateToProps","defaultMapDispatchToProps","defaultMergeProps","store","componentInitialize","initialize","componentonRender","onRender","componentOnDestroy","onDestroy","connectMixin","defaults","_initOptions","initOptions","call","this","props","apply","arguments","mixin","omit","mapState","mapDispatch","window","storeState","getState","state","getInitialState","bindStateEvents","clearCache","trySubscribe","key","val","unset","silent","changes","changing","_changing","_previousState","clone","changed","current","prev","_val","_key","isEqual","push","length","_pending","i","trigger","attr","bind","bindEvents","bindEntityEvents","stateEvents","unbind","unbindEvents","unbindEntityEvents","finalMapStateToProps","configureFinalMapState","doStatePropsDependOnOwnProps","mappedState","isFactory","computeStateProps","nextStateProps","finalMapDispatchToProps","configureFinalMapDispatch","doDispatchPropsDependOnOwnProps","mappedDispatch","computeDispatchProps","nextDispatchProps","unsubscribe","isSubscribed","subscribe","handleChange","handleDispatchProps","tryUnsubscribe","unbindStateEvents","haveInitialStatePropsBeenDetermined","haveInitialDispatchPropsBeenDetermined","updateDispatchPropsIfNeeded","prevStoreState","haveStatePropsChanged","updateStatePropsIfNeeded","mergedProps","componentDidReceiveProps","setState","MarionetteRedux"],"mappings":";;;;;;oRAAe,SAASA,cCAT,QAASC,GAAmBC,mBAE7BA,GCDC,QAASC,GAAWC,EAAYC,EAAeC,SACrDC,GAAAA,UAAWD,EAAaF,EAAYC,GCC9B,QAASG,GAAmBC,SACrCC,GAAAA,WAAWD,GACNA,EAAUE,oBAAqBC,GAAAA,MAAQH,EAAUE,oBAAqBE,GAAAA,WAE3EC,EAAAA,SAASL,KACJA,YAAqBG,GAAAA,MAAQH,YAAqBI,GAAAA,UCD9C,QAASE,GAAQC,EAAkBC,EAAqBC,EAAaC,MAE5EC,GAAUD,YAET,UAASV,MAERT,GAAkBgB,GAAoBP,EAAUE,UAAUX,iBAAmBqB,EAC7EpB,EAAqBgB,GAAuBR,EAAUE,UAAUV,oBAAsBqB,EACtFnB,EAAae,GAAeT,EAAUE,UAAUR,YAAcoB,EAC9DC,EAAQJ,EAAQI,OAASf,EAAUE,UAAUa,MAC7CC,EAAsBhB,EAAUE,UAAUe,WAC1CC,EAAoBlB,EAAUE,UAAUiB,SACxCC,EAAqBpB,EAAUE,UAAUmB,UAE3CC,EAAeC,EAAAA,wBAAa,SAEnBC,MAEHC,GAAcD,QAEdP,WAAWS,KAAKC,wEAKbF,EAAYG,QAGjBZ,KACkBa,MAAMF,KAAMG,qBAfN,aAqBtBX,SAASU,MAAMF,KAAMG,WAEvBZ,KACgBW,MAAMF,KAAMG,sBAxBJ,aA8BtBT,UAAUQ,MAAMF,KAAMG,WAExBV,KACiBS,MAAMF,KAAMG,aAGlCC,SAEEhC,GAAmBC,OACPgC,EAAAA,KAAKV,EAAc,aAG7BtB,EAAUF,OAAOwB,IC3C5B,GAAMS,eAAQ,SAEDrB,MAEHC,GAAUD,WAEXuB,SAAWtB,EAAQpB,iBAAmBoC,KAAKpC,iBAAmBqB,OAC9DsB,YAAcvB,EAAQnB,oBAAsBmC,KAAKnC,oBAAsBqB,OACvEnB,WAAaiB,EAAQjB,YAAciC,KAAKjC,YAAcoB,OACtDc,MAAQD,KAAKC,UAEdjB,EAAQiB,gBACHD,KAAKC,MAAOjB,EAAQiB,YAGxBb,MAAQJ,EAAQI,OAASY,KAAKZ,OAE9BY,KAAKZ,OAASoB,QAAUA,OAAOpB,aAC7BA,MAAQoB,OAAOpB,UAGhBqB,GAAaT,KAAKZ,MAAMsB,gBACzBC,MAAQf,EAAAA,qBACCa,GACXT,KAAKY,wBAEHC,uBACAC,aAEA1C,EAAmB4B,YACjBe,gCA9BG,8BAAA,SAsCHC,EAAKC,EAAKjC,MAEN,MAAPgC,QACKhB,SAILW,GAAAA,MACAjC,GAAAA,SAASsC,MACHA,IACEC,IAETN,MAAYK,GAAOC,MAGVjC,SAGNkC,GAAalC,EAAQkC,MACrBC,EAAanC,EAAQmC,OACrBC,KACAC,EAAarB,KAAKsB,eACnBA,WAAY,EAEZD,SACEE,eAAiBC,EAAAA,MAAMxB,KAAKW,YAC5Bc,eAGDC,GAAU1B,KAAKW,MACfc,EAAUzB,KAAKyB,QACfE,EAAU3B,KAAKuB,yBAGhBZ,EAAO,SAASiB,EAAMC,GACpBC,EAAAA,QAAQJ,EAAQG,GAAOD,MAClBG,KAAKF,GAEVC,EAAAA,QAAQH,EAAKE,GAAOD,SAGhBH,GAAQI,KAFPA,GAAQD,UAIHF,GAAQG,GAAQH,EAAQG,GAAQD,KAI5CT,EAAQ,CACPC,EAAQY,cACLC,SAAWjD,OAEb,GAAIkD,GAAI,EAAGA,EAAId,EAAQY,OAAQE,SAC7BC,QAAQ,UAAYf,EAAQc,GAAIlC,KAAM0B,EAAQN,EAAQc,IAAKlD,MAMhEqC,QACKrB,UAEJmB,OACInB,KAAKiC,YACAjC,KAAKiC,cACVA,UAAW,OACXE,QAAQ,SAAUnC,KAAMhB,eAG5BiD,UAAW,OACXX,WAAY,EACVtB,eA5GG,SA+GHoC,SACApC,MAAKW,MAAMyB,oBAhHR,cAoHJC,GAAOC,EAAAA,YAAcC,EAAAA,gBACvBvC,MAAKwC,eACFxC,KAAMA,KAAMA,KAAKwC,gCAtHd,cA2HJC,GAASC,EAAAA,cAAgBC,EAAAA,kBAC3B3C,MAAKwC,eACAxC,KAAMA,KAAMA,KAAKwC,gCA7HhB,SAiIMpD,EAAOa,OAClBD,KAAK4C,2BACD5C,MAAK6C,uBAAuBzD,EAAOa,MAGtCU,GAAQvB,EAAMsB,WACd1C,EAAagC,KAAK8C,6BACtB9C,KAAK4C,qBAAqBjC,EAAOV,GACjCD,KAAK4C,qBAAqBjC,SAErB3C,2BA3IG,SA8IWoB,EAAOa,MACtB8C,GAAc/C,KAAKM,SAASlB,EAAMsB,WAAYT,GAC9C+C,EAAY1E,EAAAA,WAAWyE,eAExBH,qBAAuBI,EAAYD,EAAc/C,KAAKM,cACtDwC,6BAAoE,IAArC9C,KAAK4C,qBAAqBZ,OAE1DgB,EACKhD,KAAKiD,kBAAkB7D,EAAOa,GAGhC8C,4BAzJG,cA6JJG,GAAiBlD,KAAKiD,kBAAkBjD,KAAKZ,MAAOY,KAAKC,eAC3DD,KAAKhC,aAAc8D,EAAAA,QAAQoB,EAAgBlD,KAAKhC,oBAI/CA,WAAakF,GAEX,yBApKG,SAuKS9D,EAAOa,OACrBD,KAAKmD,8BACDnD,MAAKoD,0BAA0BhE,EAAOa,MAGzCnC,GAAWsB,EAAMtB,SACjBG,EAAgB+B,KAAKqD,gCACzBrD,KAAKmD,wBAAwBrF,EAAUmC,GACvCD,KAAKmD,wBAAwBrF,SAExBG,8BAjLG,SAoLcmB,EAAOa,MACzBqD,GAAiBtD,KAAKO,YAAYnB,EAAMtB,SAAUmC,GAClD+C,EAAY1E,EAAAA,WAAWgF,eAExBH,wBAA0BH,EAAYM,EAAiBtD,KAAKO,iBAC5D8C,gCAA0E,IAAxCrD,KAAKmD,wBAAwBnB,OAEhEgB,EACKhD,KAAKuD,qBAAqBnE,EAAOa,GAGnCqD,+BA/LG,cAmMJE,GAAoBxD,KAAKuD,qBAAqBvD,KAAKZ,MAAOY,KAAKC,eACjED,KAAK/B,gBAAiB6D,EAAAA,QAAQ0B,EAAmBxD,KAAK/B,uBAIrDA,cAAgBuF,GAEd,iBA1MG,iBA8MHlF,GAAAA,WAAW0B,KAAKyD,2BA9Mb,WAkNLzD,KAAK0D,sBACHD,YAAczD,KAAKZ,MAAMuE,UAAU3D,KAAK4D,aAAavB,KAAKrC,YAC1D6D,2BACAD,gCArNG,WA0NN5D,KAAKyD,mBACFA,mBACAA,YAAc,gBA5NX,gBAiOL1C,0BAjOK,gBAqOL+C,sBACAC,yBACAjD,yBAvOK,gBA2OL7C,cAAgB,UAChBD,WAAa,UACbmF,wBAA0B,UAC1BP,qBAAuB,UACvBoB,qCAAsC,OACtCC,wCAAyC,uBAhPpC,WAoPLjE,KAAKiE,8CACHC,mCACAD,wCAAyC,iBAtPtC,cA2PLjE,KAAKyD,gBAIJhD,GAAaT,KAAKZ,MAAMsB,WACxByD,EAAiBnE,KAAKU,SAAS,kBACjCV,KAAKgE,sCAAuClC,EAAAA,QAAQqC,EAAgB1D,OAIlE2D,GAAwBpE,KAAKqE,mCAC9BL,qCAAsC,EAEvCI,EAAuB,IAEnBE,GAActE,KAAKjC,WAAWiC,KAAKhC,WAAYgC,KAAK/B,cAAe+B,KAAKC,YACzEA,MAAQqE,eAEFtE,KAAKuE,2BAA6BvE,KAAKuE,yBAAyBD,QAGxEE,uCChSHC","file":"marionette-redux.min.js","sourcesContent":["export default function mapStateToProps() {\n  return {}\n}\n","export default function mapDispatchToProps(dispatch) {\n  return {\n    dispatch: dispatch\n  }\n}\n","import { extend } from 'underscore';\nexport default function mergeProps(stateProps, dispatchProps, parentProps) {\n  return extend({}, parentProps, stateProps, dispatchProps)\n}\n","import { isObject, isFunction } from 'underscore'\nimport { View, Behavior } from 'marionette'\n\nexport default function isDisplayComponent(Component) {\n  if (isFunction(Component)) {\n    return Component.prototype instanceof View || Component.prototype instanceof Behavior\n  }\n  if (isObject(Component)) {\n    return Component instanceof View || Component instanceof Behavior\n  }\n  return false\n}\n","import { defaults, omit } from 'underscore';\nimport defaultMapStateToProps from './mapStateToProps'\nimport defaultMapDispatchToProps from './mapDispatchToProps'\nimport defaultMergeProps from './mergeProps'\nimport mixin from './mixin'\nimport isDisplayComponent from './isDisplayComponent';\n\nexport default function connect(_mapStateToProps, _mapDispatchToProps, _mergeProps, _options) {\n\n  const options = _options || {};\n\n  return function(Component) {\n\n    const mapStateToProps = _mapStateToProps || Component.prototype.mapStateToProps || defaultMapStateToProps;\n    const mapDispatchToProps = _mapDispatchToProps || Component.prototype.mapDispatchToProps || defaultMapDispatchToProps;\n    const mergeProps = _mergeProps || Component.prototype.mergeProps || defaultMergeProps;\n    const store = options.store || Component.prototype.store;\n    const componentInitialize = Component.prototype.initialize;\n    const componentonRender = Component.prototype.onRender;\n    const componentOnDestroy = Component.prototype.onDestroy;\n\n    let connectMixin = defaults({}, {\n\n      initialize(_initOptions) {\n\n        const initOptions = _initOptions || {};\n\n        mixin.initialize.call(this, {\n          mapStateToProps,\n          mapDispatchToProps,\n          mergeProps,\n          store,\n          props: initOptions.props\n        });\n\n        if (componentInitialize) {\n          componentInitialize.apply(this, arguments);\n        }\n      },\n\n      onRender() {\n\n        mixin.onRender.apply(this, arguments);\n\n        if (componentonRender) {\n          componentonRender.apply(this, arguments)\n        }\n      },\n\n      onDestroy() {\n\n        mixin.onDestroy.apply(this, arguments);\n\n        if (componentOnDestroy) {\n          componentOnDestroy.apply(this, arguments);\n        }\n      }\n    }, mixin);\n\n    if (!isDisplayComponent(Component)) {\n      connectMixin = omit(connectMixin, 'onRender')\n    }\n\n    return Component.extend(connectMixin)\n  }\n}\n","import {\n  extend,\n  defaults,\n  clone,\n  each,\n  isEqual,\n  isFunction,\n  isObject\n} from 'underscore';\nimport {\n  bindEvents,\n  bindEntityEvents,\n  unbindEvents,\n  unbindEntityEvents\n} from 'marionette';\nimport defaultMapStateToProps from './mapStateToProps';\nimport defaultMapDispatchToProps from './mapDispatchToProps';\nimport defaultMergeProps from './mergeProps';\nimport isDisplayComponent from './isDisplayComponent';\n\nconst mixin = {\n\n  initialize(_options) {\n\n    const options = _options || {};\n\n    this.mapState = options.mapStateToProps || this.mapStateToProps || defaultMapStateToProps;\n    this.mapDispatch = options.mapDispatchToProps || this.mapDispatchToProps || defaultMapDispatchToProps;\n    this.mergeProps = options.mergeProps || this.mergeProps || defaultMergeProps;\n    this.props = this.props || {};\n\n    if (options.props) {\n      extend(this.props, options.props)\n    }\n\n    this.store = options.store || this.store;\n\n    if (!this.store && window && window.store) {\n      this.store = window.store\n    }\n\n    const storeState = this.store.getState();\n    this.state = defaults({\n      storeState: storeState\n    }, this.getInitialState());\n\n    this.bindStateEvents();\n    this.clearCache();\n\n    if (!isDisplayComponent(this)) {\n      this.trySubscribe()\n    }\n  },\n\n  getInitialState() {\n    return {}\n  },\n\n  setState(key, val, options) {\n\n    if (key == null) {\n      return this;\n    }\n\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    let state;\n    if (isObject(key)) {\n      state = key;\n      options = val;\n    } else {\n      (state = {})[key] = val;\n    }\n\n    options || (options = {});\n\n    // Extract state and options.\n    const unset      = options.unset;\n    const silent     = options.silent;\n    const changes    = [];\n    const changing   = this._changing;\n    this._changing = true;\n\n    if (!changing) {\n      this._previousState = clone(this.state);\n      this.changed = {};\n    }\n\n    const current = this.state;\n    const changed = this.changed;\n    const prev    = this._previousState;\n\n    // For each `set` state, update or delete the current value.\n    each(state, function(_val, _key) {\n      if (!isEqual(current[_key], _val)) {\n        changes.push(_key);\n      }\n      if (!isEqual(prev[_key], _val)) {\n        changed[_key] = _val;\n      } else {\n        delete changed[_key];\n      }\n      unset ? delete current[_key] : current[_key] = _val;\n    });\n\n    // Trigger all relevant state changes.\n    if (!silent) {\n      if (changes.length) {\n        this._pending = options;\n      }\n      for (let i = 0; i < changes.length; i++) {\n        this.trigger('change:' + changes[i], this, current[changes[i]], options);\n      }\n    }\n\n    // You might be wondering why there's a `while` loop here. Changes can\n    // be recursively nested within `\"change\"` events.\n    if (changing) {\n      return this;\n    }\n    if (!silent) {\n      while (this._pending) {\n        options = this._pending;\n        this._pending = false;\n        this.trigger('change', this, options);\n      }\n    }\n    this._pending = false;\n    this._changing = false;\n    return this\n  },\n\n  getState(attr) {\n    return this.state[attr]\n  },\n\n  bindStateEvents() {\n    const bind = bindEvents || bindEntityEvents;\n    if (this.stateEvents) {\n      bind(this, this, this.stateEvents)\n    }\n  },\n\n  unbindStateEvents() {\n    const unbind = unbindEvents || unbindEntityEvents;\n    if (this.stateEvents) {\n      unbind(this, this, this.stateEvents)\n    }\n  },\n\n  computeStateProps(store, props) {\n    if (!this.finalMapStateToProps) {\n      return this.configureFinalMapState(store, props)\n    }\n\n    const state = store.getState();\n    const stateProps = this.doStatePropsDependOnOwnProps ?\n      this.finalMapStateToProps(state, props) :\n      this.finalMapStateToProps(state);\n\n    return stateProps\n  },\n\n  configureFinalMapState(store, props) {\n    const mappedState = this.mapState(store.getState(), props);\n    const isFactory = isFunction(mappedState);\n\n    this.finalMapStateToProps = isFactory ? mappedState : this.mapState;\n    this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeStateProps(store, props)\n    }\n\n    return mappedState\n  },\n\n  updateStatePropsIfNeeded() {\n    const nextStateProps = this.computeStateProps(this.store, this.props);\n    if (this.stateProps && isEqual(nextStateProps, this.stateProps)) {\n      return false\n    }\n\n    this.stateProps = nextStateProps;\n\n    return true\n  },\n\n  computeDispatchProps(store, props) {\n    if (!this.finalMapDispatchToProps) {\n      return this.configureFinalMapDispatch(store, props)\n    }\n\n    const dispatch = store.dispatch;\n    const dispatchProps = this.doDispatchPropsDependOnOwnProps ?\n      this.finalMapDispatchToProps(dispatch, props) :\n      this.finalMapDispatchToProps(dispatch);\n\n    return dispatchProps\n  },\n\n  configureFinalMapDispatch(store, props) {\n    const mappedDispatch = this.mapDispatch(store.dispatch, props);\n    const isFactory = isFunction(mappedDispatch);\n\n    this.finalMapDispatchToProps = isFactory ? mappedDispatch : this.mapDispatch;\n    this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;\n\n    if (isFactory) {\n      return this.computeDispatchProps(store, props)\n    }\n\n    return mappedDispatch\n  },\n\n  updateDispatchPropsIfNeeded() {\n    const nextDispatchProps = this.computeDispatchProps(this.store, this.props);\n    if (this.dispatchProps && isEqual(nextDispatchProps, this.dispatchProps)) {\n      return false\n    }\n\n    this.dispatchProps = nextDispatchProps;\n\n    return true\n  },\n\n  isSubscribed() {\n    return isFunction(this.unsubscribe)\n  },\n\n  trySubscribe() {\n    if (!this.isSubscribed()) {\n      this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));\n      this.handleDispatchProps();\n      this.handleChange()\n    }\n  },\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null\n    }\n  },\n\n  onRender() {\n    this.trySubscribe()\n  },\n\n  onDestroy() {\n    this.tryUnsubscribe();\n    this.unbindStateEvents();\n    this.clearCache()\n  },\n\n  clearCache() {\n    this.dispatchProps = null;\n    this.stateProps = null;\n    this.finalMapDispatchToProps = null;\n    this.finalMapStateToProps = null;\n    this.haveInitialStatePropsBeenDetermined = false;\n    this.haveInitialDispatchPropsBeenDetermined = false\n  },\n\n  handleDispatchProps() {\n    if (!this.haveInitialDispatchPropsBeenDetermined) {\n      this.updateDispatchPropsIfNeeded();\n      this.haveInitialDispatchPropsBeenDetermined = true\n    }\n  },\n\n  handleChange() {\n    if (!this.unsubscribe) {\n      return\n    }\n\n    const storeState = this.store.getState();\n    const prevStoreState = this.getState('storeState');\n    if (this.haveInitialStatePropsBeenDetermined && isEqual(prevStoreState, storeState)) {\n      return\n    }\n\n    const haveStatePropsChanged = this.updateStatePropsIfNeeded();\n    this.haveInitialStatePropsBeenDetermined = true;\n\n    if (haveStatePropsChanged) {\n\n      const mergedProps = this.mergeProps(this.stateProps, this.dispatchProps, this.props);\n      this.props = mergedProps;\n\n      isFunction(this.componentDidReceiveProps) && this.componentDidReceiveProps(mergedProps)\n    }\n\n    this.setState({\n      storeState\n    })\n  }\n};\n\nexport default mixin;\n","import connect from './connect'\nimport mixin from './mixin'\nimport { version as VERSION } from '../package.json'\n\nconst MarionetteRedux = {\n  connect,\n  mixin,\n  VERSION\n}\n\nexport default MarionetteRedux\n"]}